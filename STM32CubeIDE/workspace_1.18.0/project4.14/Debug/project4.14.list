
project4.14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cd8  08009b28  08009b28  0000ab28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e800  0800e800  000101e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e800  0800e800  0000f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e808  0800e808  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e808  0800e808  0000f808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e80c  0800e80c  0000f80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800e810  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001e0  0800e9f0  000101e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800e9f0  000104b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fcb  00000000  00000000  00010209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309b  00000000  00000000  000221d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00025270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da6  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d106  00000000  00000000  000271ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177d3  00000000  00000000  000442b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4b8e  00000000  00000000  0005ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c74  00000000  00000000  00100658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001062cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08009b10 	.word	0x08009b10

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08009b10 	.word	0x08009b10

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <get_pen_color>:
} PenColor;

static PenColor pen_color = PEN_BLACK;
static int last_x = -1, last_y = -1;  // 이전 좌표 저장

static uint16_t get_pen_color(void) {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    switch (pen_color) {
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <get_pen_color+0x28>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d002      	beq.n	800123a <get_pen_color+0x12>
 8001234:	2b02      	cmp	r3, #2
 8001236:	d003      	beq.n	8001240 <get_pen_color+0x18>
 8001238:	e004      	b.n	8001244 <get_pen_color+0x1c>
        case PEN_RED: return COLOR_RED;
 800123a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800123e:	e002      	b.n	8001246 <get_pen_color+0x1e>
        case PEN_BLUE: return COLOR_BLUE;
 8001240:	231f      	movs	r3, #31
 8001242:	e000      	b.n	8001246 <get_pen_color+0x1e>
        default: return COLOR_BLACK;
 8001244:	2300      	movs	r3, #0
    }
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200001fc 	.word	0x200001fc

08001254 <WriteApp_draw_buttons>:

void WriteApp_draw_buttons(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
    LCD_Draw_Rectangle(0, 0, 80, 30, COLOR_BLACK);
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	231e      	movs	r3, #30
 8001260:	2250      	movs	r2, #80	@ 0x50
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f004 fe0a 	bl	8005e7e <LCD_Draw_Rectangle>
    LCD_Draw_Str(20, 10, (uint8_t *)"Black", COLOR_BLACK, 1);
 800126a:	2301      	movs	r3, #1
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <WriteApp_draw_buttons+0x98>)
 8001272:	210a      	movs	r1, #10
 8001274:	2014      	movs	r0, #20
 8001276:	f004 fdad 	bl	8005dd4 <LCD_Draw_Str>

    LCD_Draw_Rectangle(80, 0, 160, 30, COLOR_RED);
 800127a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	231e      	movs	r3, #30
 8001282:	22a0      	movs	r2, #160	@ 0xa0
 8001284:	2100      	movs	r1, #0
 8001286:	2050      	movs	r0, #80	@ 0x50
 8001288:	f004 fdf9 	bl	8005e7e <LCD_Draw_Rectangle>
    LCD_Draw_Str(100, 10, (uint8_t *)"Red", COLOR_RED, 1);
 800128c:	2301      	movs	r3, #1
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001294:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <WriteApp_draw_buttons+0x9c>)
 8001296:	210a      	movs	r1, #10
 8001298:	2064      	movs	r0, #100	@ 0x64
 800129a:	f004 fd9b 	bl	8005dd4 <LCD_Draw_Str>

    LCD_Draw_Rectangle(160, 0, 240, 30, COLOR_BLUE);
 800129e:	231f      	movs	r3, #31
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	231e      	movs	r3, #30
 80012a4:	22f0      	movs	r2, #240	@ 0xf0
 80012a6:	2100      	movs	r1, #0
 80012a8:	20a0      	movs	r0, #160	@ 0xa0
 80012aa:	f004 fde8 	bl	8005e7e <LCD_Draw_Rectangle>
    LCD_Draw_Str(180, 10, (uint8_t *)"Blue", COLOR_BLUE, 1);
 80012ae:	2301      	movs	r3, #1
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	231f      	movs	r3, #31
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <WriteApp_draw_buttons+0xa0>)
 80012b6:	210a      	movs	r1, #10
 80012b8:	20b4      	movs	r0, #180	@ 0xb4
 80012ba:	f004 fd8b 	bl	8005dd4 <LCD_Draw_Str>

    // 지우개 UI (우측 하단)
    LCD_Draw_Rectangle(180, 290, 239, 319, COLOR_BLACK);
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f240 133f 	movw	r3, #319	@ 0x13f
 80012c6:	22ef      	movs	r2, #239	@ 0xef
 80012c8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80012cc:	20b4      	movs	r0, #180	@ 0xb4
 80012ce:	f004 fdd6 	bl	8005e7e <LCD_Draw_Rectangle>
    LCD_Draw_Str(190, 300, (uint8_t *)"Clear", COLOR_BLACK, 1);
 80012d2:	2301      	movs	r3, #1
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <WriteApp_draw_buttons+0xa4>)
 80012da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80012de:	20be      	movs	r0, #190	@ 0xbe
 80012e0:	f004 fd78 	bl	8005dd4 <LCD_Draw_Str>
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08009b28 	.word	0x08009b28
 80012f0:	08009b30 	.word	0x08009b30
 80012f4:	08009b34 	.word	0x08009b34
 80012f8:	08009b3c 	.word	0x08009b3c

080012fc <WriteApp_init>:

void WriteApp_init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    LCD_Clear(COLOR_WHITE);
 8001300:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001304:	f004 fa26 	bl	8005754 <LCD_Clear>
    WriteApp_draw_buttons();
 8001308:	f7ff ffa4 	bl	8001254 <WriteApp_draw_buttons>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <WriteApp_process_touch>:

void WriteApp_process_touch(void) {
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af02      	add	r7, sp, #8
    XYP_point p;
    Touch_read(&p);
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fdfa 	bl	8005f14 <Touch_read>

    if (p.p > 50) {
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	2b32      	cmp	r3, #50	@ 0x32
 8001324:	d96c      	bls.n	8001400 <WriteApp_process_touch+0xf0>
        int x = map_touch_to_lcd_x(p.x);
 8001326:	883b      	ldrh	r3, [r7, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f87b 	bl	8001424 <map_touch_to_lcd_x>
 800132e:	60f8      	str	r0, [r7, #12]
        int y = map_touch_to_lcd_y(p.y);
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f89e 	bl	8001474 <map_touch_to_lcd_y>
 8001338:	60b8      	str	r0, [r7, #8]

        // 상단 버튼 처리
        if (y < 30) {
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b1d      	cmp	r3, #29
 800133e:	dc14      	bgt.n	800136a <WriteApp_process_touch+0x5a>
            if (x < 80) {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b4f      	cmp	r3, #79	@ 0x4f
 8001344:	dc03      	bgt.n	800134e <WriteApp_process_touch+0x3e>
                pen_color = PEN_BLACK;
 8001346:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <WriteApp_process_touch+0x108>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e009      	b.n	8001362 <WriteApp_process_touch+0x52>
            } else if (x < 160) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b9f      	cmp	r3, #159	@ 0x9f
 8001352:	dc03      	bgt.n	800135c <WriteApp_process_touch+0x4c>
                pen_color = PEN_RED;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <WriteApp_process_touch+0x108>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e002      	b.n	8001362 <WriteApp_process_touch+0x52>
            } else {
                pen_color = PEN_BLUE;
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <WriteApp_process_touch+0x108>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
            }
            HAL_Delay(200);
 8001362:	20c8      	movs	r0, #200	@ 0xc8
 8001364:	f000 fec4 	bl	80020f0 <HAL_Delay>
            return;
 8001368:	e052      	b.n	8001410 <WriteApp_process_touch+0x100>
        }

        // 지우개 버튼
        if (x > 180 && y > 290) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2bb4      	cmp	r3, #180	@ 0xb4
 800136e:	dd15      	ble.n	800139c <WriteApp_process_touch+0x8c>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8001376:	dd11      	ble.n	800139c <WriteApp_process_touch+0x8c>
            LCD_Clear(COLOR_WHITE);
 8001378:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800137c:	f004 f9ea 	bl	8005754 <LCD_Clear>
            WriteApp_draw_buttons();
 8001380:	f7ff ff68 	bl	8001254 <WriteApp_draw_buttons>
            last_x = -1;
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <WriteApp_process_touch+0x10c>)
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	601a      	str	r2, [r3, #0]
            last_y = -1;
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <WriteApp_process_touch+0x110>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	601a      	str	r2, [r3, #0]
            HAL_Delay(200);
 8001394:	20c8      	movs	r0, #200	@ 0xc8
 8001396:	f000 feab 	bl	80020f0 <HAL_Delay>
            return;
 800139a:	e039      	b.n	8001410 <WriteApp_process_touch+0x100>
        }

        // 팬 드로잉
        if (last_x >= 0 && last_y >= 0) {
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <WriteApp_process_touch+0x10c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db1a      	blt.n	80013da <WriteApp_process_touch+0xca>
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <WriteApp_process_touch+0x110>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db16      	blt.n	80013da <WriteApp_process_touch+0xca>
            LCD_Draw_Line(last_x, last_y, x, y, get_pen_color());
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <WriteApp_process_touch+0x10c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b21c      	sxth	r4, r3
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <WriteApp_process_touch+0x110>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b21d      	sxth	r5, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	b21e      	sxth	r6, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	fa0f f883 	sxth.w	r8, r3
 80013c2:	f7ff ff31 	bl	8001228 <get_pen_color>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4643      	mov	r3, r8
 80013ce:	4632      	mov	r2, r6
 80013d0:	4629      	mov	r1, r5
 80013d2:	4620      	mov	r0, r4
 80013d4:	f004 fa1e 	bl	8005814 <LCD_Draw_Line>
 80013d8:	e00b      	b.n	80013f2 <WriteApp_process_touch+0xe2>
        } else {
            LCD_Draw_Circle(x, y, 2, get_pen_color());
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	b29c      	uxth	r4, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	b29d      	uxth	r5, r3
 80013e2:	f7ff ff21 	bl	8001228 <get_pen_color>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2202      	movs	r2, #2
 80013ea:	4629      	mov	r1, r5
 80013ec:	4620      	mov	r0, r4
 80013ee:	f004 fbb7 	bl	8005b60 <LCD_Draw_Circle>
        }

        last_x = x;
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <WriteApp_process_touch+0x10c>)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6013      	str	r3, [r2, #0]
        last_y = y;
 80013f8:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <WriteApp_process_touch+0x110>)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e007      	b.n	8001410 <WriteApp_process_touch+0x100>
    } else {
        // 터치가 없을 땐 선 끊김
        last_x = -1;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <WriteApp_process_touch+0x10c>)
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	601a      	str	r2, [r3, #0]
        last_y = -1;
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <WriteApp_process_touch+0x110>)
 800140a:	f04f 32ff 	mov.w	r2, #4294967295
 800140e:	601a      	str	r2, [r3, #0]
    }
}
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001418:	200001fc 	.word	0x200001fc
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <map_touch_to_lcd_x>:
    {  0, 130, 60, 38, "1"}, { 60, 130, 60, 38, "2"}, {120, 130, 60, 38, "3"}, {180, 130, 60, 38, "-"},
    {  0, 170, 60, 38, "0"}, { 60, 170, 60, 38, "."}, {120, 170, 60, 38, "="}, {180, 170, 60, 38, "+"},
    {  0, 210, 60, 30, "C"}, { 60, 210, 60, 30, "<-"}, {120, 210, 60, 30, "("}, {180, 210, 60, 30, ")"}
};

int map_touch_to_lcd_x(uint16_t raw_x) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
    if (raw_x < TOUCH_X_MIN) raw_x = TOUCH_X_MIN;
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	2b63      	cmp	r3, #99	@ 0x63
 8001432:	d801      	bhi.n	8001438 <map_touch_to_lcd_x+0x14>
 8001434:	2364      	movs	r3, #100	@ 0x64
 8001436:	80fb      	strh	r3, [r7, #6]
    if (raw_x > TOUCH_X_MAX) raw_x = TOUCH_X_MAX;
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	f241 1230 	movw	r2, #4400	@ 0x1130
 800143e:	4293      	cmp	r3, r2
 8001440:	d902      	bls.n	8001448 <map_touch_to_lcd_x+0x24>
 8001442:	f241 1330 	movw	r3, #4400	@ 0x1130
 8001446:	80fb      	strh	r3, [r7, #6]
    return (raw_x - TOUCH_X_MIN) * (LCD_WIDTH - 1) / (TOUCH_X_MAX - TOUCH_X_MIN);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800144e:	4613      	mov	r3, r2
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <map_touch_to_lcd_x+0x4c>)
 800145a:	fb82 1203 	smull	r1, r2, r2, r3
 800145e:	12d2      	asrs	r2, r2, #11
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	1ad3      	subs	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	79ed6cd5 	.word	0x79ed6cd5

08001474 <map_touch_to_lcd_y>:

int map_touch_to_lcd_y(uint16_t raw_y) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
    if (raw_y < TOUCH_Y_MIN) raw_y = TOUCH_Y_MIN;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	2b63      	cmp	r3, #99	@ 0x63
 8001482:	d801      	bhi.n	8001488 <map_touch_to_lcd_y+0x14>
 8001484:	2364      	movs	r3, #100	@ 0x64
 8001486:	80fb      	strh	r3, [r7, #6]
    if (raw_y > TOUCH_Y_MAX) raw_y = TOUCH_Y_MAX;
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	f640 62d8 	movw	r2, #3800	@ 0xed8
 800148e:	4293      	cmp	r3, r2
 8001490:	d902      	bls.n	8001498 <map_touch_to_lcd_y+0x24>
 8001492:	f640 63d8 	movw	r3, #3800	@ 0xed8
 8001496:	80fb      	strh	r3, [r7, #6]
    return (raw_y - TOUCH_Y_MIN) * (LCD_HEIGHT - 1) / (TOUCH_Y_MAX - TOUCH_Y_MIN);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <map_touch_to_lcd_y+0x4c>)
 80014aa:	fb82 1203 	smull	r1, r2, r2, r3
 80014ae:	441a      	add	r2, r3
 80014b0:	12d2      	asrs	r2, r2, #11
 80014b2:	17db      	asrs	r3, r3, #31
 80014b4:	1ad3      	subs	r3, r2, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	8db30fc7 	.word	0x8db30fc7

080014c4 <HAL_UART_RxCpltCallback>:
static void MX_ADC3_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_UART_RxCpltCallback+0x24>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d102      	bne.n	80014dc <HAL_UART_RxCpltCallback+0x18>
    {
        uart_flag = 1;
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_UART_RxCpltCallback+0x28>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
    }
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40013800 	.word	0x40013800
 80014ec:	20000350 	.word	0x20000350

080014f0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* p, unsigned int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len,10);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	230a      	movs	r3, #10
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <_write+0x24>)
 8001506:	f003 f8c9 	bl	800469c <HAL_UART_Transmit>
	return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002c0 	.word	0x200002c0

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151c:	f000 fd86 	bl	800202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f838 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f000 f998 	bl	8001858 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001528:	f000 f96c 	bl	8001804 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800152c:	f000 f91c 	bl	8001768 <MX_TIM5_Init>
  MX_FSMC_Init();
 8001530:	f000 fa8a 	bl	8001a48 <MX_FSMC_Init>
  MX_ADC3_Init();
 8001534:	f000 f88c 	bl	8001650 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001538:	f000 f8c8 	bl	80016cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, uart, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	4910      	ldr	r1, [pc, #64]	@ (8001580 <main+0x68>)
 8001540:	4810      	ldr	r0, [pc, #64]	@ (8001584 <main+0x6c>)
 8001542:	f003 f936 	bl	80047b2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001546:	4810      	ldr	r0, [pc, #64]	@ (8001588 <main+0x70>)
 8001548:	f002 fb9c 	bl	8003c84 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 800154c:	480f      	ldr	r0, [pc, #60]	@ (800158c <main+0x74>)
 800154e:	f000 fedd 	bl	800230c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001552:	2108      	movs	r1, #8
 8001554:	480e      	ldr	r0, [pc, #56]	@ (8001590 <main+0x78>)
 8001556:	f002 fbf5 	bl	8003d44 <HAL_TIM_PWM_Start>

  LCD_init();
 800155a:	f003 ff95 	bl	8005488 <LCD_init>
 LCD_BL_on();
 800155e:	f003 ff87 	bl	8005470 <LCD_BL_on>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 900);
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <main+0x78>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800156a:	63da      	str	r2, [r3, #60]	@ 0x3c

  LCD_Clear(COLOR_WHITE);
 800156c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001570:	f004 f8f0 	bl	8005754 <LCD_Clear>
  //draw_buttons();

  WriteApp_init();
 8001574:	f7ff fec2 	bl	80012fc <WriteApp_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //calculator_process_touch();

	  WriteApp_process_touch();
 8001578:	f7ff feca 	bl	8001310 <WriteApp_process_touch>
 800157c:	e7fc      	b.n	8001578 <main+0x60>
 800157e:	bf00      	nop
 8001580:	20000354 	.word	0x20000354
 8001584:	200002c0 	.word	0x200002c0
 8001588:	20000278 	.word	0x20000278
 800158c:	20000200 	.word	0x20000200
 8001590:	20000230 	.word	0x20000230

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b096      	sub	sp, #88	@ 0x58
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800159e:	2228      	movs	r2, #40	@ 0x28
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fb2b 	bl	8006bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fde6 	bl	80031c0 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015fa:	f000 fa89 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f002 f852 	bl	80036c4 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001626:	f000 fa73 	bl	8001b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800162a:	2302      	movs	r3, #2
 800162c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800162e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001632:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f9d2 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001642:	f000 fa65 	bl	8001b10 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3758      	adds	r7, #88	@ 0x58
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <MX_ADC3_Init+0x74>)
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <MX_ADC3_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_ADC3_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <MX_ADC3_Init+0x74>)
 800166e:	2201      	movs	r2, #1
 8001670:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_ADC3_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_ADC3_Init+0x74>)
 800167a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800167e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <MX_ADC3_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_ADC3_Init+0x74>)
 8001688:	2201      	movs	r2, #1
 800168a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_ADC3_Init+0x74>)
 800168e:	f000 fd53 	bl	8002138 <HAL_ADC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 fa3a 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800169c:	2306      	movs	r3, #6
 800169e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_ADC3_Init+0x74>)
 80016ae:	f000 ffb5 	bl	800261c <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 80016b8:	f000 fa2a 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000200 	.word	0x20000200
 80016c8:	40013c00 	.word	0x40013c00

080016cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM3_Init+0x94>)
 80016ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <MX_TIM3_Init+0x98>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM3_Init+0x94>)
 80016f0:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80016f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_TIM3_Init+0x94>)
 80016fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_TIM3_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_TIM3_Init+0x94>)
 8001712:	f002 fa68 	bl	8003be6 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800171c:	f000 f9f8 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM3_Init+0x94>)
 800172e:	f002 fcb3 	bl	8004098 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001738:	f000 f9ea 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM3_Init+0x94>)
 800174a:	f002 fed9 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 f9dc 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000230 	.word	0x20000230
 8001764:	40000400 	.word	0x40000400

08001768 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_TIM5_Init+0x94>)
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <MX_TIM5_Init+0x98>)
 8001788:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_TIM5_Init+0x94>)
 800178c:	2247      	movs	r2, #71	@ 0x47
 800178e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_TIM5_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_TIM5_Init+0x94>)
 8001798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800179c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017aa:	4814      	ldr	r0, [pc, #80]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017ac:	f002 fa1b 	bl	8003be6 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 f9ab 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017c8:	f002 fc66 	bl	8004098 <HAL_TIM_ConfigClockSource>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 f99d 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017e4:	f002 fe8c 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80017ee:	f000 f98f 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000278 	.word	0x20000278
 8001800:	40000c00 	.word	0x40000c00

08001804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <MX_USART1_UART_Init+0x50>)
 800180c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_USART1_UART_Init+0x4c>)
 800183c:	f002 fede 	bl	80045fc <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001846:	f000 f963 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002c0 	.word	0x200002c0
 8001854:	40013800 	.word	0x40013800

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186c:	4b70      	ldr	r3, [pc, #448]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a6f      	ldr	r2, [pc, #444]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 8001872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b6d      	ldr	r3, [pc, #436]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b67      	ldr	r3, [pc, #412]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189c:	4b64      	ldr	r3, [pc, #400]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a63      	ldr	r2, [pc, #396]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b61      	ldr	r3, [pc, #388]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b58      	ldr	r3, [pc, #352]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a57      	ldr	r2, [pc, #348]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b55      	ldr	r3, [pc, #340]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e4:	4b52      	ldr	r3, [pc, #328]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a51      	ldr	r2, [pc, #324]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 8001902:	f043 0320 	orr.w	r3, r3, #32
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b49      	ldr	r3, [pc, #292]	@ (8001a30 <MX_GPIO_Init+0x1d8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2120      	movs	r1, #32
 8001918:	4846      	ldr	r0, [pc, #280]	@ (8001a34 <MX_GPIO_Init+0x1dc>)
 800191a:	f001 fc16 	bl	800314a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001924:	4844      	ldr	r0, [pc, #272]	@ (8001a38 <MX_GPIO_Init+0x1e0>)
 8001926:	f001 fc10 	bl	800314a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LED0_Pin, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2121      	movs	r1, #33	@ 0x21
 800192e:	4843      	ldr	r0, [pc, #268]	@ (8001a3c <MX_GPIO_Init+0x1e4>)
 8001930:	f001 fc0b 	bl	800314a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_SCK_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800193a:	4840      	ldr	r0, [pc, #256]	@ (8001a3c <MX_GPIO_Init+0x1e4>)
 800193c:	f001 fc05 	bl	800314a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 8001940:	231c      	movs	r3, #28
 8001942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4619      	mov	r1, r3
 8001952:	4838      	ldr	r0, [pc, #224]	@ (8001a34 <MX_GPIO_Init+0x1dc>)
 8001954:	f001 fa4e 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001958:	2320      	movs	r3, #32
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2302      	movs	r3, #2
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4619      	mov	r1, r3
 800196e:	4831      	ldr	r0, [pc, #196]	@ (8001a34 <MX_GPIO_Init+0x1dc>)
 8001970:	f001 fa40 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|T_CS_Pin;
 8001974:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2302      	movs	r3, #2
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	4619      	mov	r1, r3
 800198c:	482a      	ldr	r0, [pc, #168]	@ (8001a38 <MX_GPIO_Init+0x1e0>)
 800198e:	f001 fa31 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8001992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4619      	mov	r1, r3
 80019a6:	4824      	ldr	r0, [pc, #144]	@ (8001a38 <MX_GPIO_Init+0x1e0>)
 80019a8:	f001 fa24 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80019ac:	2301      	movs	r3, #1
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <MX_GPIO_Init+0x1e8>)
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	4619      	mov	r1, r3
 80019be:	4821      	ldr	r0, [pc, #132]	@ (8001a44 <MX_GPIO_Init+0x1ec>)
 80019c0:	f001 fa18 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	4619      	mov	r1, r3
 80019da:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <MX_GPIO_Init+0x1e4>)
 80019dc:	f001 fa0a 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_SCK_Pin LED0_Pin BEEP_Pin */
  GPIO_InitStruct.Pin = T_SCK_Pin|LED0_Pin|BEEP_Pin;
 80019e0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4619      	mov	r1, r3
 80019f8:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <MX_GPIO_Init+0x1e4>)
 80019fa:	f001 f9fb 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <MX_GPIO_Init+0x1e4>)
 8001a12:	f001 f9ef 	bl	8002df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2006      	movs	r0, #6
 8001a1c:	f001 f871 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a20:	2006      	movs	r0, #6
 8001a22:	f001 f88a 	bl	8002b3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	@ 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40011800 	.word	0x40011800
 8001a38:	40011c00 	.word	0x40011c00
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40010800 	.word	0x40010800

08001a48 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001a60:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a62:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001a66:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a6a:	4a27      	ldr	r2, [pc, #156]	@ (8001b08 <MX_FSMC_Init+0xc0>)
 8001a6c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a70:	2206      	movs	r2, #6
 8001a72:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a82:	2210      	movs	r2, #16
 8001a84:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001aa0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 26;
 8001ac6:	231a      	movs	r3, #26
 8001ac8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001aca:	230f      	movs	r3, #15
 8001acc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001ad2:	2311      	movs	r3, #17
 8001ad4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <MX_FSMC_Init+0xbc>)
 8001ae2:	f002 f833 	bl	8003b4c <HAL_SRAM_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001aec:	f000 f810 	bl	8001b10 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_FSMC_Init+0xc4>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <MX_FSMC_Init+0xc4>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000308 	.word	0x20000308
 8001b08:	a0000104 	.word	0xa0000104
 8001b0c:	40010000 	.word	0x40010000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_MspInit+0x60>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_MspInit+0x60>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000

08001b80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC3)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_ADC_MspInit+0x80>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d12a      	bne.n	8001bf6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <HAL_ADC_MspInit+0x84>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_Pin;
 8001bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4809      	ldr	r0, [pc, #36]	@ (8001c08 <HAL_ADC_MspInit+0x88>)
 8001be2:	f001 f907 	bl	8002df4 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	202f      	movs	r0, #47	@ 0x2f
 8001bec:	f000 ff89 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001bf0:	202f      	movs	r0, #47	@ 0x2f
 8001bf2:	f000 ffa2 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40013c00 	.word	0x40013c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40011c00 	.word	0x40011c00

08001c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <HAL_TIM_Base_MspInit+0x68>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10c      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c36:	e018      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c7c <HAL_TIM_Base_MspInit+0x70>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d113      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_TIM_Base_MspInit+0x6c>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2032      	movs	r0, #50	@ 0x32
 8001c60:	f000 ff4f 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f000 ff68 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40000c00 	.word	0x40000c00

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a20      	ldr	r2, [pc, #128]	@ (8001d1c <HAL_UART_MspInit+0x9c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d139      	bne.n	8001d14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_UART_MspInit+0xa0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480f      	ldr	r0, [pc, #60]	@ (8001d24 <HAL_UART_MspInit+0xa4>)
 8001ce6:	f001 f885 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4809      	ldr	r0, [pc, #36]	@ (8001d24 <HAL_UART_MspInit+0xa4>)
 8001d00:	f001 f878 	bl	8002df4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2025      	movs	r0, #37	@ 0x25
 8001d0a:	f000 fefa 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0e:	2025      	movs	r0, #37	@ 0x25
 8001d10:	f000 ff13 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_FSMC_MspInit+0x94>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d136      	bne.n	8001db2 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <HAL_FSMC_MspInit+0x94>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_FSMC_MspInit+0x98>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_FSMC_MspInit+0x98>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_FSMC_MspInit+0x98>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001d62:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	4813      	ldr	r0, [pc, #76]	@ (8001dc4 <HAL_FSMC_MspInit+0x9c>)
 8001d78:	f001 f83c 	bl	8002df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d7c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001d80:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <HAL_FSMC_MspInit+0xa0>)
 8001d92:	f001 f82f 	bl	8002df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001d96:	f24c 7333 	movw	r3, #50995	@ 0xc733
 8001d9a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4619      	mov	r1, r3
 8001daa:	4808      	ldr	r0, [pc, #32]	@ (8001dcc <HAL_FSMC_MspInit+0xa4>)
 8001dac:	f001 f822 	bl	8002df4 <HAL_GPIO_Init>
 8001db0:	e000      	b.n	8001db4 <HAL_FSMC_MspInit+0x8c>
    return;
 8001db2:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000360 	.word	0x20000360
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	40011800 	.word	0x40011800
 8001dcc:	40011400 	.word	0x40011400

08001dd0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001dd8:	f7ff ffa6 	bl	8001d28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 f940 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f001 f99b 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <USART1_IRQHandler+0x10>)
 8001e52:	f002 fcd3 	bl	80047fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002c0 	.word	0x200002c0

08001e60 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <ADC3_IRQHandler+0x10>)
 8001e66:	f000 fb07 	bl	8002478 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000200 	.word	0x20000200

08001e74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <TIM5_IRQHandler+0x10>)
 8001e7a:	f002 f81d 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000278 	.word	0x20000278

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_kill>:

int _kill(int pid, int sig)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea0:	f004 ff00 	bl	8006ca4 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_exit>:

void _exit (int status)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffe7 	bl	8001e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <_exit+0x12>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <_isatty>:

int _isatty(int file)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f004 fe84 	bl	8006ca4 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20010000 	.word	0x20010000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000364 	.word	0x20000364
 8001fd0:	200004b8 	.word	0x200004b8

08001fd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff fff8 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480b      	ldr	r0, [pc, #44]	@ (8002014 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fe6:	490c      	ldr	r1, [pc, #48]	@ (8002018 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ffc:	4c09      	ldr	r4, [pc, #36]	@ (8002024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f004 fe51 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200e:	f7ff fa83 	bl	8001518 <main>
  bx lr
 8002012:	4770      	bx	lr
  ldr r0, =_sdata
 8002014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002018:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800201c:	0800e810 	.word	0x0800e810
  ldr r2, =_sbss
 8002020:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002024:	200004b8 	.word	0x200004b8

08002028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC1_2_IRQHandler>
	...

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_Init+0x28>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_Init+0x28>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 fd55 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002042:	200f      	movs	r0, #15
 8002044:	f000 f808 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fd68 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_InitTick+0x54>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fd6d 	bl	8002b56 <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 fd35 	bl	8002b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <HAL_InitTick+0x5c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000010 	.word	0x20000010
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_IncTick+0x1c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_IncTick+0x20>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a03      	ldr	r2, [pc, #12]	@ (80020d8 <HAL_IncTick+0x20>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000010 	.word	0x20000010
 80020d8:	20000368 	.word	0x20000368

080020dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return uwTick;
 80020e0:	4b02      	ldr	r3, [pc, #8]	@ (80020ec <HAL_GetTick+0x10>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	20000368 	.word	0x20000368

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff fff0 	bl	80020dc <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffe0 	bl	80020dc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0ce      	b.n	80022f8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fd02 	bl	8001b80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fb9f 	bl	80028c0 <ADC_ConversionStop_Disable>
 8002182:	4603      	mov	r3, r0
 8002184:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 80a9 	bne.w	80022e6 <HAL_ADC_Init+0x1ae>
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80a5 	bne.w	80022e6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021a4:	f023 0302 	bic.w	r3, r3, #2
 80021a8:	f043 0202 	orr.w	r2, r3, #2
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4951      	ldr	r1, [pc, #324]	@ (8002300 <HAL_ADC_Init+0x1c8>)
 80021ba:	428b      	cmp	r3, r1
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_Init+0x9c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80021c6:	d002      	beq.n	80021ce <HAL_ADC_Init+0x96>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_Init+0xa0>
 80021ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80021d2:	e001      	b.n	80021d8 <HAL_ADC_Init+0xa0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7b1b      	ldrb	r3, [r3, #12]
 80021de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_Init+0xc2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_Init+0xc8>
 80021fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Init+0xca>
 8002200:	2300      	movs	r3, #0
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7d1b      	ldrb	r3, [r3, #20]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d119      	bne.n	8002244 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7b1b      	ldrb	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	3b01      	subs	r3, #1
 800221e:	035a      	lsls	r2, r3, #13
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00b      	b.n	8002244 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_ADC_Init+0x1cc>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002274:	d003      	beq.n	800227e <HAL_ADC_Init+0x146>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d104      	bne.n	8002288 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	3b01      	subs	r3, #1
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	430a      	orrs	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_ADC_Init+0x1d0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c2:	e018      	b.n	80022f6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	f023 0312 	bic.w	r3, r3, #18
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e4:	e007      	b.n	80022f6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013c00 	.word	0x40013c00
 8002304:	ffe1f7fd 	.word	0xffe1f7fd
 8002308:	ff1f0efe 	.word	0xff1f0efe

0800230c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Start_IT+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e0a0      	b.n	8002468 <HAL_ADC_Start_IT+0x15c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa6c 	bl	800280c <ADC_Enable>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 808f 	bne.w	800245e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a45      	ldr	r2, [pc, #276]	@ (8002470 <HAL_ADC_Start_IT+0x164>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d105      	bne.n	800236a <HAL_ADC_Start_IT+0x5e>
 800235e:	4b45      	ldr	r3, [pc, #276]	@ (8002474 <HAL_ADC_Start_IT+0x168>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d115      	bne.n	8002396 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d026      	beq.n	80023d2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800238c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002394:	e01d      	b.n	80023d2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a33      	ldr	r2, [pc, #204]	@ (8002474 <HAL_ADC_Start_IT+0x168>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_Start_IT+0xaa>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002470 <HAL_ADC_Start_IT+0x164>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10d      	bne.n	80023d2 <HAL_ADC_Start_IT+0xc6>
 80023b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_ADC_Start_IT+0x168>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	f023 0206 	bic.w	r2, r3, #6
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0202 	mvn.w	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0220 	orr.w	r2, r2, #32
 8002412:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800241e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002422:	d113      	bne.n	800244c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002428:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_ADC_Start_IT+0x164>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d105      	bne.n	800243a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_ADC_Start_IT+0x168>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e00c      	b.n	8002466 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e003      	b.n	8002466 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40012800 	.word	0x40012800
 8002474:	40012400 	.word	0x40012400

08002478 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03e      	beq.n	8002518 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d039      	beq.n	8002518 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024ca:	d11d      	bne.n	8002508 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d119      	bne.n	8002508 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0220 	bic.w	r2, r2, #32
 80024e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f874 	bl	80025f6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0212 	mvn.w	r2, #18
 8002516:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d04d      	beq.n	80025be <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d048      	beq.n	80025be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800254e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002552:	d012      	beq.n	800257a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800255e:	2b00      	cmp	r3, #0
 8002560:	d125      	bne.n	80025ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800256c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002570:	d11d      	bne.n	80025ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002588:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9c7 	bl	8002942 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 020c 	mvn.w	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d012      	beq.n	80025ee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f812 	bl	8002608 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0201 	mvn.w	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
	...

0800261c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x20>
 8002638:	2302      	movs	r3, #2
 800263a:	e0dc      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x1da>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b06      	cmp	r3, #6
 800264a:	d81c      	bhi.n	8002686 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b05      	subs	r3, #5
 800265e:	221f      	movs	r2, #31
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	4019      	ands	r1, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b05      	subs	r3, #5
 8002678:	fa00 f203 	lsl.w	r2, r0, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34
 8002684:	e03c      	b.n	8002700 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d81c      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b23      	subs	r3, #35	@ 0x23
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4019      	ands	r1, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b23      	subs	r3, #35	@ 0x23
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c6:	e01b      	b.n	8002700 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b41      	subs	r3, #65	@ 0x41
 80026da:	221f      	movs	r2, #31
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4019      	ands	r1, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	3b41      	subs	r3, #65	@ 0x41
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d91c      	bls.n	8002742 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	4019      	ands	r1, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6898      	ldr	r0, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	e019      	b.n	8002776 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6919      	ldr	r1, [r3, #16]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	2207      	movs	r2, #7
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	4019      	ands	r1, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6898      	ldr	r0, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b10      	cmp	r3, #16
 800277c:	d003      	beq.n	8002786 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002782:	2b11      	cmp	r3, #17
 8002784:	d132      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_ADC_ConfigChannel+0x1e4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d125      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d126      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d11a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_ADC_ConfigChannel+0x1e8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <HAL_ADC_ConfigChannel+0x1ec>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9a      	lsrs	r2, r3, #18
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f9      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1b2>
 80027da:	e007      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012400 	.word	0x40012400
 8002804:	20000008 	.word	0x20000008
 8002808:	431bde83 	.word	0x431bde83

0800280c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d040      	beq.n	80028ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800283a:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <ADC_Enable+0xac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <ADC_Enable+0xb0>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	0c9b      	lsrs	r3, r3, #18
 8002846:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002848:	e002      	b.n	8002850 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3b01      	subs	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002856:	f7ff fc41 	bl	80020dc <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800285c:	e01f      	b.n	800289e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800285e:	f7ff fc3d 	bl	80020dc <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d918      	bls.n	800289e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d011      	beq.n	800289e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e007      	b.n	80028ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d1d8      	bne.n	800285e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000008 	.word	0x20000008
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12e      	bne.n	8002938 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff fbf7 	bl	80020dc <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028f0:	e01b      	b.n	800292a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028f2:	f7ff fbf3 	bl	80020dc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d914      	bls.n	800292a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10d      	bne.n	800292a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e007      	b.n	800293a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d0dc      	beq.n	80028f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4906      	ldr	r1, [pc, #24]	@ (80029ec <__NVIC_EnableIRQ+0x34>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	@ (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	@ (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	@ 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	@ 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f7ff ff90 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff2d 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff42 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff90 	bl	8002a44 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5f 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff35 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d008      	beq.n	8002b98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e020      	b.n	8002bda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d005      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e0d6      	b.n	8002db6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d958      	bls.n	8002ce6 <HAL_DMA_Abort_IT+0x102>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a62      	ldr	r2, [pc, #392]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1e0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04f      	beq.n	8002cde <HAL_DMA_Abort_IT+0xfa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a61      	ldr	r2, [pc, #388]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1e4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d048      	beq.n	8002cda <HAL_DMA_Abort_IT+0xf6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8002dcc <HAL_DMA_Abort_IT+0x1e8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d040      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0xf0>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1ec>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d038      	beq.n	8002cce <HAL_DMA_Abort_IT+0xea>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1f0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d030      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0xe4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1f4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d028      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0xde>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d020      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xd8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a57      	ldr	r2, [pc, #348]	@ (8002ddc <HAL_DMA_Abort_IT+0x1f8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d019      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0xd4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a55      	ldr	r2, [pc, #340]	@ (8002de0 <HAL_DMA_Abort_IT+0x1fc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d012      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0xd0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a54      	ldr	r2, [pc, #336]	@ (8002de4 <HAL_DMA_Abort_IT+0x200>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00a      	beq.n	8002cae <HAL_DMA_Abort_IT+0xca>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	@ (8002de8 <HAL_DMA_Abort_IT+0x204>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d102      	bne.n	8002ca8 <HAL_DMA_Abort_IT+0xc4>
 8002ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca6:	e01b      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cac:	e018      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cb2:	e015      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	e013      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e011      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cc0:	e00e      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cc2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cc6:	e00b      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ccc:	e008      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd2:	e005      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cd8:	e002      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	e000      	b.n	8002ce0 <HAL_DMA_Abort_IT+0xfc>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4a42      	ldr	r2, [pc, #264]	@ (8002dec <HAL_DMA_Abort_IT+0x208>)
 8002ce2:	6053      	str	r3, [r2, #4]
 8002ce4:	e057      	b.n	8002d96 <HAL_DMA_Abort_IT+0x1b2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a36      	ldr	r2, [pc, #216]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1e0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04f      	beq.n	8002d90 <HAL_DMA_Abort_IT+0x1ac>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a34      	ldr	r2, [pc, #208]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d048      	beq.n	8002d8c <HAL_DMA_Abort_IT+0x1a8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a33      	ldr	r2, [pc, #204]	@ (8002dcc <HAL_DMA_Abort_IT+0x1e8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d040      	beq.n	8002d86 <HAL_DMA_Abort_IT+0x1a2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a31      	ldr	r2, [pc, #196]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1ec>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d038      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x19c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1f0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d030      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x196>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d028      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x190>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a26      	ldr	r2, [pc, #152]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d020      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x18a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	@ (8002ddc <HAL_DMA_Abort_IT+0x1f8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x186>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	@ (8002de0 <HAL_DMA_Abort_IT+0x1fc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x182>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_DMA_Abort_IT+0x200>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x17c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_DMA_Abort_IT+0x204>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_DMA_Abort_IT+0x176>
 8002d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d58:	e01b      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d5e:	e018      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d64:	e015      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d66:	2310      	movs	r3, #16
 8002d68:	e013      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e011      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d72:	e00e      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d78:	e00b      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d7e:	e008      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d84:	e005      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d8a:	e002      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_Abort_IT+0x1ae>
 8002d90:	2301      	movs	r3, #1
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <HAL_DMA_Abort_IT+0x20c>)
 8002d94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    } 
  }
  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40020080 	.word	0x40020080
 8002dc4:	40020008 	.word	0x40020008
 8002dc8:	4002001c 	.word	0x4002001c
 8002dcc:	40020030 	.word	0x40020030
 8002dd0:	40020044 	.word	0x40020044
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	4002006c 	.word	0x4002006c
 8002ddc:	40020408 	.word	0x40020408
 8002de0:	4002041c 	.word	0x4002041c
 8002de4:	40020430 	.word	0x40020430
 8002de8:	40020444 	.word	0x40020444
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020000 	.word	0x40020000

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b08b      	sub	sp, #44	@ 0x2c
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	e179      	b.n	80030fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f040 8168 	bne.w	80030f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a96      	ldr	r2, [pc, #600]	@ (8003084 <HAL_GPIO_Init+0x290>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d05e      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e30:	4a94      	ldr	r2, [pc, #592]	@ (8003084 <HAL_GPIO_Init+0x290>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d875      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e36:	4a94      	ldr	r2, [pc, #592]	@ (8003088 <HAL_GPIO_Init+0x294>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d058      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e3c:	4a92      	ldr	r2, [pc, #584]	@ (8003088 <HAL_GPIO_Init+0x294>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d86f      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e42:	4a92      	ldr	r2, [pc, #584]	@ (800308c <HAL_GPIO_Init+0x298>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d052      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e48:	4a90      	ldr	r2, [pc, #576]	@ (800308c <HAL_GPIO_Init+0x298>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d869      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e4e:	4a90      	ldr	r2, [pc, #576]	@ (8003090 <HAL_GPIO_Init+0x29c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04c      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e54:	4a8e      	ldr	r2, [pc, #568]	@ (8003090 <HAL_GPIO_Init+0x29c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d863      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e5a:	4a8e      	ldr	r2, [pc, #568]	@ (8003094 <HAL_GPIO_Init+0x2a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d046      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
 8002e60:	4a8c      	ldr	r2, [pc, #560]	@ (8003094 <HAL_GPIO_Init+0x2a0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d85d      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e66:	2b12      	cmp	r3, #18
 8002e68:	d82a      	bhi.n	8002ec0 <HAL_GPIO_Init+0xcc>
 8002e6a:	2b12      	cmp	r3, #18
 8002e6c:	d859      	bhi.n	8002f22 <HAL_GPIO_Init+0x12e>
 8002e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <HAL_GPIO_Init+0x80>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002eef 	.word	0x08002eef
 8002e78:	08002ec9 	.word	0x08002ec9
 8002e7c:	08002edb 	.word	0x08002edb
 8002e80:	08002f1d 	.word	0x08002f1d
 8002e84:	08002f23 	.word	0x08002f23
 8002e88:	08002f23 	.word	0x08002f23
 8002e8c:	08002f23 	.word	0x08002f23
 8002e90:	08002f23 	.word	0x08002f23
 8002e94:	08002f23 	.word	0x08002f23
 8002e98:	08002f23 	.word	0x08002f23
 8002e9c:	08002f23 	.word	0x08002f23
 8002ea0:	08002f23 	.word	0x08002f23
 8002ea4:	08002f23 	.word	0x08002f23
 8002ea8:	08002f23 	.word	0x08002f23
 8002eac:	08002f23 	.word	0x08002f23
 8002eb0:	08002f23 	.word	0x08002f23
 8002eb4:	08002f23 	.word	0x08002f23
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	4a75      	ldr	r2, [pc, #468]	@ (8003098 <HAL_GPIO_Init+0x2a4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ec6:	e02c      	b.n	8002f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	623b      	str	r3, [r7, #32]
          break;
 8002ece:	e029      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	623b      	str	r3, [r7, #32]
          break;
 8002ed8:	e024      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	623b      	str	r3, [r7, #32]
          break;
 8002ee2:	e01f      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	623b      	str	r3, [r7, #32]
          break;
 8002eec:	e01a      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e013      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f04:	2308      	movs	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	611a      	str	r2, [r3, #16]
          break;
 8002f0e:	e009      	b.n	8002f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f10:	2308      	movs	r3, #8
 8002f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	615a      	str	r2, [r3, #20]
          break;
 8002f1a:	e003      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x130>
          break;
 8002f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2bff      	cmp	r3, #255	@ 0xff
 8002f28:	d801      	bhi.n	8002f2e <HAL_GPIO_Init+0x13a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_Init+0x13e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d802      	bhi.n	8002f40 <HAL_GPIO_Init+0x14c>
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	e002      	b.n	8002f46 <HAL_GPIO_Init+0x152>
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	3b08      	subs	r3, #8
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	210f      	movs	r1, #15
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80c1 	beq.w	80030f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f74:	4b49      	ldr	r3, [pc, #292]	@ (800309c <HAL_GPIO_Init+0x2a8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4a48      	ldr	r2, [pc, #288]	@ (800309c <HAL_GPIO_Init+0x2a8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6193      	str	r3, [r2, #24]
 8002f80:	4b46      	ldr	r3, [pc, #280]	@ (800309c <HAL_GPIO_Init+0x2a8>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f8c:	4a44      	ldr	r2, [pc, #272]	@ (80030a0 <HAL_GPIO_Init+0x2ac>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80030a4 <HAL_GPIO_Init+0x2b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	@ (80030a8 <HAL_GPIO_Init+0x2b4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d019      	beq.n	8002ff4 <HAL_GPIO_Init+0x200>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <HAL_GPIO_Init+0x2b8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x1fc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a39      	ldr	r2, [pc, #228]	@ (80030b0 <HAL_GPIO_Init+0x2bc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1f8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a38      	ldr	r2, [pc, #224]	@ (80030b4 <HAL_GPIO_Init+0x2c0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1f4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a37      	ldr	r2, [pc, #220]	@ (80030b8 <HAL_GPIO_Init+0x2c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1f0>
 8002fe0:	2305      	movs	r3, #5
 8002fe2:	e00a      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002fe4:	2306      	movs	r3, #6
 8002fe6:	e008      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002fec:	2303      	movs	r3, #3
 8002fee:	e004      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e002      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_GPIO_Init+0x206>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4093      	lsls	r3, r2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800300a:	4925      	ldr	r1, [pc, #148]	@ (80030a0 <HAL_GPIO_Init+0x2ac>)
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003024:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	4924      	ldr	r1, [pc, #144]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003032:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	43db      	mvns	r3, r3
 800303a:	4920      	ldr	r1, [pc, #128]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 800303c:	4013      	ands	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	491a      	ldr	r1, [pc, #104]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	43db      	mvns	r3, r3
 8003062:	4916      	ldr	r1, [pc, #88]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 8003064:	4013      	ands	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d025      	beq.n	80030c0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4910      	ldr	r1, [pc, #64]	@ (80030bc <HAL_GPIO_Init+0x2c8>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
 8003080:	e025      	b.n	80030ce <HAL_GPIO_Init+0x2da>
 8003082:	bf00      	nop
 8003084:	10320000 	.word	0x10320000
 8003088:	10310000 	.word	0x10310000
 800308c:	10220000 	.word	0x10220000
 8003090:	10210000 	.word	0x10210000
 8003094:	10120000 	.word	0x10120000
 8003098:	10110000 	.word	0x10110000
 800309c:	40021000 	.word	0x40021000
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40010800 	.word	0x40010800
 80030a8:	40010c00 	.word	0x40010c00
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40011400 	.word	0x40011400
 80030b4:	40011800 	.word	0x40011800
 80030b8:	40011c00 	.word	0x40011c00
 80030bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030c0:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4913      	ldr	r1, [pc, #76]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030da:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4909      	ldr	r1, [pc, #36]	@ (8003118 <HAL_GPIO_Init+0x324>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	3301      	adds	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	f47f ae7e 	bne.w	8002e08 <HAL_GPIO_Init+0x14>
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	372c      	adds	r7, #44	@ 0x2c
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e001      	b.n	800313e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	807b      	strh	r3, [r7, #2]
 8003156:	4613      	mov	r3, r2
 8003158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800315a:	787b      	ldrb	r3, [r7, #1]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003166:	e003      	b.n	8003170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	041a      	lsls	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	611a      	str	r2, [r3, #16]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
	...

0800317c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003192:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f806 	bl	80031ac <HAL_GPIO_EXTI_Callback>
  }
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e272      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8087 	beq.w	80032ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e0:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d00c      	beq.n	8003206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ec:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d112      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
 80031f8:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d06c      	beq.n	80032ec <HAL_RCC_OscConfig+0x12c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d168      	bne.n	80032ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e24c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x76>
 8003228:	4b80      	ldr	r3, [pc, #512]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7f      	ldr	r2, [pc, #508]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e02e      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b7b      	ldr	r3, [pc, #492]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7a      	ldr	r2, [pc, #488]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b78      	ldr	r3, [pc, #480]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a77      	ldr	r2, [pc, #476]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0xbc>
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a71      	ldr	r2, [pc, #452]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 800327c:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b68      	ldr	r3, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a67      	ldr	r2, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe ff1e 	bl	80020dc <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe ff1a 	bl	80020dc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e200      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b5d      	ldr	r3, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe4>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe ff0a 	bl	80020dc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe ff06 	bl	80020dc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1ec      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x10c>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fa:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003306:	4b49      	ldr	r3, [pc, #292]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11c      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
 8003312:	4b46      	ldr	r3, [pc, #280]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1c0      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003336:	4b3d      	ldr	r3, [pc, #244]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4939      	ldr	r1, [pc, #228]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b36      	ldr	r3, [pc, #216]	@ (8003430 <HAL_RCC_OscConfig+0x270>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe febf 	bl	80020dc <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003362:	f7fe febb 	bl	80020dc <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1a1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4927      	ldr	r1, [pc, #156]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCC_OscConfig+0x270>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fe9e 	bl	80020dc <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe fe9a 	bl	80020dc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e180      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03a      	beq.n	8003444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fe7e 	bl	80020dc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fe7a 	bl	80020dc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e160      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f000 face 	bl	80039a4 <RCC_Delay>
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <HAL_RCC_OscConfig+0x274>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fe fe64 	bl	80020dc <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003416:	e00f      	b.n	8003438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fe fe60 	bl	80020dc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d908      	bls.n	8003438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e146      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	42420000 	.word	0x42420000
 8003434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b92      	ldr	r3, [pc, #584]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e9      	bne.n	8003418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a6 	beq.w	800359e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b8b      	ldr	r3, [pc, #556]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a87      	ldr	r2, [pc, #540]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b82      	ldr	r3, [pc, #520]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348a:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7e      	ldr	r2, [pc, #504]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fe fe21 	bl	80020dc <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fe fe1d 	bl	80020dc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b64      	cmp	r3, #100	@ 0x64
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e103      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_OscConfig+0x4c8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x312>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e02d      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x334>
 80034da:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a69      	ldr	r2, [pc, #420]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a66      	ldr	r2, [pc, #408]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x356>
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a60      	ldr	r2, [pc, #384]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a5d      	ldr	r2, [pc, #372]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 8003516:	4b5b      	ldr	r3, [pc, #364]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a5a      	ldr	r2, [pc, #360]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	4b58      	ldr	r3, [pc, #352]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a57      	ldr	r2, [pc, #348]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fe fdd1 	bl	80020dc <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe fdcd 	bl	80020dc <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0b1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b4b      	ldr	r3, [pc, #300]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x37e>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe fdbb 	bl	80020dc <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe fdb7 	bl	80020dc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e09b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b40      	ldr	r3, [pc, #256]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b3c      	ldr	r3, [pc, #240]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a3b      	ldr	r2, [pc, #236]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d061      	beq.n	8003678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d146      	bne.n	800364a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b33      	ldr	r3, [pc, #204]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fd8b 	bl	80020dc <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe fd87 	bl	80020dc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e06d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f2:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4921      	ldr	r1, [pc, #132]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a19      	ldr	r1, [r3, #32]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	430b      	orrs	r3, r1
 8003616:	491b      	ldr	r1, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fd5b 	bl	80020dc <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe fd57 	bl	80020dc <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x46a>
 8003648:	e035      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_OscConfig+0x4cc>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fd44 	bl	80020dc <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe fd40 	bl	80020dc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e026      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x498>
 8003676:	e01e      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e019      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
 800368c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_OscConfig+0x500>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0d0      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b67      	ldr	r3, [pc, #412]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4965      	ldr	r1, [pc, #404]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0b8      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003720:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a58      	ldr	r2, [pc, #352]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003738:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b50      	ldr	r3, [pc, #320]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	494d      	ldr	r1, [pc, #308]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d040      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d115      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07f      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	4b41      	ldr	r3, [pc, #260]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e073      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4936      	ldr	r1, [pc, #216]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fc92 	bl	80020dc <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe fc8e 	bl	80020dc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e053      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d210      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	4922      	ldr	r1, [pc, #136]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e032      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4916      	ldr	r1, [pc, #88]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383e:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	490e      	ldr	r1, [pc, #56]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003852:	f000 f821 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490a      	ldr	r1, [pc, #40]	@ (800388c <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a09      	ldr	r2, [pc, #36]	@ (8003890 <HAL_RCC_ClockConfig+0x1cc>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fbf0 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
 800388c:	08009b44 	.word	0x08009b44
 8003890:	20000008 	.word	0x20000008
 8003894:	2000000c 	.word	0x2000000c

08003898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x30>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x36>
 80038c6:	e027      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e027      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e6:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fa:	fb03 f202 	mul.w	r2, r3, r2
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e004      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	@ (800393c <HAL_RCC_GetSysClockFreq+0xa4>)
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	613b      	str	r3, [r7, #16]
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	693b      	ldr	r3, [r7, #16]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	08009b5c 	.word	0x08009b5c
 8003938:	08009b6c 	.word	0x08009b6c
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b02      	ldr	r3, [pc, #8]	@ (8003950 <HAL_RCC_GetHCLKFreq+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000008 	.word	0x20000008

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff2 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	08009b54 	.word	0x08009b54

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffde 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	08009b54 	.word	0x08009b54

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000008 	.word	0x20000008
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4f      	ldr	r3, [pc, #316]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b46      	ldr	r3, [pc, #280]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fe fb4c 	bl	80020dc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fe fb48 	bl	80020dc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e06d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a66:	4b36      	ldr	r3, [pc, #216]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d027      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2e      	ldr	r3, [pc, #184]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b2c      	ldr	r3, [pc, #176]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fb17 	bl	80020dc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fb13 	bl	80020dc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4917      	ldr	r1, [pc, #92]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	490b      	ldr	r1, [pc, #44]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4904      	ldr	r1, [pc, #16]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420440 	.word	0x42420440

08003b4c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_SRAM_Init+0x1c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b66:	d101      	bne.n	8003b6c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e038      	b.n	8003bde <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7fe f925 	bl	8001dd0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f001 fb9d 	bl	80052d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	f001 fbff 	bl	80053a4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6858      	ldr	r0, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	f001 fc24 	bl	8005400 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	f041 0101 	orr.w	r1, r1, #1
 8003bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e041      	b.n	8003c7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fd fffd 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fb2b 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e044      	b.n	8003d26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d010      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	e007      	b.n	8003d24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40013400 	.word	0x40013400
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00

08003d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x24>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e022      	b.n	8003dae <HAL_TIM_PWM_Start+0x6a>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d109      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x3e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e015      	b.n	8003dae <HAL_TIM_PWM_Start+0x6a>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x58>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e008      	b.n	8003dae <HAL_TIM_PWM_Start+0x6a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e072      	b.n	8003e9c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x82>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc4:	e013      	b.n	8003dee <HAL_TIM_PWM_Start+0xaa>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x92>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	e00b      	b.n	8003dee <HAL_TIM_PWM_Start+0xaa>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start+0xa2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de4:	e003      	b.n	8003dee <HAL_TIM_PWM_Start+0xaa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2201      	movs	r2, #1
 8003df4:	6839      	ldr	r1, [r7, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fb5e 	bl	80044b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <HAL_TIM_PWM_Start+0x160>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_PWM_Start+0xcc>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_TIM_PWM_Start+0x164>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_PWM_Start+0xd0>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_TIM_PWM_Start+0xd2>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <HAL_TIM_PWM_Start+0x160>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x122>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <HAL_TIM_PWM_Start+0x164>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x122>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x122>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <HAL_TIM_PWM_Start+0x168>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x122>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	@ (8003eb0 <HAL_TIM_PWM_Start+0x16c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x122>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <HAL_TIM_PWM_Start+0x170>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d010      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	e007      	b.n	8003e9a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d020      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0202 	mvn.w	r2, #2
 8003eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f9a1 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f994 	bl	8004238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9a3 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d020      	beq.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f97b 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f96e 	bl	8004238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f97d 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d020      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0208 	mvn.w	r2, #8
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f955 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f948 	bl	8004238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f957 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d020      	beq.n	8004000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f92f 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f922 	bl	8004238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f931 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0201 	mvn.w	r2, #1
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f901 	bl	8004226 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fad1 	bl	80045ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f901 	bl	800426e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0220 	mvn.w	r2, #32
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 faa4 	bl	80045d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0b4      	b.n	800421e <HAL_TIM_ConfigClockSource+0x186>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ec:	d03e      	beq.n	800416c <HAL_TIM_ConfigClockSource+0xd4>
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f2:	f200 8087 	bhi.w	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fa:	f000 8086 	beq.w	800420a <HAL_TIM_ConfigClockSource+0x172>
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004102:	d87f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b70      	cmp	r3, #112	@ 0x70
 8004106:	d01a      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xa6>
 8004108:	2b70      	cmp	r3, #112	@ 0x70
 800410a:	d87b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b60      	cmp	r3, #96	@ 0x60
 800410e:	d050      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004110:	2b60      	cmp	r3, #96	@ 0x60
 8004112:	d877      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b50      	cmp	r3, #80	@ 0x50
 8004116:	d03c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xfa>
 8004118:	2b50      	cmp	r3, #80	@ 0x50
 800411a:	d873      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b40      	cmp	r3, #64	@ 0x40
 800411e:	d058      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004120:	2b40      	cmp	r3, #64	@ 0x40
 8004122:	d86f      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b30      	cmp	r3, #48	@ 0x30
 8004126:	d064      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b30      	cmp	r3, #48	@ 0x30
 800412a:	d86b      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b20      	cmp	r3, #32
 800412e:	d060      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d867      	bhi.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d05c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004138:	2b10      	cmp	r3, #16
 800413a:	d05a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	e062      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	f000 f994 	bl	800447a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	609a      	str	r2, [r3, #8]
      break;
 800416a:	e04f      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800417c:	f000 f97d 	bl	800447a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e03c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419e:	461a      	mov	r2, r3
 80041a0:	f000 f8f4 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2150      	movs	r1, #80	@ 0x50
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f94b 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 80041b0:	e02c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 f912 	bl	80043e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2160      	movs	r1, #96	@ 0x60
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f93b 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e01c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f8d4 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2140      	movs	r1, #64	@ 0x40
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f92b 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 80041f0:	e00c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f000 f922 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8004202:	e003      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      break;
 8004208:	e000      	b.n	800420c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800420a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a39      	ldr	r2, [pc, #228]	@ (8004378 <TIM_Base_SetConfig+0xf8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a38      	ldr	r2, [pc, #224]	@ (800437c <TIM_Base_SetConfig+0xfc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a35      	ldr	r2, [pc, #212]	@ (8004380 <TIM_Base_SetConfig+0x100>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <TIM_Base_SetConfig+0x104>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a33      	ldr	r2, [pc, #204]	@ (8004388 <TIM_Base_SetConfig+0x108>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a28      	ldr	r2, [pc, #160]	@ (8004378 <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0x82>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a27      	ldr	r2, [pc, #156]	@ (800437c <TIM_Base_SetConfig+0xfc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0x82>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0x82>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a24      	ldr	r2, [pc, #144]	@ (8004380 <TIM_Base_SetConfig+0x100>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x82>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <TIM_Base_SetConfig+0x104>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x82>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a22      	ldr	r2, [pc, #136]	@ (8004388 <TIM_Base_SetConfig+0x108>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0f      	ldr	r2, [pc, #60]	@ (8004378 <TIM_Base_SetConfig+0xf8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0xc8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0e      	ldr	r2, [pc, #56]	@ (800437c <TIM_Base_SetConfig+0xfc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	611a      	str	r2, [r3, #16]
  }
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00

0800438c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 030a 	bic.w	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0210 	bic.w	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	031b      	lsls	r3, r3, #12
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	f043 0307 	orr.w	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800447a:	b480      	push	{r7}
 800447c:	b087      	sub	sp, #28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	021a      	lsls	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	431a      	orrs	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	609a      	str	r2, [r3, #8]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	43db      	mvns	r3, r3
 80044da:	401a      	ands	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e050      	b.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456e:	d00e      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10c      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00

080045d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e042      	b.n	8004694 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd fb2c 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	@ 0x24
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800463e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fdb7 	bl	80051b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d175      	bne.n	80047a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Transmit+0x2c>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e06e      	b.n	80047aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2221      	movs	r2, #33	@ 0x21
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fd fcff 	bl	80020dc <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Transmit+0x6c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004710:	e02e      	b.n	8004770 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	@ 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb1c 	bl	8004d5a <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e03a      	b.n	80047aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3302      	adds	r3, #2
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e007      	b.n	8004762 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3301      	adds	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1cb      	bne.n	8004712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	2140      	movs	r1, #64	@ 0x40
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fae8 	bl	8004d5a <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	4613      	mov	r3, r2
 80047be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d112      	bne.n	80047f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Receive_IT+0x26>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00b      	b.n	80047f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	461a      	mov	r2, r3
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fb0f 	bl	8004e0c <UART_Start_Receive_IT>
 80047ee:	4603      	mov	r3, r0
 80047f0:	e000      	b.n	80047f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800483a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_UART_IRQHandler+0x66>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fbec 	bl	8005038 <UART_Receive_IT>
      return;
 8004860:	e25b      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80de 	beq.w	8004a28 <HAL_UART_IRQHandler+0x22c>
 800486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80d1 	beq.w	8004a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_UART_IRQHandler+0xae>
 8004892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0xd2>
 80048b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xf6>
 80048da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_UART_IRQHandler+0x126>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800490a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 81f2 	beq.w	8004d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_UART_IRQHandler+0x14e>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb77 	bl	8005038 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_UART_IRQHandler+0x17a>
 800496e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa81 	bl	8004e7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d041      	beq.n	8004a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3314      	adds	r3, #20
 8004990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1d9      	bne.n	800498a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bdc <HAL_UART_IRQHandler+0x3e0>)
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe f8fa 	bl	8002be4 <HAL_DMA_Abort_IT>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00e      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f993 	bl	8004d32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00a      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f98f 	bl	8004d32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e006      	b.n	8004a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f98b 	bl	8004d32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a22:	e175      	b.n	8004d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	bf00      	nop
    return;
 8004a26:	e173      	b.n	8004d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 814f 	bne.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8148 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8141 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80b6 	beq.w	8004be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8145 	beq.w	8004d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a92:	429a      	cmp	r2, r3
 8004a94:	f080 813e 	bcs.w	8004d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	f000 8088 	beq.w	8004bbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ad8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ae4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1d9      	bne.n	8004aac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e1      	bne.n	8004af8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3314      	adds	r3, #20
 8004b54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e3      	bne.n	8004b34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ba0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e3      	bne.n	8004b7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd ffd9 	bl	8002b6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8b6 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bd8:	e09c      	b.n	8004d14 <HAL_UART_IRQHandler+0x518>
 8004bda:	bf00      	nop
 8004bdc:	08004f43 	.word	0x08004f43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 808e 	beq.w	8004d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8089 	beq.w	8004d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e3      	bne.n	8004c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ca8:	61fa      	str	r2, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e3      	bne.n	8004c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f83b 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cce:	e023      	b.n	8004d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x4f4>
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f93e 	bl	8004f6a <UART_Transmit_IT>
    return;
 8004cee:	e014      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00e      	beq.n	8004d1a <HAL_UART_IRQHandler+0x51e>
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f97d 	bl	8005008 <UART_EndTransmit_IT>
    return;
 8004d0e:	e004      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d18:	bf00      	nop
  }
}
 8004d1a:	37e8      	adds	r7, #232	@ 0xe8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	e03b      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d037      	beq.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fd f9b2 	bl	80020dc <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03a      	b.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d023      	beq.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b80      	cmp	r3, #128	@ 0x80
 8004da0:	d020      	beq.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d01d      	beq.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d116      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f856 	bl	8004e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e00f      	b.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d0b4      	beq.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2222      	movs	r2, #34	@ 0x22
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0220 	orr.w	r2, r2, #32
 8004e70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b095      	sub	sp, #84	@ 0x54
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d119      	bne.n	8004f2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0310 	bic.w	r3, r3, #16
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f16:	61ba      	str	r2, [r7, #24]
 8004f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f38:	bf00      	nop
 8004f3a:	3754      	adds	r7, #84	@ 0x54
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff fee8 	bl	8004d32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b21      	cmp	r3, #33	@ 0x21
 8004f7c:	d13e      	bne.n	8004ffc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f86:	d114      	bne.n	8004fb2 <UART_Transmit_IT+0x48>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d110      	bne.n	8004fb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	1c9a      	adds	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]
 8004fb0:	e008      	b.n	8004fc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6211      	str	r1, [r2, #32]
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fe6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ff6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fe79 	bl	8004d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	@ 0x30
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b22      	cmp	r3, #34	@ 0x22
 800504a:	f040 80ae 	bne.w	80051aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005056:	d117      	bne.n	8005088 <UART_Receive_IT+0x50>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d113      	bne.n	8005088 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	b29a      	uxth	r2, r3
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	1c9a      	adds	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	629a      	str	r2, [r3, #40]	@ 0x28
 8005086:	e026      	b.n	80050d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509a:	d007      	beq.n	80050ac <UART_Receive_IT+0x74>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <UART_Receive_IT+0x82>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e008      	b.n	80050cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29b      	uxth	r3, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4619      	mov	r1, r3
 80050e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d15d      	bne.n	80051a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0220 	bic.w	r2, r2, #32
 80050f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005108:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	2b01      	cmp	r3, #1
 800512e:	d135      	bne.n	800519c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	330c      	adds	r3, #12
 800513c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	613b      	str	r3, [r7, #16]
   return(result);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f023 0310 	bic.w	r3, r3, #16
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005156:	623a      	str	r2, [r7, #32]
 8005158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	61bb      	str	r3, [r7, #24]
   return(result);
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d10a      	bne.n	800518e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fdd5 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
 800519a:	e002      	b.n	80051a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fc f991 	bl	80014c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e002      	b.n	80051ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	@ 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051ee:	f023 030c 	bic.w	r3, r3, #12
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2c      	ldr	r2, [pc, #176]	@ (80052c8 <UART_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe fbae 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	e002      	b.n	800522a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005224:	f7fe fb96 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8005228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	4a22      	ldr	r2, [pc, #136]	@ (80052cc <UART_SetConfig+0x118>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	0119      	lsls	r1, r3, #4
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005260:	4b1a      	ldr	r3, [pc, #104]	@ (80052cc <UART_SetConfig+0x118>)
 8005262:	fba3 0302 	umull	r0, r3, r3, r2
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2064      	movs	r0, #100	@ 0x64
 800526a:	fb00 f303 	mul.w	r3, r0, r3
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	3332      	adds	r3, #50	@ 0x32
 8005274:	4a15      	ldr	r2, [pc, #84]	@ (80052cc <UART_SetConfig+0x118>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005280:	4419      	add	r1, r3
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fbb2 f2f3 	udiv	r2, r2, r3
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <UART_SetConfig+0x118>)
 800529a:	fba3 0302 	umull	r0, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2064      	movs	r0, #100	@ 0x64
 80052a2:	fb00 f303 	mul.w	r3, r0, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	3332      	adds	r3, #50	@ 0x32
 80052ac:	4a07      	ldr	r2, [pc, #28]	@ (80052cc <UART_SetConfig+0x118>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	f003 020f 	and.w	r2, r3, #15
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	440a      	add	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40013800 	.word	0x40013800
 80052cc:	51eb851f 	.word	0x51eb851f

080052d0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	f023 0101 	bic.w	r1, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d102      	bne.n	8005300 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80052fa:	2340      	movs	r3, #64	@ 0x40
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e001      	b.n	8005304 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005310:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005316:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800531c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005322:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005328:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800532e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005334:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800533a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005340:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <FSMC_NORSRAM_Init+0xd0>)
 8005360:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005368:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005370:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	43db      	mvns	r3, r3
 8005380:	ea02 0103 	and.w	r1, r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4319      	orrs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	0008fb7f 	.word	0x0008fb7f

080053a4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 80053ba:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 80053c2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 80053ca:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 80053d4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	3b02      	subs	r3, #2
 80053dc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80053de:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80053ea:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
	...

08005400 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005414:	d11d      	bne.n	8005452 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800541e:	4b13      	ldr	r3, [pc, #76]	@ (800546c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	6811      	ldr	r1, [r2, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	6852      	ldr	r2, [r2, #4]
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	4311      	orrs	r1, r2
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	6892      	ldr	r2, [r2, #8]
 8005432:	0212      	lsls	r2, r2, #8
 8005434:	4311      	orrs	r1, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	6992      	ldr	r2, [r2, #24]
 800543a:	4311      	orrs	r1, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	68d2      	ldr	r2, [r2, #12]
 8005440:	0412      	lsls	r2, r2, #16
 8005442:	430a      	orrs	r2, r1
 8005444:	ea43 0102 	orr.w	r1, r3, r2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005450:	e005      	b.n	800545e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800545a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	cff00000 	.word	0xcff00000

08005470 <LCD_BL_on>:
static const uint16_t print_margin = 2;
static uint16_t print_position_x = print_margin;
static uint16_t print_position_y = print_margin;

void LCD_BL_on()
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8005474:	2201      	movs	r2, #1
 8005476:	2101      	movs	r1, #1
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <LCD_BL_on+0x14>)
 800547a:	f7fd fe66 	bl	800314a <HAL_GPIO_WritePin>
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40010c00 	.word	0x40010c00

08005488 <LCD_init>:
	temp |= BANK1_A10_data; //0x41
	temp = 0;
}

void LCD_init()
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
//SOFTWARE RESET
BANK1_index = 0x01;
 800548c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005490:	2201      	movs	r2, #1
 8005492:	801a      	strh	r2, [r3, #0]
HAL_Delay(100);
 8005494:	2064      	movs	r0, #100	@ 0x64
 8005496:	f7fc fe2b 	bl	80020f0 <HAL_Delay>

//POWER CONTROL A
BANK1_index = 0xCB;
 800549a:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800549e:	22cb      	movs	r2, #203	@ 0xcb
 80054a0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x39;
 80054a2:	4b95      	ldr	r3, [pc, #596]	@ (80056f8 <LCD_init+0x270>)
 80054a4:	2239      	movs	r2, #57	@ 0x39
 80054a6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x2C;
 80054a8:	4b93      	ldr	r3, [pc, #588]	@ (80056f8 <LCD_init+0x270>)
 80054aa:	222c      	movs	r2, #44	@ 0x2c
 80054ac:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80054ae:	4b92      	ldr	r3, [pc, #584]	@ (80056f8 <LCD_init+0x270>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x34;
 80054b4:	4b90      	ldr	r3, [pc, #576]	@ (80056f8 <LCD_init+0x270>)
 80054b6:	2234      	movs	r2, #52	@ 0x34
 80054b8:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x02;
 80054ba:	4b8f      	ldr	r3, [pc, #572]	@ (80056f8 <LCD_init+0x270>)
 80054bc:	2202      	movs	r2, #2
 80054be:	801a      	strh	r2, [r3, #0]

//POWER CONTROL B
BANK1_index = 0xCF;
 80054c0:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80054c4:	22cf      	movs	r2, #207	@ 0xcf
 80054c6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80054c8:	4b8b      	ldr	r3, [pc, #556]	@ (80056f8 <LCD_init+0x270>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0xC1;
 80054ce:	4b8a      	ldr	r3, [pc, #552]	@ (80056f8 <LCD_init+0x270>)
 80054d0:	22c1      	movs	r2, #193	@ 0xc1
 80054d2:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0X30;
 80054d4:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <LCD_init+0x270>)
 80054d6:	2230      	movs	r2, #48	@ 0x30
 80054d8:	801a      	strh	r2, [r3, #0]

//DRIVER TIMING CONTROL A
BANK1_index = 0xE8;
 80054da:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80054de:	22e8      	movs	r2, #232	@ 0xe8
 80054e0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x85;
 80054e2:	4b85      	ldr	r3, [pc, #532]	@ (80056f8 <LCD_init+0x270>)
 80054e4:	2285      	movs	r2, #133	@ 0x85
 80054e6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x10;
 80054e8:	4b83      	ldr	r3, [pc, #524]	@ (80056f8 <LCD_init+0x270>)
 80054ea:	2210      	movs	r2, #16
 80054ec:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x7A;  //78
 80054ee:	4b82      	ldr	r3, [pc, #520]	@ (80056f8 <LCD_init+0x270>)
 80054f0:	227a      	movs	r2, #122	@ 0x7a
 80054f2:	801a      	strh	r2, [r3, #0]

//DRIVER TIMING CONTROL B
BANK1_index = 0xEA;
 80054f4:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80054f8:	22ea      	movs	r2, #234	@ 0xea
 80054fa:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80054fc:	4b7e      	ldr	r3, [pc, #504]	@ (80056f8 <LCD_init+0x270>)
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005502:	4b7d      	ldr	r3, [pc, #500]	@ (80056f8 <LCD_init+0x270>)
 8005504:	2200      	movs	r2, #0
 8005506:	801a      	strh	r2, [r3, #0]

//POWER ON SEQUENCE CONTROL
BANK1_index = 0xED;
 8005508:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800550c:	22ed      	movs	r2, #237	@ 0xed
 800550e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x64;
 8005510:	4b79      	ldr	r3, [pc, #484]	@ (80056f8 <LCD_init+0x270>)
 8005512:	2264      	movs	r2, #100	@ 0x64
 8005514:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x03;
 8005516:	4b78      	ldr	r3, [pc, #480]	@ (80056f8 <LCD_init+0x270>)
 8005518:	2203      	movs	r2, #3
 800551a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0X12;
 800551c:	4b76      	ldr	r3, [pc, #472]	@ (80056f8 <LCD_init+0x270>)
 800551e:	2212      	movs	r2, #18
 8005520:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0X81;
 8005522:	4b75      	ldr	r3, [pc, #468]	@ (80056f8 <LCD_init+0x270>)
 8005524:	2281      	movs	r2, #129	@ 0x81
 8005526:	801a      	strh	r2, [r3, #0]

//PUMP RATIO CONTROL
BANK1_index = 0xF7;
 8005528:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800552c:	22f7      	movs	r2, #247	@ 0xf7
 800552e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x20;
 8005530:	4b71      	ldr	r3, [pc, #452]	@ (80056f8 <LCD_init+0x270>)
 8005532:	2220      	movs	r2, #32
 8005534:	801a      	strh	r2, [r3, #0]

//POWER CONTROL,VRH[5:0]
BANK1_index = 0xC0;    //Power control
 8005536:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800553a:	22c0      	movs	r2, #192	@ 0xc0
 800553c:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x1B;   //VRH[5:0]
 800553e:	4b6e      	ldr	r3, [pc, #440]	@ (80056f8 <LCD_init+0x270>)
 8005540:	221b      	movs	r2, #27
 8005542:	801a      	strh	r2, [r3, #0]

//POWER CONTROL,SAP[2:0];BT[3:0]
BANK1_index = 0xC1;    //Power control
 8005544:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005548:	22c1      	movs	r2, #193	@ 0xc1
 800554a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x01;   //SAP[2:0];BT[3:0]
 800554c:	4b6a      	ldr	r3, [pc, #424]	@ (80056f8 <LCD_init+0x270>)
 800554e:	2201      	movs	r2, #1
 8005550:	801a      	strh	r2, [r3, #0]

//VCM CONTROL
BANK1_index = 0xC5;    //VCM control
 8005552:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005556:	22c5      	movs	r2, #197	@ 0xc5
 8005558:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x30; 	 //3F  3E
 800555a:	4b67      	ldr	r3, [pc, #412]	@ (80056f8 <LCD_init+0x270>)
 800555c:	2230      	movs	r2, #48	@ 0x30
 800555e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x30; 	 //3C	28
 8005560:	4b65      	ldr	r3, [pc, #404]	@ (80056f8 <LCD_init+0x270>)
 8005562:	2230      	movs	r2, #48	@ 0x30
 8005564:	801a      	strh	r2, [r3, #0]

//VCM CONTROL 2
BANK1_index = 0xC7;
 8005566:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800556a:	22c7      	movs	r2, #199	@ 0xc7
 800556c:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0XB7;
 800556e:	4b62      	ldr	r3, [pc, #392]	@ (80056f8 <LCD_init+0x270>)
 8005570:	22b7      	movs	r2, #183	@ 0xb7
 8005572:	801a      	strh	r2, [r3, #0]

//MEMORY ACCESS CONTROL
BANK1_index = 0x36;
 8005574:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005578:	2236      	movs	r2, #54	@ 0x36
 800557a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x48;
 800557c:	4b5e      	ldr	r3, [pc, #376]	@ (80056f8 <LCD_init+0x270>)
 800557e:	2248      	movs	r2, #72	@ 0x48
 8005580:	801a      	strh	r2, [r3, #0]

//PIXEL FORMAT
BANK1_index = 0x3A;
 8005582:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005586:	223a      	movs	r2, #58	@ 0x3a
 8005588:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x55;
 800558a:	4b5b      	ldr	r3, [pc, #364]	@ (80056f8 <LCD_init+0x270>)
 800558c:	2255      	movs	r2, #85	@ 0x55
 800558e:	801a      	strh	r2, [r3, #0]

//FRAME RATIO CONTROL, STANDARD RGB COLOR
BANK1_index = 0xB1;
 8005590:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005594:	22b1      	movs	r2, #177	@ 0xb1
 8005596:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005598:	4b57      	ldr	r3, [pc, #348]	@ (80056f8 <LCD_init+0x270>)
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x1A;
 800559e:	4b56      	ldr	r3, [pc, #344]	@ (80056f8 <LCD_init+0x270>)
 80055a0:	221a      	movs	r2, #26
 80055a2:	801a      	strh	r2, [r3, #0]

//DISPLAY FUNCTION CONTROL(<-->)
BANK1_index = 0xB6;
 80055a4:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80055a8:	22b6      	movs	r2, #182	@ 0xb6
 80055aa:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x08;
 80055ac:	4b52      	ldr	r3, [pc, #328]	@ (80056f8 <LCD_init+0x270>)
 80055ae:	2208      	movs	r2, #8
 80055b0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x82;
 80055b2:	4b51      	ldr	r3, [pc, #324]	@ (80056f8 <LCD_init+0x270>)
 80055b4:	2282      	movs	r2, #130	@ 0x82
 80055b6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x27;
 80055b8:	4b4f      	ldr	r3, [pc, #316]	@ (80056f8 <LCD_init+0x270>)
 80055ba:	2227      	movs	r2, #39	@ 0x27
 80055bc:	801a      	strh	r2, [r3, #0]

//3GAMMA FUNCTION DISABLE
BANK1_index = 0xF2;
 80055be:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80055c2:	22f2      	movs	r2, #242	@ 0xf2
 80055c4:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80055c6:	4b4c      	ldr	r3, [pc, #304]	@ (80056f8 <LCD_init+0x270>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	801a      	strh	r2, [r3, #0]

//GAMMA CURVE SELECTED
BANK1_index = 0x26;
 80055cc:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80055d0:	2226      	movs	r2, #38	@ 0x26
 80055d2:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x01;
 80055d4:	4b48      	ldr	r3, [pc, #288]	@ (80056f8 <LCD_init+0x270>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	801a      	strh	r2, [r3, #0]

//POSITIVE GAMMA CORRECTION
BANK1_index = 0xE0;    //Set Gamma
 80055da:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80055de:	22e0      	movs	r2, #224	@ 0xe0
 80055e0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0F;
 80055e2:	4b45      	ldr	r3, [pc, #276]	@ (80056f8 <LCD_init+0x270>)
 80055e4:	220f      	movs	r2, #15
 80055e6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x2A;
 80055e8:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <LCD_init+0x270>)
 80055ea:	222a      	movs	r2, #42	@ 0x2a
 80055ec:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x28;
 80055ee:	4b42      	ldr	r3, [pc, #264]	@ (80056f8 <LCD_init+0x270>)
 80055f0:	2228      	movs	r2, #40	@ 0x28
 80055f2:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x08;
 80055f4:	4b40      	ldr	r3, [pc, #256]	@ (80056f8 <LCD_init+0x270>)
 80055f6:	2208      	movs	r2, #8
 80055f8:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0E;
 80055fa:	4b3f      	ldr	r3, [pc, #252]	@ (80056f8 <LCD_init+0x270>)
 80055fc:	220e      	movs	r2, #14
 80055fe:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x08;
 8005600:	4b3d      	ldr	r3, [pc, #244]	@ (80056f8 <LCD_init+0x270>)
 8005602:	2208      	movs	r2, #8
 8005604:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x54;
 8005606:	4b3c      	ldr	r3, [pc, #240]	@ (80056f8 <LCD_init+0x270>)
 8005608:	2254      	movs	r2, #84	@ 0x54
 800560a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0XA9;
 800560c:	4b3a      	ldr	r3, [pc, #232]	@ (80056f8 <LCD_init+0x270>)
 800560e:	22a9      	movs	r2, #169	@ 0xa9
 8005610:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x43;
 8005612:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <LCD_init+0x270>)
 8005614:	2243      	movs	r2, #67	@ 0x43
 8005616:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0A;
 8005618:	4b37      	ldr	r3, [pc, #220]	@ (80056f8 <LCD_init+0x270>)
 800561a:	220a      	movs	r2, #10
 800561c:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0F;
 800561e:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <LCD_init+0x270>)
 8005620:	220f      	movs	r2, #15
 8005622:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005624:	4b34      	ldr	r3, [pc, #208]	@ (80056f8 <LCD_init+0x270>)
 8005626:	2200      	movs	r2, #0
 8005628:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 800562a:	4b33      	ldr	r3, [pc, #204]	@ (80056f8 <LCD_init+0x270>)
 800562c:	2200      	movs	r2, #0
 800562e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005630:	4b31      	ldr	r3, [pc, #196]	@ (80056f8 <LCD_init+0x270>)
 8005632:	2200      	movs	r2, #0
 8005634:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005636:	4b30      	ldr	r3, [pc, #192]	@ (80056f8 <LCD_init+0x270>)
 8005638:	2200      	movs	r2, #0
 800563a:	801a      	strh	r2, [r3, #0]

//NEGATIVE GAMMA CORRECTION
BANK1_index = 0XE1;    //Set Gamma
 800563c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005640:	22e1      	movs	r2, #225	@ 0xe1
 8005642:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 8005644:	4b2c      	ldr	r3, [pc, #176]	@ (80056f8 <LCD_init+0x270>)
 8005646:	2200      	movs	r2, #0
 8005648:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x15;
 800564a:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <LCD_init+0x270>)
 800564c:	2215      	movs	r2, #21
 800564e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x17;
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <LCD_init+0x270>)
 8005652:	2217      	movs	r2, #23
 8005654:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x07;
 8005656:	4b28      	ldr	r3, [pc, #160]	@ (80056f8 <LCD_init+0x270>)
 8005658:	2207      	movs	r2, #7
 800565a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x11;
 800565c:	4b26      	ldr	r3, [pc, #152]	@ (80056f8 <LCD_init+0x270>)
 800565e:	2211      	movs	r2, #17
 8005660:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x06;
 8005662:	4b25      	ldr	r3, [pc, #148]	@ (80056f8 <LCD_init+0x270>)
 8005664:	2206      	movs	r2, #6
 8005666:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x2B;
 8005668:	4b23      	ldr	r3, [pc, #140]	@ (80056f8 <LCD_init+0x270>)
 800566a:	222b      	movs	r2, #43	@ 0x2b
 800566c:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x56;
 800566e:	4b22      	ldr	r3, [pc, #136]	@ (80056f8 <LCD_init+0x270>)
 8005670:	2256      	movs	r2, #86	@ 0x56
 8005672:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x3C;
 8005674:	4b20      	ldr	r3, [pc, #128]	@ (80056f8 <LCD_init+0x270>)
 8005676:	223c      	movs	r2, #60	@ 0x3c
 8005678:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x05;
 800567a:	4b1f      	ldr	r3, [pc, #124]	@ (80056f8 <LCD_init+0x270>)
 800567c:	2205      	movs	r2, #5
 800567e:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x10;
 8005680:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <LCD_init+0x270>)
 8005682:	2210      	movs	r2, #16
 8005684:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0F;
 8005686:	4b1c      	ldr	r3, [pc, #112]	@ (80056f8 <LCD_init+0x270>)
 8005688:	220f      	movs	r2, #15
 800568a:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x3F;
 800568c:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <LCD_init+0x270>)
 800568e:	223f      	movs	r2, #63	@ 0x3f
 8005690:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x3F;
 8005692:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <LCD_init+0x270>)
 8005694:	223f      	movs	r2, #63	@ 0x3f
 8005696:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x0F;
 8005698:	4b17      	ldr	r3, [pc, #92]	@ (80056f8 <LCD_init+0x270>)
 800569a:	220f      	movs	r2, #15
 800569c:	801a      	strh	r2, [r3, #0]

//PAGE ADDRESS SET
BANK1_index = 0x2B;
 800569e:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80056a2:	222b      	movs	r2, #43	@ 0x2b
 80056a4:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80056a6:	4b14      	ldr	r3, [pc, #80]	@ (80056f8 <LCD_init+0x270>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80056ac:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <LCD_init+0x270>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x01;
 80056b2:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <LCD_init+0x270>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x3f;
 80056b8:	4b0f      	ldr	r3, [pc, #60]	@ (80056f8 <LCD_init+0x270>)
 80056ba:	223f      	movs	r2, #63	@ 0x3f
 80056bc:	801a      	strh	r2, [r3, #0]

//COLUMN ADDRESS SET
BANK1_index = 0x2A;
 80056be:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80056c2:	222a      	movs	r2, #42	@ 0x2a
 80056c4:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80056c6:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <LCD_init+0x270>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <LCD_init+0x270>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0x00;
 80056d2:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <LCD_init+0x270>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	801a      	strh	r2, [r3, #0]
BANK1_A10_data = 0xef;
 80056d8:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <LCD_init+0x270>)
 80056da:	22ef      	movs	r2, #239	@ 0xef
 80056dc:	801a      	strh	r2, [r3, #0]
//EXIT SLEEP
BANK1_index = 0x11;
 80056de:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80056e2:	2211      	movs	r2, #17
 80056e4:	801a      	strh	r2, [r3, #0]

HAL_Delay(120);
 80056e6:	2078      	movs	r0, #120	@ 0x78
 80056e8:	f7fc fd02 	bl	80020f0 <HAL_Delay>

//TURN ON DISPLAY
BANK1_index = 0x29;
 80056ec:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80056f0:	2229      	movs	r2, #41	@ 0x29
 80056f2:	801a      	strh	r2, [r3, #0]

} //End of LCD Initialization
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	6c000800 	.word	0x6c000800

080056fc <LCD_SetPos>:

void LCD_SetPos(uint16_t xPos, uint16_t yPos)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	460a      	mov	r2, r1
 8005706:	80fb      	strh	r3, [r7, #6]
 8005708:	4613      	mov	r3, r2
 800570a:	80bb      	strh	r3, [r7, #4]
	BANK1_index = LCD_xpos_cmd;
 800570c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 8005710:	222a      	movs	r2, #42	@ 0x2a
 8005712:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = xPos>>8;
 8005714:	4a0e      	ldr	r2, [pc, #56]	@ (8005750 <LCD_SetPos+0x54>)
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]
	BANK1_A10_data = xPos&0xff;
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <LCD_SetPos+0x54>)
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	b292      	uxth	r2, r2
 8005726:	801a      	strh	r2, [r3, #0]
	BANK1_index = LCD_ypos_cmd;
 8005728:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800572c:	222b      	movs	r2, #43	@ 0x2b
 800572e:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = yPos>>8;
 8005730:	4a07      	ldr	r2, [pc, #28]	@ (8005750 <LCD_SetPos+0x54>)
 8005732:	88bb      	ldrh	r3, [r7, #4]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
	BANK1_A10_data = yPos&0xff;
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <LCD_SetPos+0x54>)
 800573c:	88ba      	ldrh	r2, [r7, #4]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	6c000800 	.word	0x6c000800

08005754 <LCD_Clear>:


void LCD_Clear(uint16_t Color)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
	int i;
	LCD_SetPos(0,0);
 800575e:	2100      	movs	r1, #0
 8005760:	2000      	movs	r0, #0
 8005762:	f7ff ffcb 	bl	80056fc <LCD_SetPos>
	//LCD_buf[10][11] = Color;
	BANK1_index = LCD_wram_cmd;
 8005766:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800576a:	222c      	movs	r2, #44	@ 0x2c
 800576c:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < LCD_width * LCD_height ; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e005      	b.n	8005780 <LCD_Clear+0x2c>
	{
		BANK1_A10_data = Color;
 8005774:	4a09      	ldr	r2, [pc, #36]	@ (800579c <LCD_Clear+0x48>)
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < LCD_width * LCD_height ; i++)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8005786:	dbf5      	blt.n	8005774 <LCD_Clear+0x20>
	}

	print_position_x = print_margin;
 8005788:	2202      	movs	r2, #2
 800578a:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <LCD_Clear+0x4c>)
 800578c:	801a      	strh	r2, [r3, #0]
	print_position_y = print_margin;
 800578e:	2202      	movs	r2, #2
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <LCD_Clear+0x50>)
 8005792:	801a      	strh	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	6c000800 	.word	0x6c000800
 80057a0:	20000012 	.word	0x20000012
 80057a4:	20000014 	.word	0x20000014

080057a8 <LCD_Draw_Point>:

void LCD_Draw_Point(uint16_t x, uint16_t y, uint16_t Color)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	80fb      	strh	r3, [r7, #6]
 80057b2:	460b      	mov	r3, r1
 80057b4:	80bb      	strh	r3, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	807b      	strh	r3, [r7, #2]
	{
		x = 0;
	}
	else
	{
		x = x % LCD_width;
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <LCD_Draw_Point+0x60>)
 80057be:	fba3 1302 	umull	r1, r3, r3, r2
 80057c2:	09d9      	lsrs	r1, r3, #7
 80057c4:	460b      	mov	r3, r1
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a5b      	subs	r3, r3, r1
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	80fb      	strh	r3, [r7, #6]
	{
		y = 0;
	}
	else
	{
		y = y % LCD_height;
 80057d0:	88ba      	ldrh	r2, [r7, #4]
 80057d2:	4b0e      	ldr	r3, [pc, #56]	@ (800580c <LCD_Draw_Point+0x64>)
 80057d4:	fba3 1302 	umull	r1, r3, r3, r2
 80057d8:	0a19      	lsrs	r1, r3, #8
 80057da:	460b      	mov	r3, r1
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	80bb      	strh	r3, [r7, #4]
	}

	LCD_SetPos(x,y);
 80057e6:	88ba      	ldrh	r2, [r7, #4]
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ff85 	bl	80056fc <LCD_SetPos>
	BANK1_index = LCD_wram_cmd;
 80057f2:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 80057f6:	222c      	movs	r2, #44	@ 0x2c
 80057f8:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = Color;
 80057fa:	4a05      	ldr	r2, [pc, #20]	@ (8005810 <LCD_Draw_Point+0x68>)
 80057fc:	887b      	ldrh	r3, [r7, #2]
 80057fe:	8013      	strh	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	88888889 	.word	0x88888889
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	6c000800 	.word	0x6c000800

08005814 <LCD_Draw_Line>:

void LCD_Draw_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2,int16_t Color)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	4623      	mov	r3, r4
 8005824:	80fb      	strh	r3, [r7, #6]
 8005826:	4603      	mov	r3, r0
 8005828:	80bb      	strh	r3, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	807b      	strh	r3, [r7, #2]
 800582e:	4613      	mov	r3, r2
 8005830:	803b      	strh	r3, [r7, #0]
	float x, y;
	float slope;

	if(abs((int)x2 - x1) > abs((int)y2 - y1))
 8005832:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005840:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005844:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005848:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800584c:	1acb      	subs	r3, r1, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfb8      	it	lt
 8005852:	425b      	neglt	r3, r3
 8005854:	429a      	cmp	r2, r3
 8005856:	f340 80c0 	ble.w	80059da <LCD_Draw_Line+0x1c6>
	{
		slope = ((float)((int)y2 - y1)) / ((int)x2 - x1);
 800585a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800585e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	4618      	mov	r0, r3
 8005866:	f7fb faa5 	bl	8000db4 <__aeabi_i2f>
 800586a:	4604      	mov	r4, r0
 800586c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	4618      	mov	r0, r3
 8005878:	f7fb fa9c 	bl	8000db4 <__aeabi_i2f>
 800587c:	4603      	mov	r3, r0
 800587e:	4619      	mov	r1, r3
 8005880:	4620      	mov	r0, r4
 8005882:	f7fb fb9f 	bl	8000fc4 <__aeabi_fdiv>
 8005886:	4603      	mov	r3, r0
 8005888:	60fb      	str	r3, [r7, #12]
		if(x1 < x2)
 800588a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800588e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005892:	429a      	cmp	r2, r3
 8005894:	da50      	bge.n	8005938 <LCD_Draw_Line+0x124>
		{
			for(x = x1, y = y1 ; x <= x2 ; x += 1, y += slope)
 8005896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb fa8a 	bl	8000db4 <__aeabi_i2f>
 80058a0:	4603      	mov	r3, r0
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fb fa83 	bl	8000db4 <__aeabi_i2f>
 80058ae:	4603      	mov	r3, r0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e033      	b.n	800591c <LCD_Draw_Line+0x108>
				LCD_Draw_Point(round(x), round(y), Color);
 80058b4:	6978      	ldr	r0, [r7, #20]
 80058b6:	f7fa fe23 	bl	8000500 <__aeabi_f2d>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	f003 f957 	bl	8008b74 <round>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	f7fb f947 	bl	8000b60 <__aeabi_d2uiz>
 80058d2:	4603      	mov	r3, r0
 80058d4:	b29c      	uxth	r4, r3
 80058d6:	6938      	ldr	r0, [r7, #16]
 80058d8:	f7fa fe12 	bl	8000500 <__aeabi_f2d>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4610      	mov	r0, r2
 80058e2:	4619      	mov	r1, r3
 80058e4:	f003 f946 	bl	8008b74 <round>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4610      	mov	r0, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fb f936 	bl	8000b60 <__aeabi_d2uiz>
 80058f4:	4603      	mov	r3, r0
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058fa:	4619      	mov	r1, r3
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff ff53 	bl	80057a8 <LCD_Draw_Point>
			for(x = x1, y = y1 ; x <= x2 ; x += 1, y += slope)
 8005902:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7fb f9a0 	bl	8000c4c <__addsf3>
 800590c:	4603      	mov	r3, r0
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	6938      	ldr	r0, [r7, #16]
 8005914:	f7fb f99a 	bl	8000c4c <__addsf3>
 8005918:	4603      	mov	r3, r0
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005920:	4618      	mov	r0, r3
 8005922:	f7fb fa47 	bl	8000db4 <__aeabi_i2f>
 8005926:	4603      	mov	r3, r0
 8005928:	4619      	mov	r1, r3
 800592a:	6978      	ldr	r0, [r7, #20]
 800592c:	f7fb fc3e 	bl	80011ac <__aeabi_fcmple>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1be      	bne.n	80058b4 <LCD_Draw_Line+0xa0>
		{
			for(x = x2, y = y2 ; y <= y1 ; x += slope, y += 1)
				LCD_Draw_Point(round(x), round(y), Color);
		}
	}
}
 8005936:	e10f      	b.n	8005b58 <LCD_Draw_Line+0x344>
			for(x = x2, y = y2 ; x <= x1 ; x += 1, y += slope)
 8005938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fb fa39 	bl	8000db4 <__aeabi_i2f>
 8005942:	4603      	mov	r3, r0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	f9b7 3000 	ldrsh.w	r3, [r7]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fb fa32 	bl	8000db4 <__aeabi_i2f>
 8005950:	4603      	mov	r3, r0
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	e033      	b.n	80059be <LCD_Draw_Line+0x1aa>
				LCD_Draw_Point(round(x), round(y), Color);
 8005956:	6978      	ldr	r0, [r7, #20]
 8005958:	f7fa fdd2 	bl	8000500 <__aeabi_f2d>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f003 f906 	bl	8008b74 <round>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	f7fb f8f6 	bl	8000b60 <__aeabi_d2uiz>
 8005974:	4603      	mov	r3, r0
 8005976:	b29c      	uxth	r4, r3
 8005978:	6938      	ldr	r0, [r7, #16]
 800597a:	f7fa fdc1 	bl	8000500 <__aeabi_f2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	f003 f8f5 	bl	8008b74 <round>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	f7fb f8e5 	bl	8000b60 <__aeabi_d2uiz>
 8005996:	4603      	mov	r3, r0
 8005998:	b29b      	uxth	r3, r3
 800599a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800599c:	4619      	mov	r1, r3
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff ff02 	bl	80057a8 <LCD_Draw_Point>
			for(x = x2, y = y2 ; x <= x1 ; x += 1, y += slope)
 80059a4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059a8:	6978      	ldr	r0, [r7, #20]
 80059aa:	f7fb f94f 	bl	8000c4c <__addsf3>
 80059ae:	4603      	mov	r3, r0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	6938      	ldr	r0, [r7, #16]
 80059b6:	f7fb f949 	bl	8000c4c <__addsf3>
 80059ba:	4603      	mov	r3, r0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fb f9f6 	bl	8000db4 <__aeabi_i2f>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4619      	mov	r1, r3
 80059cc:	6978      	ldr	r0, [r7, #20]
 80059ce:	f7fb fbed 	bl	80011ac <__aeabi_fcmple>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1be      	bne.n	8005956 <LCD_Draw_Line+0x142>
}
 80059d8:	e0be      	b.n	8005b58 <LCD_Draw_Line+0x344>
		slope = ((float)((int)x2 - x1)) / ((int)y2 - y1);
 80059da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fb f9e5 	bl	8000db4 <__aeabi_i2f>
 80059ea:	4604      	mov	r4, r0
 80059ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fb f9dc 	bl	8000db4 <__aeabi_i2f>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4619      	mov	r1, r3
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7fb fadf 	bl	8000fc4 <__aeabi_fdiv>
 8005a06:	4603      	mov	r3, r0
 8005a08:	60fb      	str	r3, [r7, #12]
		if(y1 < y2)
 8005a0a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a0e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	da50      	bge.n	8005ab8 <LCD_Draw_Line+0x2a4>
			for(x = x1, y = y1 ; y <= y2 ; x += slope, y += 1)
 8005a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fb f9ca 	bl	8000db4 <__aeabi_i2f>
 8005a20:	4603      	mov	r3, r0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fb f9c3 	bl	8000db4 <__aeabi_i2f>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e033      	b.n	8005a9c <LCD_Draw_Line+0x288>
				LCD_Draw_Point(round(x), round(y), Color);
 8005a34:	6978      	ldr	r0, [r7, #20]
 8005a36:	f7fa fd63 	bl	8000500 <__aeabi_f2d>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	f003 f897 	bl	8008b74 <round>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7fb f887 	bl	8000b60 <__aeabi_d2uiz>
 8005a52:	4603      	mov	r3, r0
 8005a54:	b29c      	uxth	r4, r3
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fa fd52 	bl	8000500 <__aeabi_f2d>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	f003 f886 	bl	8008b74 <round>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7fb f876 	bl	8000b60 <__aeabi_d2uiz>
 8005a74:	4603      	mov	r3, r0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff fe93 	bl	80057a8 <LCD_Draw_Point>
			for(x = x1, y = y1 ; y <= y2 ; x += slope, y += 1)
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f7fb f8e1 	bl	8000c4c <__addsf3>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a92:	6938      	ldr	r0, [r7, #16]
 8005a94:	f7fb f8da 	bl	8000c4c <__addsf3>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fb f987 	bl	8000db4 <__aeabi_i2f>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6938      	ldr	r0, [r7, #16]
 8005aac:	f7fb fb7e 	bl	80011ac <__aeabi_fcmple>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1be      	bne.n	8005a34 <LCD_Draw_Line+0x220>
}
 8005ab6:	e04f      	b.n	8005b58 <LCD_Draw_Line+0x344>
			for(x = x2, y = y2 ; y <= y1 ; x += slope, y += 1)
 8005ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fb f979 	bl	8000db4 <__aeabi_i2f>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fb f972 	bl	8000db4 <__aeabi_i2f>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	e033      	b.n	8005b3e <LCD_Draw_Line+0x32a>
				LCD_Draw_Point(round(x), round(y), Color);
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	f7fa fd12 	bl	8000500 <__aeabi_f2d>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f003 f846 	bl	8008b74 <round>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f7fb f836 	bl	8000b60 <__aeabi_d2uiz>
 8005af4:	4603      	mov	r3, r0
 8005af6:	b29c      	uxth	r4, r3
 8005af8:	6938      	ldr	r0, [r7, #16]
 8005afa:	f7fa fd01 	bl	8000500 <__aeabi_f2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f003 f835 	bl	8008b74 <round>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	f7fb f825 	bl	8000b60 <__aeabi_d2uiz>
 8005b16:	4603      	mov	r3, r0
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff fe42 	bl	80057a8 <LCD_Draw_Point>
			for(x = x2, y = y2 ; y <= y1 ; x += slope, y += 1)
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7fb f890 	bl	8000c4c <__addsf3>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005b34:	6938      	ldr	r0, [r7, #16]
 8005b36:	f7fb f889 	bl	8000c4c <__addsf3>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb f936 	bl	8000db4 <__aeabi_i2f>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6938      	ldr	r0, [r7, #16]
 8005b4e:	f7fb fb2d 	bl	80011ac <__aeabi_fcmple>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1be      	bne.n	8005ad6 <LCD_Draw_Line+0x2c2>
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <LCD_Draw_Circle>:

void LCD_Draw_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Color)
{
 8005b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	4604      	mov	r4, r0
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4623      	mov	r3, r4
 8005b72:	80fb      	strh	r3, [r7, #6]
 8005b74:	4603      	mov	r3, r0
 8005b76:	80bb      	strh	r3, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	803b      	strh	r3, [r7, #0]
	float arc = 1.0;
 8005b80:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005b84:	613b      	str	r3, [r7, #16]
	float theta_step = arc / r;
 8005b86:	887b      	ldrh	r3, [r7, #2]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fb f913 	bl	8000db4 <__aeabi_i2f>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4619      	mov	r1, r3
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f7fb fa16 	bl	8000fc4 <__aeabi_fdiv>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]
	float theta;
	for(theta = 0 ; theta < 2 * 3.141592 ; theta += theta_step)
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e068      	b.n	8005c76 <LCD_Draw_Circle+0x116>
		LCD_Draw_Point(round(x + r * sin(theta)), round(y + r * cos(theta)), Color);
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fa fc98 	bl	80004dc <__aeabi_i2d>
 8005bac:	4604      	mov	r4, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fa fc92 	bl	80004dc <__aeabi_i2d>
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4689      	mov	r9, r1
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f7fa fc9f 	bl	8000500 <__aeabi_f2d>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f002 ff8d 	bl	8008ae8 <sin>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fceb 	bl	80005b0 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fb2f 	bl	8000244 <__adddf3>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f002 ffc1 	bl	8008b74 <round>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f7fa ffb1 	bl	8000b60 <__aeabi_d2uiz>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	b29e      	uxth	r6, r3
 8005c02:	88bb      	ldrh	r3, [r7, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fa fc69 	bl	80004dc <__aeabi_i2d>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fc63 	bl	80004dc <__aeabi_i2d>
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f7fa fc70 	bl	8000500 <__aeabi_f2d>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4610      	mov	r0, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	f002 ff18 	bl	8008a5c <cos>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa fcbc 	bl	80005b0 <__aeabi_dmul>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fb00 	bl	8000244 <__adddf3>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f002 ff92 	bl	8008b74 <round>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	f7fa ff82 	bl	8000b60 <__aeabi_d2uiz>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	883a      	ldrh	r2, [r7, #0]
 8005c62:	4619      	mov	r1, r3
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff fd9f 	bl	80057a8 <LCD_Draw_Point>
	for(theta = 0 ; theta < 2 * 3.141592 ; theta += theta_step)
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6978      	ldr	r0, [r7, #20]
 8005c6e:	f7fa ffed 	bl	8000c4c <__addsf3>
 8005c72:	4603      	mov	r3, r0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7fa fc42 	bl	8000500 <__aeabi_f2d>
 8005c7c:	a306      	add	r3, pc, #24	@ (adr r3, 8005c98 <LCD_Draw_Circle+0x138>)
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f7fa ff07 	bl	8000a94 <__aeabi_dcmplt>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d18b      	bne.n	8005ba4 <LCD_Draw_Circle+0x44>
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c98:	fc8b007a 	.word	0xfc8b007a
 8005c9c:	401921fa 	.word	0x401921fa

08005ca0 <LCD_Draw_Char>:
	}

}

void LCD_Draw_Char(uint16_t x, uint16_t y, uint8_t Char, uint16_t Color, uint16_t font_size)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b089      	sub	sp, #36	@ 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4623      	mov	r3, r4
 8005cb0:	80fb      	strh	r3, [r7, #6]
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80bb      	strh	r3, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	803b      	strh	r3, [r7, #0]
	uint8_t temp;
	int i,j,dx = 0, dy = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

	for(i = 0 ; i < asc_length[font_size] ; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e06a      	b.n	8005da2 <LCD_Draw_Char+0x102>
	{
		if(font_size == 0) 			temp = asc2_1206[Char - ' '][i];
 8005ccc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <LCD_Draw_Char+0x4e>
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f1a3 0220 	sub.w	r2, r3, #32
 8005cd8:	4938      	ldr	r1, [pc, #224]	@ (8005dbc <LCD_Draw_Char+0x11c>)
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	18ca      	adds	r2, r1, r3
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e029      	b.n	8005d42 <LCD_Draw_Char+0xa2>
		else if(font_size == 1) 	temp = asc2_1608[Char - ' '][i];
 8005cee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d109      	bne.n	8005d08 <LCD_Draw_Char+0x68>
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	3b20      	subs	r3, #32
 8005cf8:	4a31      	ldr	r2, [pc, #196]	@ (8005dc0 <LCD_Draw_Char+0x120>)
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	441a      	add	r2, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	4413      	add	r3, r2
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e01c      	b.n	8005d42 <LCD_Draw_Char+0xa2>
		else if(font_size == 2) 	temp = asc2_2412[Char - ' '][i];
 8005d08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d10d      	bne.n	8005d2a <LCD_Draw_Char+0x8a>
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f1a3 0220 	sub.w	r2, r3, #32
 8005d14:	492b      	ldr	r1, [pc, #172]	@ (8005dc4 <LCD_Draw_Char+0x124>)
 8005d16:	4613      	mov	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	18ca      	adds	r2, r1, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e00b      	b.n	8005d42 <LCD_Draw_Char+0xa2>
		else if(font_size == 3) 	temp = asc2_3216[Char - ' '][i];
 8005d2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d108      	bne.n	8005d42 <LCD_Draw_Char+0xa2>
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	3b20      	subs	r3, #32
 8005d34:	4a24      	ldr	r2, [pc, #144]	@ (8005dc8 <LCD_Draw_Char+0x128>)
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	441a      	add	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	77fb      	strb	r3, [r7, #31]

		for(j = 0 ; j < 8 ; j++, temp <<= 1)
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	e026      	b.n	8005d96 <LCD_Draw_Char+0xf6>
		{
			if((temp&0x80) == 0x80) LCD_Draw_Point(x + dx, y + dy, Color);
 8005d48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0d      	bge.n	8005d6c <LCD_Draw_Char+0xcc>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	4413      	add	r3, r2
 8005d58:	b298      	uxth	r0, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	88bb      	ldrh	r3, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	883a      	ldrh	r2, [r7, #0]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f7ff fd1e 	bl	80057a8 <LCD_Draw_Point>

			dy++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
			if(dy == asc_height[font_size])
 8005d72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d74:	4a15      	ldr	r2, [pc, #84]	@ (8005dcc <LCD_Draw_Char+0x12c>)
 8005d76:	5cd3      	ldrb	r3, [r2, r3]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d104      	bne.n	8005d8a <LCD_Draw_Char+0xea>
			{
				dy = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
				dx++;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
		for(j = 0 ; j < 8 ; j++, temp <<= 1)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	7ffb      	ldrb	r3, [r7, #31]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b07      	cmp	r3, #7
 8005d9a:	ddd5      	ble.n	8005d48 <LCD_Draw_Char+0xa8>
	for(i = 0 ; i < asc_length[font_size] ; i++)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005da4:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd0 <LCD_Draw_Char+0x130>)
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	461a      	mov	r2, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	db8d      	blt.n	8005ccc <LCD_Draw_Char+0x2c>
			}
		}
	}
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	3724      	adds	r7, #36	@ 0x24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	08009b78 	.word	0x08009b78
 8005dc0:	08009fec 	.word	0x08009fec
 8005dc4:	0800a5dc 	.word	0x0800a5dc
 8005dc8:	0800b338 	.word	0x0800b338
 8005dcc:	08009b74 	.word	0x08009b74
 8005dd0:	08009b70 	.word	0x08009b70

08005dd4 <LCD_Draw_Str>:

void LCD_Draw_Str(uint16_t x, uint16_t y, uint8_t * str, uint16_t Color, uint16_t font_size)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b089      	sub	sp, #36	@ 0x24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60ba      	str	r2, [r7, #8]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	81fb      	strh	r3, [r7, #14]
 8005de2:	460b      	mov	r3, r1
 8005de4:	81bb      	strh	r3, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
    int i;
    for(i = 0; i < 100; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	e03d      	b.n	8005e6c <LCD_Draw_Str+0x98>
    {
        if(str[i] == '\0') break;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d03b      	beq.n	8005e74 <LCD_Draw_Str+0xa0>

        // 문자 범위 체크 (ASCII printable 범위 내에서만 처리)
        if (str[i] < ' ' || str[i] > '~') {
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b1f      	cmp	r3, #31
 8005e06:	d92d      	bls.n	8005e64 <LCD_Draw_Str+0x90>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b7e      	cmp	r3, #126	@ 0x7e
 8005e12:	d827      	bhi.n	8005e64 <LCD_Draw_Str+0x90>
            continue;  // 유효하지 않은 문자는 그리지 않음
        }

        LCD_Draw_Char(x, y, str[i], Color, font_size);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	88fc      	ldrh	r4, [r7, #6]
 8005e1e:	89b9      	ldrh	r1, [r7, #12]
 8005e20:	89f8      	ldrh	r0, [r7, #14]
 8005e22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4623      	mov	r3, r4
 8005e28:	f7ff ff3a 	bl	8005ca0 <LCD_Draw_Char>

        if(font_size == 0)         x += 6;
 8005e2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <LCD_Draw_Str+0x66>
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	3306      	adds	r3, #6
 8005e36:	81fb      	strh	r3, [r7, #14]
 8005e38:	e015      	b.n	8005e66 <LCD_Draw_Str+0x92>
        else if(font_size == 1)    x += 8;
 8005e3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d103      	bne.n	8005e48 <LCD_Draw_Str+0x74>
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	3308      	adds	r3, #8
 8005e44:	81fb      	strh	r3, [r7, #14]
 8005e46:	e00e      	b.n	8005e66 <LCD_Draw_Str+0x92>
        else if(font_size == 2)    x += 12;
 8005e48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d103      	bne.n	8005e56 <LCD_Draw_Str+0x82>
 8005e4e:	89fb      	ldrh	r3, [r7, #14]
 8005e50:	330c      	adds	r3, #12
 8005e52:	81fb      	strh	r3, [r7, #14]
 8005e54:	e007      	b.n	8005e66 <LCD_Draw_Str+0x92>
        else if(font_size == 3)    x += 16;
 8005e56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d104      	bne.n	8005e66 <LCD_Draw_Str+0x92>
 8005e5c:	89fb      	ldrh	r3, [r7, #14]
 8005e5e:	3310      	adds	r3, #16
 8005e60:	81fb      	strh	r3, [r7, #14]
 8005e62:	e000      	b.n	8005e66 <LCD_Draw_Str+0x92>
            continue;  // 유효하지 않은 문자는 그리지 않음
 8005e64:	bf00      	nop
    for(i = 0; i < 100; i++)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b63      	cmp	r3, #99	@ 0x63
 8005e70:	ddbe      	ble.n	8005df0 <LCD_Draw_Str+0x1c>
    }
}
 8005e72:	e000      	b.n	8005e76 <LCD_Draw_Str+0xa2>
        if(str[i] == '\0') break;
 8005e74:	bf00      	nop
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}

08005e7e <LCD_Draw_Rectangle>:
	print_size = size;
	print_color = color;
}

void LCD_Draw_Rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t Color)
{
 8005e7e:	b590      	push	{r4, r7, lr}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	4604      	mov	r4, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	80fb      	strh	r3, [r7, #6]
 8005e90:	4603      	mov	r3, r0
 8005e92:	80bb      	strh	r3, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	803b      	strh	r3, [r7, #0]
    LCD_Draw_Line(x1, y1, x2, y1, Color); // top
 8005e9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ea0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ea4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ea8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005eac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	f7ff fcae 	bl	8005814 <LCD_Draw_Line>
    LCD_Draw_Line(x2, y1, x2, y2, Color); // right
 8005eb8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005ebc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ec0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ec4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005ec8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4623      	mov	r3, r4
 8005ed0:	f7ff fca0 	bl	8005814 <LCD_Draw_Line>
    LCD_Draw_Line(x2, y2, x1, y2, Color); // bottom
 8005ed4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005ed8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005edc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ee0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005ee4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4623      	mov	r3, r4
 8005eec:	f7ff fc92 	bl	8005814 <LCD_Draw_Line>
    LCD_Draw_Line(x1, y2, x1, y1, Color); // left
 8005ef0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ef4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005ef8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005efc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4623      	mov	r3, r4
 8005f08:	f7ff fc84 	bl	8005814 <LCD_Draw_Line>
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd90      	pop	{r4, r7, pc}

08005f14 <Touch_read>:
extern uint16_t xx,yy,pp,pz1,pz2;
extern float fx,fy,fp;
extern UART_HandleTypeDef huart1;


void Touch_read(XYP_point *xyp_point) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	static uint16_t pre_pressure;
	static int fi = 0;
	float ffx, ffy, ffp;

	// read raw data
	Touch_read_raw(&xyp_raw);
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f80d 	bl	8005f40 <Touch_read_raw>

	xyp_point->x = xyp_raw.x;
 8005f26:	893a      	ldrh	r2, [r7, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	801a      	strh	r2, [r3, #0]
	xyp_point->y = xyp_raw.y;
 8005f2c:	897a      	ldrh	r2, [r7, #10]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	805a      	strh	r2, [r3, #2]
	xyp_point->p = xyp_raw.p;
 8005f32:	89ba      	ldrh	r2, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	809a      	strh	r2, [r3, #4]

}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <Touch_read_raw>:

uint16_t t1,t2,t3,t4;

void Touch_read_raw(XYP_point *xyp_raw) {
 8005f40:	b5b0      	push	{r4, r5, r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

	uint16_t z1, z2, z3, xp, yp, p, din;

	Touch_spi(TOUCH_CMD_RDZ1, &z1);
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	20b1      	movs	r0, #177	@ 0xb1
 8005f50:	f000 f860 	bl	8006014 <Touch_spi>
	Touch_spi(TOUCH_CMD_RDX, &xp);
 8005f54:	f107 0310 	add.w	r3, r7, #16
 8005f58:	4619      	mov	r1, r3
 8005f5a:	20d1      	movs	r0, #209	@ 0xd1
 8005f5c:	f000 f85a 	bl	8006014 <Touch_spi>
	Touch_spi(TOUCH_CMD_RDZ2, &z2);
 8005f60:	f107 0312 	add.w	r3, r7, #18
 8005f64:	4619      	mov	r1, r3
 8005f66:	20c1      	movs	r0, #193	@ 0xc1
 8005f68:	f000 f854 	bl	8006014 <Touch_spi>
	Touch_spi(TOUCH_CMD_RDY, &yp);
 8005f6c:	f107 030e 	add.w	r3, r7, #14
 8005f70:	4619      	mov	r1, r3
 8005f72:	2091      	movs	r0, #145	@ 0x91
 8005f74:	f000 f84e 	bl	8006014 <Touch_spi>
	Touch_spi(0x00, &din);
 8005f78:	f107 030c 	add.w	r3, r7, #12
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f000 f848 	bl	8006014 <Touch_spi>

	p = (float) (4095 + z1 - z2 - xp/3.5 + yp/3.5);
 8005f84:	8abb      	ldrh	r3, [r7, #20]
 8005f86:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005f8a:	8a7a      	ldrh	r2, [r7, #18]
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fa faa4 	bl	80004dc <__aeabi_i2d>
 8005f94:	4604      	mov	r4, r0
 8005f96:	460d      	mov	r5, r1
 8005f98:	8a3b      	ldrh	r3, [r7, #16]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa fa9e 	bl	80004dc <__aeabi_i2d>
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8006010 <Touch_read_raw+0xd0>)
 8005fa6:	f7fa fc2d 	bl	8000804 <__aeabi_ddiv>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4620      	mov	r0, r4
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa f945 	bl	8000240 <__aeabi_dsub>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fa fa8b 	bl	80004dc <__aeabi_i2d>
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	4b11      	ldr	r3, [pc, #68]	@ (8006010 <Touch_read_raw+0xd0>)
 8005fcc:	f7fa fc1a 	bl	8000804 <__aeabi_ddiv>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa f934 	bl	8000244 <__adddf3>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f7fa fddc 	bl	8000ba0 <__aeabi_d2f>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fb f8fc 	bl	80011e8 <__aeabi_f2uiz>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	82fb      	strh	r3, [r7, #22]

	xyp_raw->x = xp;
 8005ff4:	8a3a      	ldrh	r2, [r7, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	801a      	strh	r2, [r3, #0]
	xyp_raw->y = yp;
 8005ffa:	89fa      	ldrh	r2, [r7, #14]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	805a      	strh	r2, [r3, #2]
	xyp_raw->p = p;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8afa      	ldrh	r2, [r7, #22]
 8006004:	809a      	strh	r2, [r3, #4]

}
 8006006:	bf00      	nop
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bdb0      	pop	{r4, r5, r7, pc}
 800600e:	bf00      	nop
 8006010:	400c0000 	.word	0x400c0000

08006014 <Touch_spi>:



void Touch_spi(uint8_t dout, uint16_t* din)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
	int i;

	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET); // Active CS
 8006020:	2200      	movs	r2, #0
 8006022:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006026:	483b      	ldr	r0, [pc, #236]	@ (8006114 <Touch_spi+0x100>)
 8006028:	f7fd f88f 	bl	800314a <HAL_GPIO_WritePin>
	Touch_delay();
 800602c:	f000 f876 	bl	800611c <Touch_delay>

	for(i = 7 ; i >= 0 ; i--) // Write Command
 8006030:	2307      	movs	r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e01e      	b.n	8006074 <Touch_spi+0x60>
	{

		HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, (dout >> i) & 0x01);
 8006036:	79fa      	ldrb	r2, [r7, #7]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	fa42 f303 	asr.w	r3, r2, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800604c:	4831      	ldr	r0, [pc, #196]	@ (8006114 <Touch_spi+0x100>)
 800604e:	f7fd f87c 	bl	800314a <HAL_GPIO_WritePin>

		Touch_delay();
 8006052:	f000 f863 	bl	800611c <Touch_delay>

		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_SET); // DCLK High
 8006056:	2201      	movs	r2, #1
 8006058:	2102      	movs	r1, #2
 800605a:	482f      	ldr	r0, [pc, #188]	@ (8006118 <Touch_spi+0x104>)
 800605c:	f7fd f875 	bl	800314a <HAL_GPIO_WritePin>

		Touch_delay();
 8006060:	f000 f85c 	bl	800611c <Touch_delay>

		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_RESET); // DCLK Low
 8006064:	2200      	movs	r2, #0
 8006066:	2102      	movs	r1, #2
 8006068:	482b      	ldr	r0, [pc, #172]	@ (8006118 <Touch_spi+0x104>)
 800606a:	f7fd f86e 	bl	800314a <HAL_GPIO_WritePin>
	for(i = 7 ; i >= 0 ; i--) // Write Command
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3b01      	subs	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dadd      	bge.n	8006036 <Touch_spi+0x22>
	}
		Touch_delay();
 800607a:	f000 f84f 	bl	800611c <Touch_delay>
		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_SET); // DCLK High
 800607e:	2201      	movs	r2, #1
 8006080:	2102      	movs	r1, #2
 8006082:	4825      	ldr	r0, [pc, #148]	@ (8006118 <Touch_spi+0x104>)
 8006084:	f7fd f861 	bl	800314a <HAL_GPIO_WritePin>

		Touch_delay();
 8006088:	f000 f848 	bl	800611c <Touch_delay>
		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_RESET); // DCLK Low
 800608c:	2200      	movs	r2, #0
 800608e:	2102      	movs	r1, #2
 8006090:	4821      	ldr	r0, [pc, #132]	@ (8006118 <Touch_spi+0x104>)
 8006092:	f7fd f85a 	bl	800314a <HAL_GPIO_WritePin>

		*din=0;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2200      	movs	r2, #0
 800609a:	801a      	strh	r2, [r3, #0]
	for (i=14; i >=0; i--) //Read Data
 800609c:	230e      	movs	r3, #14
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e020      	b.n	80060e4 <Touch_spi+0xd0>
 	{
 		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_SET); // DCLK High
 80060a2:	2201      	movs	r2, #1
 80060a4:	2102      	movs	r1, #2
 80060a6:	481c      	ldr	r0, [pc, #112]	@ (8006118 <Touch_spi+0x104>)
 80060a8:	f7fd f84f 	bl	800314a <HAL_GPIO_WritePin>
 		*din <<= 1;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	801a      	strh	r2, [r3, #0]
 		*din |= HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin);
 80060b8:	2104      	movs	r1, #4
 80060ba:	4817      	ldr	r0, [pc, #92]	@ (8006118 <Touch_spi+0x104>)
 80060bc:	f7fd f82e 	bl	800311c <HAL_GPIO_ReadPin>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	801a      	strh	r2, [r3, #0]

 		Touch_delay();
 80060d0:	f000 f824 	bl	800611c <Touch_delay>
 		HAL_GPIO_WritePin(T_SCK_GPIO_Port, T_SCK_Pin, GPIO_PIN_RESET); // DCLK Low
 80060d4:	2200      	movs	r2, #0
 80060d6:	2102      	movs	r1, #2
 80060d8:	480f      	ldr	r0, [pc, #60]	@ (8006118 <Touch_spi+0x104>)
 80060da:	f7fd f836 	bl	800314a <HAL_GPIO_WritePin>
	for (i=14; i >=0; i--) //Read Data
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dadb      	bge.n	80060a2 <Touch_spi+0x8e>
 	}
	*din=(*din >>3) & 0x0fff;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	08db      	lsrs	r3, r3, #3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	801a      	strh	r2, [r3, #0]

	Touch_delay();
 80060fc:	f000 f80e 	bl	800611c <Touch_delay>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET); // Disable CS
 8006100:	2201      	movs	r2, #1
 8006102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006106:	4803      	ldr	r0, [pc, #12]	@ (8006114 <Touch_spi+0x100>)
 8006108:	f7fd f81f 	bl	800314a <HAL_GPIO_WritePin>
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40011c00 	.word	0x40011c00
 8006118:	40010c00 	.word	0x40010c00

0800611c <Touch_delay>:




void Touch_delay()
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
	int i;
	for(i = 0 ; i < 2 ; i++);
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e002      	b.n	800612e <Touch_delay+0x12>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3301      	adds	r3, #1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	ddf9      	ble.n	8006128 <Touch_delay+0xc>
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <__cvt>:
 8006140:	2b00      	cmp	r3, #0
 8006142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006146:	461d      	mov	r5, r3
 8006148:	bfbb      	ittet	lt
 800614a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800614e:	461d      	movlt	r5, r3
 8006150:	2300      	movge	r3, #0
 8006152:	232d      	movlt	r3, #45	@ 0x2d
 8006154:	b088      	sub	sp, #32
 8006156:	4614      	mov	r4, r2
 8006158:	bfb8      	it	lt
 800615a:	4614      	movlt	r4, r2
 800615c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800615e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006160:	7013      	strb	r3, [r2, #0]
 8006162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006164:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006168:	f023 0820 	bic.w	r8, r3, #32
 800616c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006170:	d005      	beq.n	800617e <__cvt+0x3e>
 8006172:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006176:	d100      	bne.n	800617a <__cvt+0x3a>
 8006178:	3601      	adds	r6, #1
 800617a:	2302      	movs	r3, #2
 800617c:	e000      	b.n	8006180 <__cvt+0x40>
 800617e:	2303      	movs	r3, #3
 8006180:	aa07      	add	r2, sp, #28
 8006182:	9204      	str	r2, [sp, #16]
 8006184:	aa06      	add	r2, sp, #24
 8006186:	e9cd a202 	strd	sl, r2, [sp, #8]
 800618a:	e9cd 3600 	strd	r3, r6, [sp]
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	f000 fe59 	bl	8006e48 <_dtoa_r>
 8006196:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800619a:	4607      	mov	r7, r0
 800619c:	d119      	bne.n	80061d2 <__cvt+0x92>
 800619e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d50e      	bpl.n	80061c2 <__cvt+0x82>
 80061a4:	eb00 0906 	add.w	r9, r0, r6
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa fc66 	bl	8000a80 <__aeabi_dcmpeq>
 80061b4:	b108      	cbz	r0, 80061ba <__cvt+0x7a>
 80061b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80061ba:	2230      	movs	r2, #48	@ 0x30
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	454b      	cmp	r3, r9
 80061c0:	d31e      	bcc.n	8006200 <__cvt+0xc0>
 80061c2:	4638      	mov	r0, r7
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061c8:	1bdb      	subs	r3, r3, r7
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	b008      	add	sp, #32
 80061ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061d6:	eb00 0906 	add.w	r9, r0, r6
 80061da:	d1e5      	bne.n	80061a8 <__cvt+0x68>
 80061dc:	7803      	ldrb	r3, [r0, #0]
 80061de:	2b30      	cmp	r3, #48	@ 0x30
 80061e0:	d10a      	bne.n	80061f8 <__cvt+0xb8>
 80061e2:	2200      	movs	r2, #0
 80061e4:	2300      	movs	r3, #0
 80061e6:	4620      	mov	r0, r4
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa fc49 	bl	8000a80 <__aeabi_dcmpeq>
 80061ee:	b918      	cbnz	r0, 80061f8 <__cvt+0xb8>
 80061f0:	f1c6 0601 	rsb	r6, r6, #1
 80061f4:	f8ca 6000 	str.w	r6, [sl]
 80061f8:	f8da 3000 	ldr.w	r3, [sl]
 80061fc:	4499      	add	r9, r3
 80061fe:	e7d3      	b.n	80061a8 <__cvt+0x68>
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	9107      	str	r1, [sp, #28]
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e7d9      	b.n	80061bc <__cvt+0x7c>

08006208 <__exponent>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	2900      	cmp	r1, #0
 800620c:	bfb6      	itet	lt
 800620e:	232d      	movlt	r3, #45	@ 0x2d
 8006210:	232b      	movge	r3, #43	@ 0x2b
 8006212:	4249      	neglt	r1, r1
 8006214:	2909      	cmp	r1, #9
 8006216:	7002      	strb	r2, [r0, #0]
 8006218:	7043      	strb	r3, [r0, #1]
 800621a:	dd29      	ble.n	8006270 <__exponent+0x68>
 800621c:	f10d 0307 	add.w	r3, sp, #7
 8006220:	461d      	mov	r5, r3
 8006222:	270a      	movs	r7, #10
 8006224:	fbb1 f6f7 	udiv	r6, r1, r7
 8006228:	461a      	mov	r2, r3
 800622a:	fb07 1416 	mls	r4, r7, r6, r1
 800622e:	3430      	adds	r4, #48	@ 0x30
 8006230:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006234:	460c      	mov	r4, r1
 8006236:	2c63      	cmp	r4, #99	@ 0x63
 8006238:	4631      	mov	r1, r6
 800623a:	f103 33ff 	add.w	r3, r3, #4294967295
 800623e:	dcf1      	bgt.n	8006224 <__exponent+0x1c>
 8006240:	3130      	adds	r1, #48	@ 0x30
 8006242:	1e94      	subs	r4, r2, #2
 8006244:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006248:	4623      	mov	r3, r4
 800624a:	1c41      	adds	r1, r0, #1
 800624c:	42ab      	cmp	r3, r5
 800624e:	d30a      	bcc.n	8006266 <__exponent+0x5e>
 8006250:	f10d 0309 	add.w	r3, sp, #9
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	42ac      	cmp	r4, r5
 8006258:	bf88      	it	hi
 800625a:	2300      	movhi	r3, #0
 800625c:	3302      	adds	r3, #2
 800625e:	4403      	add	r3, r0
 8006260:	1a18      	subs	r0, r3, r0
 8006262:	b003      	add	sp, #12
 8006264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006266:	f813 6b01 	ldrb.w	r6, [r3], #1
 800626a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800626e:	e7ed      	b.n	800624c <__exponent+0x44>
 8006270:	2330      	movs	r3, #48	@ 0x30
 8006272:	3130      	adds	r1, #48	@ 0x30
 8006274:	7083      	strb	r3, [r0, #2]
 8006276:	70c1      	strb	r1, [r0, #3]
 8006278:	1d03      	adds	r3, r0, #4
 800627a:	e7f1      	b.n	8006260 <__exponent+0x58>

0800627c <_printf_float>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	b091      	sub	sp, #68	@ 0x44
 8006282:	460c      	mov	r4, r1
 8006284:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006288:	4616      	mov	r6, r2
 800628a:	461f      	mov	r7, r3
 800628c:	4605      	mov	r5, r0
 800628e:	f000 fcbf 	bl	8006c10 <_localeconv_r>
 8006292:	6803      	ldr	r3, [r0, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	9308      	str	r3, [sp, #32]
 8006298:	f7f9 ffc6 	bl	8000228 <strlen>
 800629c:	2300      	movs	r3, #0
 800629e:	930e      	str	r3, [sp, #56]	@ 0x38
 80062a0:	f8d8 3000 	ldr.w	r3, [r8]
 80062a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80062a6:	3307      	adds	r3, #7
 80062a8:	f023 0307 	bic.w	r3, r3, #7
 80062ac:	f103 0208 	add.w	r2, r3, #8
 80062b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062b4:	f8d4 b000 	ldr.w	fp, [r4]
 80062b8:	f8c8 2000 	str.w	r2, [r8]
 80062bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006548 <_printf_float+0x2cc>)
 80062d8:	f7fa fc04 	bl	8000ae4 <__aeabi_dcmpun>
 80062dc:	bb70      	cbnz	r0, 800633c <_printf_float+0xc0>
 80062de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062e2:	f04f 32ff 	mov.w	r2, #4294967295
 80062e6:	4b98      	ldr	r3, [pc, #608]	@ (8006548 <_printf_float+0x2cc>)
 80062e8:	f7fa fbde 	bl	8000aa8 <__aeabi_dcmple>
 80062ec:	bb30      	cbnz	r0, 800633c <_printf_float+0xc0>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa fbcd 	bl	8000a94 <__aeabi_dcmplt>
 80062fa:	b110      	cbz	r0, 8006302 <_printf_float+0x86>
 80062fc:	232d      	movs	r3, #45	@ 0x2d
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006302:	4a92      	ldr	r2, [pc, #584]	@ (800654c <_printf_float+0x2d0>)
 8006304:	4b92      	ldr	r3, [pc, #584]	@ (8006550 <_printf_float+0x2d4>)
 8006306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800630a:	bf8c      	ite	hi
 800630c:	4690      	movhi	r8, r2
 800630e:	4698      	movls	r8, r3
 8006310:	2303      	movs	r3, #3
 8006312:	f04f 0900 	mov.w	r9, #0
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	f02b 0304 	bic.w	r3, fp, #4
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	4633      	mov	r3, r6
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	9700      	str	r7, [sp, #0]
 8006326:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006328:	f000 f9d4 	bl	80066d4 <_printf_common>
 800632c:	3001      	adds	r0, #1
 800632e:	f040 8090 	bne.w	8006452 <_printf_float+0x1d6>
 8006332:	f04f 30ff 	mov.w	r0, #4294967295
 8006336:	b011      	add	sp, #68	@ 0x44
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7fa fbce 	bl	8000ae4 <__aeabi_dcmpun>
 8006348:	b148      	cbz	r0, 800635e <_printf_float+0xe2>
 800634a:	464b      	mov	r3, r9
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfb8      	it	lt
 8006350:	232d      	movlt	r3, #45	@ 0x2d
 8006352:	4a80      	ldr	r2, [pc, #512]	@ (8006554 <_printf_float+0x2d8>)
 8006354:	bfb8      	it	lt
 8006356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800635a:	4b7f      	ldr	r3, [pc, #508]	@ (8006558 <_printf_float+0x2dc>)
 800635c:	e7d3      	b.n	8006306 <_printf_float+0x8a>
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	d13f      	bne.n	80063e8 <_printf_float+0x16c>
 8006368:	2306      	movs	r3, #6
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	9206      	str	r2, [sp, #24]
 8006376:	aa0e      	add	r2, sp, #56	@ 0x38
 8006378:	e9cd a204 	strd	sl, r2, [sp, #16]
 800637c:	aa0d      	add	r2, sp, #52	@ 0x34
 800637e:	9203      	str	r2, [sp, #12]
 8006380:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006384:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	4642      	mov	r2, r8
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4628      	mov	r0, r5
 8006390:	464b      	mov	r3, r9
 8006392:	910a      	str	r1, [sp, #40]	@ 0x28
 8006394:	f7ff fed4 	bl	8006140 <__cvt>
 8006398:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800639a:	4680      	mov	r8, r0
 800639c:	2947      	cmp	r1, #71	@ 0x47
 800639e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80063a0:	d128      	bne.n	80063f4 <_printf_float+0x178>
 80063a2:	1cc8      	adds	r0, r1, #3
 80063a4:	db02      	blt.n	80063ac <_printf_float+0x130>
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	4299      	cmp	r1, r3
 80063aa:	dd40      	ble.n	800642e <_printf_float+0x1b2>
 80063ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80063b0:	fa5f fa8a 	uxtb.w	sl, sl
 80063b4:	4652      	mov	r2, sl
 80063b6:	3901      	subs	r1, #1
 80063b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80063be:	f7ff ff23 	bl	8006208 <__exponent>
 80063c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063c4:	4681      	mov	r9, r0
 80063c6:	1813      	adds	r3, r2, r0
 80063c8:	2a01      	cmp	r2, #1
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	dc02      	bgt.n	80063d4 <_printf_float+0x158>
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	07d2      	lsls	r2, r2, #31
 80063d2:	d501      	bpl.n	80063d8 <_printf_float+0x15c>
 80063d4:	3301      	adds	r3, #1
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d09e      	beq.n	800631e <_printf_float+0xa2>
 80063e0:	232d      	movs	r3, #45	@ 0x2d
 80063e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e6:	e79a      	b.n	800631e <_printf_float+0xa2>
 80063e8:	2947      	cmp	r1, #71	@ 0x47
 80063ea:	d1bf      	bne.n	800636c <_printf_float+0xf0>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1bd      	bne.n	800636c <_printf_float+0xf0>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e7ba      	b.n	800636a <_printf_float+0xee>
 80063f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063f8:	d9dc      	bls.n	80063b4 <_printf_float+0x138>
 80063fa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063fe:	d118      	bne.n	8006432 <_printf_float+0x1b6>
 8006400:	2900      	cmp	r1, #0
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	dd0b      	ble.n	800641e <_printf_float+0x1a2>
 8006406:	6121      	str	r1, [r4, #16]
 8006408:	b913      	cbnz	r3, 8006410 <_printf_float+0x194>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	07d0      	lsls	r0, r2, #31
 800640e:	d502      	bpl.n	8006416 <_printf_float+0x19a>
 8006410:	3301      	adds	r3, #1
 8006412:	440b      	add	r3, r1
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	f04f 0900 	mov.w	r9, #0
 800641a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800641c:	e7dc      	b.n	80063d8 <_printf_float+0x15c>
 800641e:	b913      	cbnz	r3, 8006426 <_printf_float+0x1aa>
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	07d2      	lsls	r2, r2, #31
 8006424:	d501      	bpl.n	800642a <_printf_float+0x1ae>
 8006426:	3302      	adds	r3, #2
 8006428:	e7f4      	b.n	8006414 <_printf_float+0x198>
 800642a:	2301      	movs	r3, #1
 800642c:	e7f2      	b.n	8006414 <_printf_float+0x198>
 800642e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006434:	4299      	cmp	r1, r3
 8006436:	db05      	blt.n	8006444 <_printf_float+0x1c8>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	6121      	str	r1, [r4, #16]
 800643c:	07d8      	lsls	r0, r3, #31
 800643e:	d5ea      	bpl.n	8006416 <_printf_float+0x19a>
 8006440:	1c4b      	adds	r3, r1, #1
 8006442:	e7e7      	b.n	8006414 <_printf_float+0x198>
 8006444:	2900      	cmp	r1, #0
 8006446:	bfcc      	ite	gt
 8006448:	2201      	movgt	r2, #1
 800644a:	f1c1 0202 	rsble	r2, r1, #2
 800644e:	4413      	add	r3, r2
 8006450:	e7e0      	b.n	8006414 <_printf_float+0x198>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	055a      	lsls	r2, r3, #21
 8006456:	d407      	bmi.n	8006468 <_printf_float+0x1ec>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	4642      	mov	r2, r8
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	d12b      	bne.n	80064be <_printf_float+0x242>
 8006466:	e764      	b.n	8006332 <_printf_float+0xb6>
 8006468:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800646c:	f240 80dc 	bls.w	8006628 <_printf_float+0x3ac>
 8006470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	f7fa fb02 	bl	8000a80 <__aeabi_dcmpeq>
 800647c:	2800      	cmp	r0, #0
 800647e:	d033      	beq.n	80064e8 <_printf_float+0x26c>
 8006480:	2301      	movs	r3, #1
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	4a35      	ldr	r2, [pc, #212]	@ (800655c <_printf_float+0x2e0>)
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af51 	beq.w	8006332 <_printf_float+0xb6>
 8006490:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006494:	4543      	cmp	r3, r8
 8006496:	db02      	blt.n	800649e <_printf_float+0x222>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07d8      	lsls	r0, r3, #31
 800649c:	d50f      	bpl.n	80064be <_printf_float+0x242>
 800649e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f af42 	beq.w	8006332 <_printf_float+0xb6>
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80064b6:	f104 0a1a 	add.w	sl, r4, #26
 80064ba:	45c8      	cmp	r8, r9
 80064bc:	dc09      	bgt.n	80064d2 <_printf_float+0x256>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	079b      	lsls	r3, r3, #30
 80064c2:	f100 8102 	bmi.w	80066ca <_printf_float+0x44e>
 80064c6:	68e0      	ldr	r0, [r4, #12]
 80064c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ca:	4298      	cmp	r0, r3
 80064cc:	bfb8      	it	lt
 80064ce:	4618      	movlt	r0, r3
 80064d0:	e731      	b.n	8006336 <_printf_float+0xba>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f af28 	beq.w	8006332 <_printf_float+0xb6>
 80064e2:	f109 0901 	add.w	r9, r9, #1
 80064e6:	e7e8      	b.n	80064ba <_printf_float+0x23e>
 80064e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dc38      	bgt.n	8006560 <_printf_float+0x2e4>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <_printf_float+0x2e0>)
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f af1a 	beq.w	8006332 <_printf_float+0xb6>
 80064fe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006502:	ea59 0303 	orrs.w	r3, r9, r3
 8006506:	d102      	bne.n	800650e <_printf_float+0x292>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	07d9      	lsls	r1, r3, #31
 800650c:	d5d7      	bpl.n	80064be <_printf_float+0x242>
 800650e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006512:	4631      	mov	r1, r6
 8006514:	4628      	mov	r0, r5
 8006516:	47b8      	blx	r7
 8006518:	3001      	adds	r0, #1
 800651a:	f43f af0a 	beq.w	8006332 <_printf_float+0xb6>
 800651e:	f04f 0a00 	mov.w	sl, #0
 8006522:	f104 0b1a 	add.w	fp, r4, #26
 8006526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006528:	425b      	negs	r3, r3
 800652a:	4553      	cmp	r3, sl
 800652c:	dc01      	bgt.n	8006532 <_printf_float+0x2b6>
 800652e:	464b      	mov	r3, r9
 8006530:	e793      	b.n	800645a <_printf_float+0x1de>
 8006532:	2301      	movs	r3, #1
 8006534:	465a      	mov	r2, fp
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	f43f aef8 	beq.w	8006332 <_printf_float+0xb6>
 8006542:	f10a 0a01 	add.w	sl, sl, #1
 8006546:	e7ee      	b.n	8006526 <_printf_float+0x2aa>
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	0800e3bd 	.word	0x0800e3bd
 8006550:	0800e3b9 	.word	0x0800e3b9
 8006554:	0800e3c5 	.word	0x0800e3c5
 8006558:	0800e3c1 	.word	0x0800e3c1
 800655c:	0800e3c9 	.word	0x0800e3c9
 8006560:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006562:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006566:	4553      	cmp	r3, sl
 8006568:	bfa8      	it	ge
 800656a:	4653      	movge	r3, sl
 800656c:	2b00      	cmp	r3, #0
 800656e:	4699      	mov	r9, r3
 8006570:	dc36      	bgt.n	80065e0 <_printf_float+0x364>
 8006572:	f04f 0b00 	mov.w	fp, #0
 8006576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800657a:	f104 021a 	add.w	r2, r4, #26
 800657e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006580:	930a      	str	r3, [sp, #40]	@ 0x28
 8006582:	eba3 0309 	sub.w	r3, r3, r9
 8006586:	455b      	cmp	r3, fp
 8006588:	dc31      	bgt.n	80065ee <_printf_float+0x372>
 800658a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800658c:	459a      	cmp	sl, r3
 800658e:	dc3a      	bgt.n	8006606 <_printf_float+0x38a>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d437      	bmi.n	8006606 <_printf_float+0x38a>
 8006596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006598:	ebaa 0903 	sub.w	r9, sl, r3
 800659c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659e:	ebaa 0303 	sub.w	r3, sl, r3
 80065a2:	4599      	cmp	r9, r3
 80065a4:	bfa8      	it	ge
 80065a6:	4699      	movge	r9, r3
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	dc33      	bgt.n	8006616 <_printf_float+0x39a>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 0b1a 	add.w	fp, r4, #26
 80065ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065bc:	ebaa 0303 	sub.w	r3, sl, r3
 80065c0:	eba3 0309 	sub.w	r3, r3, r9
 80065c4:	4543      	cmp	r3, r8
 80065c6:	f77f af7a 	ble.w	80064be <_printf_float+0x242>
 80065ca:	2301      	movs	r3, #1
 80065cc:	465a      	mov	r2, fp
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f aeac 	beq.w	8006332 <_printf_float+0xb6>
 80065da:	f108 0801 	add.w	r8, r8, #1
 80065de:	e7ec      	b.n	80065ba <_printf_float+0x33e>
 80065e0:	4642      	mov	r2, r8
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1c2      	bne.n	8006572 <_printf_float+0x2f6>
 80065ec:	e6a1      	b.n	8006332 <_printf_float+0xb6>
 80065ee:	2301      	movs	r3, #1
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	f43f ae9a 	beq.w	8006332 <_printf_float+0xb6>
 80065fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006600:	f10b 0b01 	add.w	fp, fp, #1
 8006604:	e7bb      	b.n	800657e <_printf_float+0x302>
 8006606:	4631      	mov	r1, r6
 8006608:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	d1c0      	bne.n	8006596 <_printf_float+0x31a>
 8006614:	e68d      	b.n	8006332 <_printf_float+0xb6>
 8006616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006618:	464b      	mov	r3, r9
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	4442      	add	r2, r8
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	d1c3      	bne.n	80065ae <_printf_float+0x332>
 8006626:	e684      	b.n	8006332 <_printf_float+0xb6>
 8006628:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800662c:	f1ba 0f01 	cmp.w	sl, #1
 8006630:	dc01      	bgt.n	8006636 <_printf_float+0x3ba>
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d536      	bpl.n	80066a4 <_printf_float+0x428>
 8006636:	2301      	movs	r3, #1
 8006638:	4642      	mov	r2, r8
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae76 	beq.w	8006332 <_printf_float+0xb6>
 8006646:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae6e 	beq.w	8006332 <_printf_float+0xb6>
 8006656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006662:	f7fa fa0d 	bl	8000a80 <__aeabi_dcmpeq>
 8006666:	b9c0      	cbnz	r0, 800669a <_printf_float+0x41e>
 8006668:	4653      	mov	r3, sl
 800666a:	f108 0201 	add.w	r2, r8, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d10c      	bne.n	8006692 <_printf_float+0x416>
 8006678:	e65b      	b.n	8006332 <_printf_float+0xb6>
 800667a:	2301      	movs	r3, #1
 800667c:	465a      	mov	r2, fp
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae54 	beq.w	8006332 <_printf_float+0xb6>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	45d0      	cmp	r8, sl
 8006690:	dbf3      	blt.n	800667a <_printf_float+0x3fe>
 8006692:	464b      	mov	r3, r9
 8006694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006698:	e6e0      	b.n	800645c <_printf_float+0x1e0>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f104 0b1a 	add.w	fp, r4, #26
 80066a2:	e7f4      	b.n	800668e <_printf_float+0x412>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4642      	mov	r2, r8
 80066a8:	e7e1      	b.n	800666e <_printf_float+0x3f2>
 80066aa:	2301      	movs	r3, #1
 80066ac:	464a      	mov	r2, r9
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f ae3c 	beq.w	8006332 <_printf_float+0xb6>
 80066ba:	f108 0801 	add.w	r8, r8, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066c2:	1a5b      	subs	r3, r3, r1
 80066c4:	4543      	cmp	r3, r8
 80066c6:	dcf0      	bgt.n	80066aa <_printf_float+0x42e>
 80066c8:	e6fd      	b.n	80064c6 <_printf_float+0x24a>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	f104 0919 	add.w	r9, r4, #25
 80066d2:	e7f4      	b.n	80066be <_printf_float+0x442>

080066d4 <_printf_common>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4616      	mov	r6, r2
 80066da:	4698      	mov	r8, r3
 80066dc:	688a      	ldr	r2, [r1, #8]
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	4607      	mov	r7, r0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bfb8      	it	lt
 80066e6:	4613      	movlt	r3, r2
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ee:	460c      	mov	r4, r1
 80066f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f4:	b10a      	cbz	r2, 80066fa <_printf_common+0x26>
 80066f6:	3301      	adds	r3, #1
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	bf42      	ittt	mi
 8006700:	6833      	ldrmi	r3, [r6, #0]
 8006702:	3302      	addmi	r3, #2
 8006704:	6033      	strmi	r3, [r6, #0]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d106      	bne.n	800671c <_printf_common+0x48>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	6832      	ldr	r2, [r6, #0]
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	42ab      	cmp	r3, r5
 800671a:	dc2b      	bgt.n	8006774 <_printf_common+0xa0>
 800671c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	3b00      	subs	r3, #0
 8006724:	bf18      	it	ne
 8006726:	2301      	movne	r3, #1
 8006728:	0692      	lsls	r2, r2, #26
 800672a:	d430      	bmi.n	800678e <_printf_common+0xba>
 800672c:	4641      	mov	r1, r8
 800672e:	4638      	mov	r0, r7
 8006730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006734:	47c8      	blx	r9
 8006736:	3001      	adds	r0, #1
 8006738:	d023      	beq.n	8006782 <_printf_common+0xae>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6922      	ldr	r2, [r4, #16]
 800673e:	f003 0306 	and.w	r3, r3, #6
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf14      	ite	ne
 8006746:	2500      	movne	r5, #0
 8006748:	6833      	ldreq	r3, [r6, #0]
 800674a:	f04f 0600 	mov.w	r6, #0
 800674e:	bf08      	it	eq
 8006750:	68e5      	ldreq	r5, [r4, #12]
 8006752:	f104 041a 	add.w	r4, r4, #26
 8006756:	bf08      	it	eq
 8006758:	1aed      	subeq	r5, r5, r3
 800675a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800675e:	bf08      	it	eq
 8006760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006764:	4293      	cmp	r3, r2
 8006766:	bfc4      	itt	gt
 8006768:	1a9b      	subgt	r3, r3, r2
 800676a:	18ed      	addgt	r5, r5, r3
 800676c:	42b5      	cmp	r5, r6
 800676e:	d11a      	bne.n	80067a6 <_printf_common+0xd2>
 8006770:	2000      	movs	r0, #0
 8006772:	e008      	b.n	8006786 <_printf_common+0xb2>
 8006774:	2301      	movs	r3, #1
 8006776:	4652      	mov	r2, sl
 8006778:	4641      	mov	r1, r8
 800677a:	4638      	mov	r0, r7
 800677c:	47c8      	blx	r9
 800677e:	3001      	adds	r0, #1
 8006780:	d103      	bne.n	800678a <_printf_common+0xb6>
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	3501      	adds	r5, #1
 800678c:	e7c1      	b.n	8006712 <_printf_common+0x3e>
 800678e:	2030      	movs	r0, #48	@ 0x30
 8006790:	18e1      	adds	r1, r4, r3
 8006792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800679c:	4422      	add	r2, r4
 800679e:	3302      	adds	r3, #2
 80067a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a4:	e7c2      	b.n	800672c <_printf_common+0x58>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4622      	mov	r2, r4
 80067aa:	4641      	mov	r1, r8
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c8      	blx	r9
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0e6      	beq.n	8006782 <_printf_common+0xae>
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7d9      	b.n	800676c <_printf_common+0x98>

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	4691      	mov	r9, r2
 80067c0:	2f78      	cmp	r7, #120	@ 0x78
 80067c2:	4680      	mov	r8, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	469a      	mov	sl, r3
 80067c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	@ 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d1 	beq.w	800697c <_printf_i+0x1c4>
 80067da:	2f58      	cmp	r7, #88	@ 0x58
 80067dc:	f000 80b8 	beq.w	8006950 <_printf_i+0x198>
 80067e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	@ (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006963 	.word	0x08006963
 8006828:	0800688f 	.word	0x0800688f
 800682c:	0800691d 	.word	0x0800691d
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006985 	.word	0x08006985
 800683c:	080067e1 	.word	0x080067e1
 8006840:	0800688f 	.word	0x0800688f
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	08006925 	.word	0x08006925
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6032      	str	r2, [r6, #0]
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e09c      	b.n	800699e <_printf_i+0x1e6>
 8006864:	6833      	ldr	r3, [r6, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	0606      	lsls	r6, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xbc>
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	e003      	b.n	800687c <_printf_i+0xc4>
 8006874:	0645      	lsls	r5, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xb8>
 8006878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800687c:	2d00      	cmp	r5, #0
 800687e:	da03      	bge.n	8006888 <_printf_i+0xd0>
 8006880:	232d      	movs	r3, #45	@ 0x2d
 8006882:	426d      	negs	r5, r5
 8006884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006888:	230a      	movs	r3, #10
 800688a:	4858      	ldr	r0, [pc, #352]	@ (80069ec <_printf_i+0x234>)
 800688c:	e011      	b.n	80068b2 <_printf_i+0xfa>
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	0608      	lsls	r0, r1, #24
 8006894:	f853 5b04 	ldr.w	r5, [r3], #4
 8006898:	d402      	bmi.n	80068a0 <_printf_i+0xe8>
 800689a:	0649      	lsls	r1, r1, #25
 800689c:	bf48      	it	mi
 800689e:	b2ad      	uxthmi	r5, r5
 80068a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	bf14      	ite	ne
 80068a6:	230a      	movne	r3, #10
 80068a8:	2308      	moveq	r3, #8
 80068aa:	4850      	ldr	r0, [pc, #320]	@ (80069ec <_printf_i+0x234>)
 80068ac:	2100      	movs	r1, #0
 80068ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b2:	6866      	ldr	r6, [r4, #4]
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	60a6      	str	r6, [r4, #8]
 80068b8:	db05      	blt.n	80068c6 <_printf_i+0x10e>
 80068ba:	6821      	ldr	r1, [r4, #0]
 80068bc:	432e      	orrs	r6, r5
 80068be:	f021 0104 	bic.w	r1, r1, #4
 80068c2:	6021      	str	r1, [r4, #0]
 80068c4:	d04b      	beq.n	800695e <_printf_i+0x1a6>
 80068c6:	4616      	mov	r6, r2
 80068c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068cc:	fb03 5711 	mls	r7, r3, r1, r5
 80068d0:	5dc7      	ldrb	r7, [r0, r7]
 80068d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068d6:	462f      	mov	r7, r5
 80068d8:	42bb      	cmp	r3, r7
 80068da:	460d      	mov	r5, r1
 80068dc:	d9f4      	bls.n	80068c8 <_printf_i+0x110>
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d10b      	bne.n	80068fa <_printf_i+0x142>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	07df      	lsls	r7, r3, #31
 80068e6:	d508      	bpl.n	80068fa <_printf_i+0x142>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	6861      	ldr	r1, [r4, #4]
 80068ec:	4299      	cmp	r1, r3
 80068ee:	bfde      	ittt	le
 80068f0:	2330      	movle	r3, #48	@ 0x30
 80068f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068fa:	1b92      	subs	r2, r2, r6
 80068fc:	6122      	str	r2, [r4, #16]
 80068fe:	464b      	mov	r3, r9
 8006900:	4621      	mov	r1, r4
 8006902:	4640      	mov	r0, r8
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	aa03      	add	r2, sp, #12
 800690a:	f7ff fee3 	bl	80066d4 <_printf_common>
 800690e:	3001      	adds	r0, #1
 8006910:	d14a      	bne.n	80069a8 <_printf_i+0x1f0>
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	b004      	add	sp, #16
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f043 0320 	orr.w	r3, r3, #32
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	2778      	movs	r7, #120	@ 0x78
 8006926:	4832      	ldr	r0, [pc, #200]	@ (80069f0 <_printf_i+0x238>)
 8006928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	6831      	ldr	r1, [r6, #0]
 8006930:	061f      	lsls	r7, r3, #24
 8006932:	f851 5b04 	ldr.w	r5, [r1], #4
 8006936:	d402      	bmi.n	800693e <_printf_i+0x186>
 8006938:	065f      	lsls	r7, r3, #25
 800693a:	bf48      	it	mi
 800693c:	b2ad      	uxthmi	r5, r5
 800693e:	6031      	str	r1, [r6, #0]
 8006940:	07d9      	lsls	r1, r3, #31
 8006942:	bf44      	itt	mi
 8006944:	f043 0320 	orrmi.w	r3, r3, #32
 8006948:	6023      	strmi	r3, [r4, #0]
 800694a:	b11d      	cbz	r5, 8006954 <_printf_i+0x19c>
 800694c:	2310      	movs	r3, #16
 800694e:	e7ad      	b.n	80068ac <_printf_i+0xf4>
 8006950:	4826      	ldr	r0, [pc, #152]	@ (80069ec <_printf_i+0x234>)
 8006952:	e7e9      	b.n	8006928 <_printf_i+0x170>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f023 0320 	bic.w	r3, r3, #32
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	e7f6      	b.n	800694c <_printf_i+0x194>
 800695e:	4616      	mov	r6, r2
 8006960:	e7bd      	b.n	80068de <_printf_i+0x126>
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	1d18      	adds	r0, r3, #4
 8006968:	6961      	ldr	r1, [r4, #20]
 800696a:	6030      	str	r0, [r6, #0]
 800696c:	062e      	lsls	r6, r5, #24
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	d501      	bpl.n	8006976 <_printf_i+0x1be>
 8006972:	6019      	str	r1, [r3, #0]
 8006974:	e002      	b.n	800697c <_printf_i+0x1c4>
 8006976:	0668      	lsls	r0, r5, #25
 8006978:	d5fb      	bpl.n	8006972 <_printf_i+0x1ba>
 800697a:	8019      	strh	r1, [r3, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	4616      	mov	r6, r2
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	e7bc      	b.n	80068fe <_printf_i+0x146>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	2100      	movs	r1, #0
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	6032      	str	r2, [r6, #0]
 800698c:	681e      	ldr	r6, [r3, #0]
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f9b4 	bl	8006cfe <memchr>
 8006996:	b108      	cbz	r0, 800699c <_printf_i+0x1e4>
 8006998:	1b80      	subs	r0, r0, r6
 800699a:	6060      	str	r0, [r4, #4]
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	2300      	movs	r3, #0
 80069a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a6:	e7aa      	b.n	80068fe <_printf_i+0x146>
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	47d0      	blx	sl
 80069b2:	3001      	adds	r0, #1
 80069b4:	d0ad      	beq.n	8006912 <_printf_i+0x15a>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	079b      	lsls	r3, r3, #30
 80069ba:	d413      	bmi.n	80069e4 <_printf_i+0x22c>
 80069bc:	68e0      	ldr	r0, [r4, #12]
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	4298      	cmp	r0, r3
 80069c2:	bfb8      	it	lt
 80069c4:	4618      	movlt	r0, r3
 80069c6:	e7a6      	b.n	8006916 <_printf_i+0x15e>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4632      	mov	r2, r6
 80069cc:	4649      	mov	r1, r9
 80069ce:	4640      	mov	r0, r8
 80069d0:	47d0      	blx	sl
 80069d2:	3001      	adds	r0, #1
 80069d4:	d09d      	beq.n	8006912 <_printf_i+0x15a>
 80069d6:	3501      	adds	r5, #1
 80069d8:	68e3      	ldr	r3, [r4, #12]
 80069da:	9903      	ldr	r1, [sp, #12]
 80069dc:	1a5b      	subs	r3, r3, r1
 80069de:	42ab      	cmp	r3, r5
 80069e0:	dcf2      	bgt.n	80069c8 <_printf_i+0x210>
 80069e2:	e7eb      	b.n	80069bc <_printf_i+0x204>
 80069e4:	2500      	movs	r5, #0
 80069e6:	f104 0619 	add.w	r6, r4, #25
 80069ea:	e7f5      	b.n	80069d8 <_printf_i+0x220>
 80069ec:	0800e3cb 	.word	0x0800e3cb
 80069f0:	0800e3dc 	.word	0x0800e3dc

080069f4 <std>:
 80069f4:	2300      	movs	r3, #0
 80069f6:	b510      	push	{r4, lr}
 80069f8:	4604      	mov	r4, r0
 80069fa:	e9c0 3300 	strd	r3, r3, [r0]
 80069fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a02:	6083      	str	r3, [r0, #8]
 8006a04:	8181      	strh	r1, [r0, #12]
 8006a06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a08:	81c2      	strh	r2, [r0, #14]
 8006a0a:	6183      	str	r3, [r0, #24]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	2208      	movs	r2, #8
 8006a10:	305c      	adds	r0, #92	@ 0x5c
 8006a12:	f000 f8f4 	bl	8006bfe <memset>
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <std+0x58>)
 8006a18:	6224      	str	r4, [r4, #32]
 8006a1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <std+0x5c>)
 8006a1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a20:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <std+0x60>)
 8006a22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a24:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <std+0x64>)
 8006a26:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a28:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <std+0x68>)
 8006a2a:	429c      	cmp	r4, r3
 8006a2c:	d006      	beq.n	8006a3c <std+0x48>
 8006a2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a32:	4294      	cmp	r4, r2
 8006a34:	d002      	beq.n	8006a3c <std+0x48>
 8006a36:	33d0      	adds	r3, #208	@ 0xd0
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	d105      	bne.n	8006a48 <std+0x54>
 8006a3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a44:	f000 b958 	b.w	8006cf8 <__retarget_lock_init_recursive>
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	08006b79 	.word	0x08006b79
 8006a50:	08006b9b 	.word	0x08006b9b
 8006a54:	08006bd3 	.word	0x08006bd3
 8006a58:	08006bf7 	.word	0x08006bf7
 8006a5c:	2000036c 	.word	0x2000036c

08006a60 <stdio_exit_handler>:
 8006a60:	4a02      	ldr	r2, [pc, #8]	@ (8006a6c <stdio_exit_handler+0xc>)
 8006a62:	4903      	ldr	r1, [pc, #12]	@ (8006a70 <stdio_exit_handler+0x10>)
 8006a64:	4803      	ldr	r0, [pc, #12]	@ (8006a74 <stdio_exit_handler+0x14>)
 8006a66:	f000 b869 	b.w	8006b3c <_fwalk_sglue>
 8006a6a:	bf00      	nop
 8006a6c:	20000018 	.word	0x20000018
 8006a70:	08008421 	.word	0x08008421
 8006a74:	20000194 	.word	0x20000194

08006a78 <cleanup_stdio>:
 8006a78:	6841      	ldr	r1, [r0, #4]
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006aac <cleanup_stdio+0x34>)
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	4604      	mov	r4, r0
 8006a82:	d001      	beq.n	8006a88 <cleanup_stdio+0x10>
 8006a84:	f001 fccc 	bl	8008420 <_fflush_r>
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	4b09      	ldr	r3, [pc, #36]	@ (8006ab0 <cleanup_stdio+0x38>)
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <cleanup_stdio+0x1e>
 8006a90:	4620      	mov	r0, r4
 8006a92:	f001 fcc5 	bl	8008420 <_fflush_r>
 8006a96:	68e1      	ldr	r1, [r4, #12]
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <cleanup_stdio+0x3c>)
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	d004      	beq.n	8006aa8 <cleanup_stdio+0x30>
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f001 bcbc 	b.w	8008420 <_fflush_r>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	2000036c 	.word	0x2000036c
 8006ab0:	200003d4 	.word	0x200003d4
 8006ab4:	2000043c 	.word	0x2000043c

08006ab8 <global_stdio_init.part.0>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <global_stdio_init.part.0+0x30>)
 8006abc:	4c0b      	ldr	r4, [pc, #44]	@ (8006aec <global_stdio_init.part.0+0x34>)
 8006abe:	4a0c      	ldr	r2, [pc, #48]	@ (8006af0 <global_stdio_init.part.0+0x38>)
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f7ff ff94 	bl	80069f4 <std>
 8006acc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	2109      	movs	r1, #9
 8006ad4:	f7ff ff8e 	bl	80069f4 <std>
 8006ad8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006adc:	2202      	movs	r2, #2
 8006ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae2:	2112      	movs	r1, #18
 8006ae4:	f7ff bf86 	b.w	80069f4 <std>
 8006ae8:	200004a4 	.word	0x200004a4
 8006aec:	2000036c 	.word	0x2000036c
 8006af0:	08006a61 	.word	0x08006a61

08006af4 <__sfp_lock_acquire>:
 8006af4:	4801      	ldr	r0, [pc, #4]	@ (8006afc <__sfp_lock_acquire+0x8>)
 8006af6:	f000 b900 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	200004ad 	.word	0x200004ad

08006b00 <__sfp_lock_release>:
 8006b00:	4801      	ldr	r0, [pc, #4]	@ (8006b08 <__sfp_lock_release+0x8>)
 8006b02:	f000 b8fb 	b.w	8006cfc <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	200004ad 	.word	0x200004ad

08006b0c <__sinit>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4604      	mov	r4, r0
 8006b10:	f7ff fff0 	bl	8006af4 <__sfp_lock_acquire>
 8006b14:	6a23      	ldr	r3, [r4, #32]
 8006b16:	b11b      	cbz	r3, 8006b20 <__sinit+0x14>
 8006b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1c:	f7ff bff0 	b.w	8006b00 <__sfp_lock_release>
 8006b20:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <__sinit+0x28>)
 8006b22:	6223      	str	r3, [r4, #32]
 8006b24:	4b04      	ldr	r3, [pc, #16]	@ (8006b38 <__sinit+0x2c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f5      	bne.n	8006b18 <__sinit+0xc>
 8006b2c:	f7ff ffc4 	bl	8006ab8 <global_stdio_init.part.0>
 8006b30:	e7f2      	b.n	8006b18 <__sinit+0xc>
 8006b32:	bf00      	nop
 8006b34:	08006a79 	.word	0x08006a79
 8006b38:	200004a4 	.word	0x200004a4

08006b3c <_fwalk_sglue>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	4607      	mov	r7, r0
 8006b42:	4688      	mov	r8, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	2600      	movs	r6, #0
 8006b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b50:	d505      	bpl.n	8006b5e <_fwalk_sglue+0x22>
 8006b52:	6824      	ldr	r4, [r4, #0]
 8006b54:	2c00      	cmp	r4, #0
 8006b56:	d1f7      	bne.n	8006b48 <_fwalk_sglue+0xc>
 8006b58:	4630      	mov	r0, r6
 8006b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d907      	bls.n	8006b74 <_fwalk_sglue+0x38>
 8006b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	d003      	beq.n	8006b74 <_fwalk_sglue+0x38>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c0      	blx	r8
 8006b72:	4306      	orrs	r6, r0
 8006b74:	3568      	adds	r5, #104	@ 0x68
 8006b76:	e7e9      	b.n	8006b4c <_fwalk_sglue+0x10>

08006b78 <__sread>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	f000 f86c 	bl	8006c5c <_read_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	bfab      	itete	ge
 8006b88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b8c:	181b      	addge	r3, r3, r0
 8006b8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b92:	bfac      	ite	ge
 8006b94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b96:	81a3      	strhlt	r3, [r4, #12]
 8006b98:	bd10      	pop	{r4, pc}

08006b9a <__swrite>:
 8006b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	898b      	ldrh	r3, [r1, #12]
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	05db      	lsls	r3, r3, #23
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	4616      	mov	r6, r2
 8006baa:	d505      	bpl.n	8006bb8 <__swrite+0x1e>
 8006bac:	2302      	movs	r3, #2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	f000 f840 	bl	8006c38 <_lseek_r>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	4632      	mov	r2, r6
 8006bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	f000 b857 	b.w	8006c80 <_write_r>

08006bd2 <__sseek>:
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bda:	f000 f82d 	bl	8006c38 <_lseek_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	bf15      	itete	ne
 8006be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bee:	81a3      	strheq	r3, [r4, #12]
 8006bf0:	bf18      	it	ne
 8006bf2:	81a3      	strhne	r3, [r4, #12]
 8006bf4:	bd10      	pop	{r4, pc}

08006bf6 <__sclose>:
 8006bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfa:	f000 b80d 	b.w	8006c18 <_close_r>

08006bfe <memset>:
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4402      	add	r2, r0
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d100      	bne.n	8006c08 <memset+0xa>
 8006c06:	4770      	bx	lr
 8006c08:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0c:	e7f9      	b.n	8006c02 <memset+0x4>
	...

08006c10 <_localeconv_r>:
 8006c10:	4800      	ldr	r0, [pc, #0]	@ (8006c14 <_localeconv_r+0x4>)
 8006c12:	4770      	bx	lr
 8006c14:	20000114 	.word	0x20000114

08006c18 <_close_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4d05      	ldr	r5, [pc, #20]	@ (8006c34 <_close_r+0x1c>)
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fb f96f 	bl	8001f06 <_close>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_close_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_close_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200004a8 	.word	0x200004a8

08006c38 <_lseek_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	2200      	movs	r2, #0
 8006c42:	4d05      	ldr	r5, [pc, #20]	@ (8006c58 <_lseek_r+0x20>)
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fb f981 	bl	8001f4e <_lseek>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_lseek_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_lseek_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200004a8 	.word	0x200004a8

08006c5c <_read_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	2200      	movs	r2, #0
 8006c66:	4d05      	ldr	r5, [pc, #20]	@ (8006c7c <_read_r+0x20>)
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fb f92e 	bl	8001ecc <_read>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_read_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_read_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200004a8 	.word	0x200004a8

08006c80 <_write_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	4611      	mov	r1, r2
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4d05      	ldr	r5, [pc, #20]	@ (8006ca0 <_write_r+0x20>)
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa fc2e 	bl	80014f0 <_write>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_write_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_write_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200004a8 	.word	0x200004a8

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	@ (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000190 	.word	0x20000190

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	f002 ff26 	bl	8009b10 <_init>
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	0800e808 	.word	0x0800e808
 8006cec:	0800e808 	.word	0x0800e808
 8006cf0:	0800e808 	.word	0x0800e808
 8006cf4:	0800e80c 	.word	0x0800e80c

08006cf8 <__retarget_lock_init_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_acquire_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <__retarget_lock_release_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <memchr>:
 8006cfe:	4603      	mov	r3, r0
 8006d00:	b510      	push	{r4, lr}
 8006d02:	b2c9      	uxtb	r1, r1
 8006d04:	4402      	add	r2, r0
 8006d06:	4293      	cmp	r3, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	d101      	bne.n	8006d10 <memchr+0x12>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e003      	b.n	8006d18 <memchr+0x1a>
 8006d10:	7804      	ldrb	r4, [r0, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	428c      	cmp	r4, r1
 8006d16:	d1f6      	bne.n	8006d06 <memchr+0x8>
 8006d18:	bd10      	pop	{r4, pc}

08006d1a <memcpy>:
 8006d1a:	440a      	add	r2, r1
 8006d1c:	4291      	cmp	r1, r2
 8006d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d22:	d100      	bne.n	8006d26 <memcpy+0xc>
 8006d24:	4770      	bx	lr
 8006d26:	b510      	push	{r4, lr}
 8006d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2c:	4291      	cmp	r1, r2
 8006d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d32:	d1f9      	bne.n	8006d28 <memcpy+0xe>
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <quorem>:
 8006d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6903      	ldr	r3, [r0, #16]
 8006d3c:	690c      	ldr	r4, [r1, #16]
 8006d3e:	4607      	mov	r7, r0
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	db7e      	blt.n	8006e42 <quorem+0x10c>
 8006d44:	3c01      	subs	r4, #1
 8006d46:	00a3      	lsls	r3, r4, #2
 8006d48:	f100 0514 	add.w	r5, r0, #20
 8006d4c:	f101 0814 	add.w	r8, r1, #20
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d60:	3301      	adds	r3, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d6c:	d32e      	bcc.n	8006dcc <quorem+0x96>
 8006d6e:	f04f 0a00 	mov.w	sl, #0
 8006d72:	46c4      	mov	ip, r8
 8006d74:	46ae      	mov	lr, r5
 8006d76:	46d3      	mov	fp, sl
 8006d78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d7c:	b298      	uxth	r0, r3
 8006d7e:	fb06 a000 	mla	r0, r6, r0, sl
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	0c02      	lsrs	r2, r0, #16
 8006d86:	fb06 2303 	mla	r3, r6, r3, r2
 8006d8a:	f8de 2000 	ldr.w	r2, [lr]
 8006d8e:	b280      	uxth	r0, r0
 8006d90:	b292      	uxth	r2, r2
 8006d92:	1a12      	subs	r2, r2, r0
 8006d94:	445a      	add	r2, fp
 8006d96:	f8de 0000 	ldr.w	r0, [lr]
 8006d9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006da4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006da8:	b292      	uxth	r2, r2
 8006daa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dae:	45e1      	cmp	r9, ip
 8006db0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006db4:	f84e 2b04 	str.w	r2, [lr], #4
 8006db8:	d2de      	bcs.n	8006d78 <quorem+0x42>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	58eb      	ldr	r3, [r5, r3]
 8006dbe:	b92b      	cbnz	r3, 8006dcc <quorem+0x96>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	429d      	cmp	r5, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	d32f      	bcc.n	8006e2a <quorem+0xf4>
 8006dca:	613c      	str	r4, [r7, #16]
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f001 f991 	bl	80080f4 <__mcmp>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	db25      	blt.n	8006e22 <quorem+0xec>
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dde:	f8d1 c000 	ldr.w	ip, [r1]
 8006de2:	fa1f fe82 	uxth.w	lr, r2
 8006de6:	fa1f f38c 	uxth.w	r3, ip
 8006dea:	eba3 030e 	sub.w	r3, r3, lr
 8006dee:	4403      	add	r3, r0
 8006df0:	0c12      	lsrs	r2, r2, #16
 8006df2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006df6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e00:	45c1      	cmp	r9, r8
 8006e02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e06:	f841 3b04 	str.w	r3, [r1], #4
 8006e0a:	d2e6      	bcs.n	8006dda <quorem+0xa4>
 8006e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e14:	b922      	cbnz	r2, 8006e20 <quorem+0xea>
 8006e16:	3b04      	subs	r3, #4
 8006e18:	429d      	cmp	r5, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	d30b      	bcc.n	8006e36 <quorem+0x100>
 8006e1e:	613c      	str	r4, [r7, #16]
 8006e20:	3601      	adds	r6, #1
 8006e22:	4630      	mov	r0, r6
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d1cb      	bne.n	8006dca <quorem+0x94>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	e7c6      	b.n	8006dc4 <quorem+0x8e>
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1ef      	bne.n	8006e1e <quorem+0xe8>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7ea      	b.n	8006e18 <quorem+0xe2>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7ee      	b.n	8006e24 <quorem+0xee>
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	69c7      	ldr	r7, [r0, #28]
 8006e52:	b097      	sub	sp, #92	@ 0x5c
 8006e54:	4681      	mov	r9, r0
 8006e56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006e5c:	b97f      	cbnz	r7, 8006e7e <_dtoa_r+0x36>
 8006e5e:	2010      	movs	r0, #16
 8006e60:	f000 fe0e 	bl	8007a80 <malloc>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e6a:	b920      	cbnz	r0, 8006e76 <_dtoa_r+0x2e>
 8006e6c:	21ef      	movs	r1, #239	@ 0xef
 8006e6e:	4bac      	ldr	r3, [pc, #688]	@ (8007120 <_dtoa_r+0x2d8>)
 8006e70:	48ac      	ldr	r0, [pc, #688]	@ (8007124 <_dtoa_r+0x2dc>)
 8006e72:	f001 fb0d 	bl	8008490 <__assert_func>
 8006e76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e7a:	6007      	str	r7, [r0, #0]
 8006e7c:	60c7      	str	r7, [r0, #12]
 8006e7e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	b159      	cbz	r1, 8006e9e <_dtoa_r+0x56>
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4093      	lsls	r3, r2
 8006e8c:	604a      	str	r2, [r1, #4]
 8006e8e:	608b      	str	r3, [r1, #8]
 8006e90:	4648      	mov	r0, r9
 8006e92:	f000 fefd 	bl	8007c90 <_Bfree>
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	1e2b      	subs	r3, r5, #0
 8006ea0:	bfaf      	iteee	ge
 8006ea2:	2300      	movge	r3, #0
 8006ea4:	2201      	movlt	r2, #1
 8006ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eaa:	9307      	strlt	r3, [sp, #28]
 8006eac:	bfa8      	it	ge
 8006eae:	6033      	strge	r3, [r6, #0]
 8006eb0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8007128 <_dtoa_r+0x2e0>)
 8006eb6:	bfb8      	it	lt
 8006eb8:	6032      	strlt	r2, [r6, #0]
 8006eba:	ea33 0308 	bics.w	r3, r3, r8
 8006ebe:	d112      	bne.n	8006ee6 <_dtoa_r+0x9e>
 8006ec0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ec4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	f000 855e 	beq.w	800798e <_dtoa_r+0xb46>
 8006ed2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800712c <_dtoa_r+0x2e4>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8560 	beq.w	800799e <_dtoa_r+0xb56>
 8006ede:	f10a 0303 	add.w	r3, sl, #3
 8006ee2:	f000 bd5a 	b.w	800799a <_dtoa_r+0xb52>
 8006ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f7f9 fdc3 	bl	8000a80 <__aeabi_dcmpeq>
 8006efa:	4607      	mov	r7, r0
 8006efc:	b158      	cbz	r0, 8006f16 <_dtoa_r+0xce>
 8006efe:	2301      	movs	r3, #1
 8006f00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f06:	b113      	cbz	r3, 8006f0e <_dtoa_r+0xc6>
 8006f08:	4b89      	ldr	r3, [pc, #548]	@ (8007130 <_dtoa_r+0x2e8>)
 8006f0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007134 <_dtoa_r+0x2ec>
 8006f12:	f000 bd44 	b.w	800799e <_dtoa_r+0xb56>
 8006f16:	ab14      	add	r3, sp, #80	@ 0x50
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	ab15      	add	r3, sp, #84	@ 0x54
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4648      	mov	r0, r9
 8006f20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f24:	f001 f996 	bl	8008254 <__d2b>
 8006f28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006f2c:	9003      	str	r0, [sp, #12]
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	d078      	beq.n	8007024 <_dtoa_r+0x1dc>
 8006f32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f48:	9712      	str	r7, [sp, #72]	@ 0x48
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007138 <_dtoa_r+0x2f0>)
 8006f50:	f7f9 f976 	bl	8000240 <__aeabi_dsub>
 8006f54:	a36c      	add	r3, pc, #432	@ (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 fb29 	bl	80005b0 <__aeabi_dmul>
 8006f5e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007110 <_dtoa_r+0x2c8>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 f96e 	bl	8000244 <__adddf3>
 8006f68:	4604      	mov	r4, r0
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	460d      	mov	r5, r1
 8006f6e:	f7f9 fab5 	bl	80004dc <__aeabi_i2d>
 8006f72:	a369      	add	r3, pc, #420	@ (adr r3, 8007118 <_dtoa_r+0x2d0>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 fb1a 	bl	80005b0 <__aeabi_dmul>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4620      	mov	r0, r4
 8006f82:	4629      	mov	r1, r5
 8006f84:	f7f9 f95e 	bl	8000244 <__adddf3>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	f7f9 fdc0 	bl	8000b10 <__aeabi_d2iz>
 8006f90:	2200      	movs	r2, #0
 8006f92:	4607      	mov	r7, r0
 8006f94:	2300      	movs	r3, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fd7b 	bl	8000a94 <__aeabi_dcmplt>
 8006f9e:	b140      	cbz	r0, 8006fb2 <_dtoa_r+0x16a>
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7f9 fa9b 	bl	80004dc <__aeabi_i2d>
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	462b      	mov	r3, r5
 8006faa:	f7f9 fd69 	bl	8000a80 <__aeabi_dcmpeq>
 8006fae:	b900      	cbnz	r0, 8006fb2 <_dtoa_r+0x16a>
 8006fb0:	3f01      	subs	r7, #1
 8006fb2:	2f16      	cmp	r7, #22
 8006fb4:	d854      	bhi.n	8007060 <_dtoa_r+0x218>
 8006fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fba:	4b60      	ldr	r3, [pc, #384]	@ (800713c <_dtoa_r+0x2f4>)
 8006fbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 fd66 	bl	8000a94 <__aeabi_dcmplt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d04b      	beq.n	8007064 <_dtoa_r+0x21c>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	3f01      	subs	r7, #1
 8006fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fd4:	1b9b      	subs	r3, r3, r6
 8006fd6:	1e5a      	subs	r2, r3, #1
 8006fd8:	bf49      	itett	mi
 8006fda:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fde:	2300      	movpl	r3, #0
 8006fe0:	9304      	strmi	r3, [sp, #16]
 8006fe2:	2300      	movmi	r3, #0
 8006fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fe6:	bf54      	ite	pl
 8006fe8:	9304      	strpl	r3, [sp, #16]
 8006fea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006fec:	2f00      	cmp	r7, #0
 8006fee:	db3b      	blt.n	8007068 <_dtoa_r+0x220>
 8006ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff2:	970e      	str	r7, [sp, #56]	@ 0x38
 8006ff4:	443b      	add	r3, r7
 8006ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d865      	bhi.n	80070ce <_dtoa_r+0x286>
 8007002:	2b05      	cmp	r3, #5
 8007004:	bfc4      	itt	gt
 8007006:	3b04      	subgt	r3, #4
 8007008:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800700a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800700c:	bfc8      	it	gt
 800700e:	2400      	movgt	r4, #0
 8007010:	f1a3 0302 	sub.w	r3, r3, #2
 8007014:	bfd8      	it	le
 8007016:	2401      	movle	r4, #1
 8007018:	2b03      	cmp	r3, #3
 800701a:	d864      	bhi.n	80070e6 <_dtoa_r+0x29e>
 800701c:	e8df f003 	tbb	[pc, r3]
 8007020:	2c385553 	.word	0x2c385553
 8007024:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007028:	441e      	add	r6, r3
 800702a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800702e:	2b20      	cmp	r3, #32
 8007030:	bfc1      	itttt	gt
 8007032:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007036:	fa08 f803 	lslgt.w	r8, r8, r3
 800703a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800703e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007042:	bfd6      	itet	le
 8007044:	f1c3 0320 	rsble	r3, r3, #32
 8007048:	ea48 0003 	orrgt.w	r0, r8, r3
 800704c:	fa04 f003 	lslle.w	r0, r4, r3
 8007050:	f7f9 fa34 	bl	80004bc <__aeabi_ui2d>
 8007054:	2201      	movs	r2, #1
 8007056:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800705a:	3e01      	subs	r6, #1
 800705c:	9212      	str	r2, [sp, #72]	@ 0x48
 800705e:	e774      	b.n	8006f4a <_dtoa_r+0x102>
 8007060:	2301      	movs	r3, #1
 8007062:	e7b5      	b.n	8006fd0 <_dtoa_r+0x188>
 8007064:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007066:	e7b4      	b.n	8006fd2 <_dtoa_r+0x18a>
 8007068:	9b04      	ldr	r3, [sp, #16]
 800706a:	1bdb      	subs	r3, r3, r7
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	427b      	negs	r3, r7
 8007070:	930a      	str	r3, [sp, #40]	@ 0x28
 8007072:	2300      	movs	r3, #0
 8007074:	930e      	str	r3, [sp, #56]	@ 0x38
 8007076:	e7c1      	b.n	8006ffc <_dtoa_r+0x1b4>
 8007078:	2301      	movs	r3, #1
 800707a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800707e:	eb07 0b03 	add.w	fp, r7, r3
 8007082:	f10b 0301 	add.w	r3, fp, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	9308      	str	r3, [sp, #32]
 800708a:	bfb8      	it	lt
 800708c:	2301      	movlt	r3, #1
 800708e:	e006      	b.n	800709e <_dtoa_r+0x256>
 8007090:	2301      	movs	r3, #1
 8007092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007096:	2b00      	cmp	r3, #0
 8007098:	dd28      	ble.n	80070ec <_dtoa_r+0x2a4>
 800709a:	469b      	mov	fp, r3
 800709c:	9308      	str	r3, [sp, #32]
 800709e:	2100      	movs	r1, #0
 80070a0:	2204      	movs	r2, #4
 80070a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80070a6:	f102 0514 	add.w	r5, r2, #20
 80070aa:	429d      	cmp	r5, r3
 80070ac:	d926      	bls.n	80070fc <_dtoa_r+0x2b4>
 80070ae:	6041      	str	r1, [r0, #4]
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 fdad 	bl	8007c10 <_Balloc>
 80070b6:	4682      	mov	sl, r0
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d143      	bne.n	8007144 <_dtoa_r+0x2fc>
 80070bc:	4602      	mov	r2, r0
 80070be:	f240 11af 	movw	r1, #431	@ 0x1af
 80070c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007140 <_dtoa_r+0x2f8>)
 80070c4:	e6d4      	b.n	8006e70 <_dtoa_r+0x28>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e7e3      	b.n	8007092 <_dtoa_r+0x24a>
 80070ca:	2300      	movs	r3, #0
 80070cc:	e7d5      	b.n	800707a <_dtoa_r+0x232>
 80070ce:	2401      	movs	r4, #1
 80070d0:	2300      	movs	r3, #0
 80070d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80070d6:	f04f 3bff 	mov.w	fp, #4294967295
 80070da:	2200      	movs	r2, #0
 80070dc:	2312      	movs	r3, #18
 80070de:	f8cd b020 	str.w	fp, [sp, #32]
 80070e2:	9221      	str	r2, [sp, #132]	@ 0x84
 80070e4:	e7db      	b.n	800709e <_dtoa_r+0x256>
 80070e6:	2301      	movs	r3, #1
 80070e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ea:	e7f4      	b.n	80070d6 <_dtoa_r+0x28e>
 80070ec:	f04f 0b01 	mov.w	fp, #1
 80070f0:	465b      	mov	r3, fp
 80070f2:	f8cd b020 	str.w	fp, [sp, #32]
 80070f6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80070fa:	e7d0      	b.n	800709e <_dtoa_r+0x256>
 80070fc:	3101      	adds	r1, #1
 80070fe:	0052      	lsls	r2, r2, #1
 8007100:	e7d1      	b.n	80070a6 <_dtoa_r+0x25e>
 8007102:	bf00      	nop
 8007104:	f3af 8000 	nop.w
 8007108:	636f4361 	.word	0x636f4361
 800710c:	3fd287a7 	.word	0x3fd287a7
 8007110:	8b60c8b3 	.word	0x8b60c8b3
 8007114:	3fc68a28 	.word	0x3fc68a28
 8007118:	509f79fb 	.word	0x509f79fb
 800711c:	3fd34413 	.word	0x3fd34413
 8007120:	0800e404 	.word	0x0800e404
 8007124:	0800e41b 	.word	0x0800e41b
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	0800e400 	.word	0x0800e400
 8007130:	0800e3ca 	.word	0x0800e3ca
 8007134:	0800e3c9 	.word	0x0800e3c9
 8007138:	3ff80000 	.word	0x3ff80000
 800713c:	0800e560 	.word	0x0800e560
 8007140:	0800e473 	.word	0x0800e473
 8007144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	2b0e      	cmp	r3, #14
 800714e:	f200 80a1 	bhi.w	8007294 <_dtoa_r+0x44c>
 8007152:	2c00      	cmp	r4, #0
 8007154:	f000 809e 	beq.w	8007294 <_dtoa_r+0x44c>
 8007158:	2f00      	cmp	r7, #0
 800715a:	dd33      	ble.n	80071c4 <_dtoa_r+0x37c>
 800715c:	4b9c      	ldr	r3, [pc, #624]	@ (80073d0 <_dtoa_r+0x588>)
 800715e:	f007 020f 	and.w	r2, r7, #15
 8007162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007166:	05f8      	lsls	r0, r7, #23
 8007168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800716c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007174:	d516      	bpl.n	80071a4 <_dtoa_r+0x35c>
 8007176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800717a:	4b96      	ldr	r3, [pc, #600]	@ (80073d4 <_dtoa_r+0x58c>)
 800717c:	2603      	movs	r6, #3
 800717e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007182:	f7f9 fb3f 	bl	8000804 <__aeabi_ddiv>
 8007186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800718a:	f004 040f 	and.w	r4, r4, #15
 800718e:	4d91      	ldr	r5, [pc, #580]	@ (80073d4 <_dtoa_r+0x58c>)
 8007190:	b954      	cbnz	r4, 80071a8 <_dtoa_r+0x360>
 8007192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719a:	f7f9 fb33 	bl	8000804 <__aeabi_ddiv>
 800719e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071a2:	e028      	b.n	80071f6 <_dtoa_r+0x3ae>
 80071a4:	2602      	movs	r6, #2
 80071a6:	e7f2      	b.n	800718e <_dtoa_r+0x346>
 80071a8:	07e1      	lsls	r1, r4, #31
 80071aa:	d508      	bpl.n	80071be <_dtoa_r+0x376>
 80071ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071b4:	f7f9 f9fc 	bl	80005b0 <__aeabi_dmul>
 80071b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071bc:	3601      	adds	r6, #1
 80071be:	1064      	asrs	r4, r4, #1
 80071c0:	3508      	adds	r5, #8
 80071c2:	e7e5      	b.n	8007190 <_dtoa_r+0x348>
 80071c4:	f000 80af 	beq.w	8007326 <_dtoa_r+0x4de>
 80071c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071cc:	427c      	negs	r4, r7
 80071ce:	4b80      	ldr	r3, [pc, #512]	@ (80073d0 <_dtoa_r+0x588>)
 80071d0:	f004 020f 	and.w	r2, r4, #15
 80071d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 f9e8 	bl	80005b0 <__aeabi_dmul>
 80071e0:	2602      	movs	r6, #2
 80071e2:	2300      	movs	r3, #0
 80071e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071e8:	4d7a      	ldr	r5, [pc, #488]	@ (80073d4 <_dtoa_r+0x58c>)
 80071ea:	1124      	asrs	r4, r4, #4
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	f040 808f 	bne.w	8007310 <_dtoa_r+0x4c8>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1d3      	bne.n	800719e <_dtoa_r+0x356>
 80071f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80071fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8094 	beq.w	800732a <_dtoa_r+0x4e2>
 8007202:	2200      	movs	r2, #0
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	4b73      	ldr	r3, [pc, #460]	@ (80073d8 <_dtoa_r+0x590>)
 800720a:	f7f9 fc43 	bl	8000a94 <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	f000 808b 	beq.w	800732a <_dtoa_r+0x4e2>
 8007214:	9b08      	ldr	r3, [sp, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8087 	beq.w	800732a <_dtoa_r+0x4e2>
 800721c:	f1bb 0f00 	cmp.w	fp, #0
 8007220:	dd34      	ble.n	800728c <_dtoa_r+0x444>
 8007222:	4620      	mov	r0, r4
 8007224:	2200      	movs	r2, #0
 8007226:	4629      	mov	r1, r5
 8007228:	4b6c      	ldr	r3, [pc, #432]	@ (80073dc <_dtoa_r+0x594>)
 800722a:	f7f9 f9c1 	bl	80005b0 <__aeabi_dmul>
 800722e:	465c      	mov	r4, fp
 8007230:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007234:	f107 38ff 	add.w	r8, r7, #4294967295
 8007238:	3601      	adds	r6, #1
 800723a:	4630      	mov	r0, r6
 800723c:	f7f9 f94e 	bl	80004dc <__aeabi_i2d>
 8007240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007244:	f7f9 f9b4 	bl	80005b0 <__aeabi_dmul>
 8007248:	2200      	movs	r2, #0
 800724a:	4b65      	ldr	r3, [pc, #404]	@ (80073e0 <_dtoa_r+0x598>)
 800724c:	f7f8 fffa 	bl	8000244 <__adddf3>
 8007250:	4605      	mov	r5, r0
 8007252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007256:	2c00      	cmp	r4, #0
 8007258:	d16a      	bne.n	8007330 <_dtoa_r+0x4e8>
 800725a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800725e:	2200      	movs	r2, #0
 8007260:	4b60      	ldr	r3, [pc, #384]	@ (80073e4 <_dtoa_r+0x59c>)
 8007262:	f7f8 ffed 	bl	8000240 <__aeabi_dsub>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800726e:	462a      	mov	r2, r5
 8007270:	4633      	mov	r3, r6
 8007272:	f7f9 fc2d 	bl	8000ad0 <__aeabi_dcmpgt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8298 	bne.w	80077ac <_dtoa_r+0x964>
 800727c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007280:	462a      	mov	r2, r5
 8007282:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007286:	f7f9 fc05 	bl	8000a94 <__aeabi_dcmplt>
 800728a:	bb38      	cbnz	r0, 80072dc <_dtoa_r+0x494>
 800728c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007290:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007296:	2b00      	cmp	r3, #0
 8007298:	f2c0 8157 	blt.w	800754a <_dtoa_r+0x702>
 800729c:	2f0e      	cmp	r7, #14
 800729e:	f300 8154 	bgt.w	800754a <_dtoa_r+0x702>
 80072a2:	4b4b      	ldr	r3, [pc, #300]	@ (80073d0 <_dtoa_r+0x588>)
 80072a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f280 80e5 	bge.w	8007482 <_dtoa_r+0x63a>
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f300 80e1 	bgt.w	8007482 <_dtoa_r+0x63a>
 80072c0:	d10c      	bne.n	80072dc <_dtoa_r+0x494>
 80072c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c6:	2200      	movs	r2, #0
 80072c8:	4b46      	ldr	r3, [pc, #280]	@ (80073e4 <_dtoa_r+0x59c>)
 80072ca:	f7f9 f971 	bl	80005b0 <__aeabi_dmul>
 80072ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d2:	f7f9 fbf3 	bl	8000abc <__aeabi_dcmpge>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f000 8266 	beq.w	80077a8 <_dtoa_r+0x960>
 80072dc:	2400      	movs	r4, #0
 80072de:	4625      	mov	r5, r4
 80072e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072e2:	4656      	mov	r6, sl
 80072e4:	ea6f 0803 	mvn.w	r8, r3
 80072e8:	2700      	movs	r7, #0
 80072ea:	4621      	mov	r1, r4
 80072ec:	4648      	mov	r0, r9
 80072ee:	f000 fccf 	bl	8007c90 <_Bfree>
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	f000 80bd 	beq.w	8007472 <_dtoa_r+0x62a>
 80072f8:	b12f      	cbz	r7, 8007306 <_dtoa_r+0x4be>
 80072fa:	42af      	cmp	r7, r5
 80072fc:	d003      	beq.n	8007306 <_dtoa_r+0x4be>
 80072fe:	4639      	mov	r1, r7
 8007300:	4648      	mov	r0, r9
 8007302:	f000 fcc5 	bl	8007c90 <_Bfree>
 8007306:	4629      	mov	r1, r5
 8007308:	4648      	mov	r0, r9
 800730a:	f000 fcc1 	bl	8007c90 <_Bfree>
 800730e:	e0b0      	b.n	8007472 <_dtoa_r+0x62a>
 8007310:	07e2      	lsls	r2, r4, #31
 8007312:	d505      	bpl.n	8007320 <_dtoa_r+0x4d8>
 8007314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007318:	f7f9 f94a 	bl	80005b0 <__aeabi_dmul>
 800731c:	2301      	movs	r3, #1
 800731e:	3601      	adds	r6, #1
 8007320:	1064      	asrs	r4, r4, #1
 8007322:	3508      	adds	r5, #8
 8007324:	e762      	b.n	80071ec <_dtoa_r+0x3a4>
 8007326:	2602      	movs	r6, #2
 8007328:	e765      	b.n	80071f6 <_dtoa_r+0x3ae>
 800732a:	46b8      	mov	r8, r7
 800732c:	9c08      	ldr	r4, [sp, #32]
 800732e:	e784      	b.n	800723a <_dtoa_r+0x3f2>
 8007330:	4b27      	ldr	r3, [pc, #156]	@ (80073d0 <_dtoa_r+0x588>)
 8007332:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800733c:	4454      	add	r4, sl
 800733e:	2900      	cmp	r1, #0
 8007340:	d054      	beq.n	80073ec <_dtoa_r+0x5a4>
 8007342:	2000      	movs	r0, #0
 8007344:	4928      	ldr	r1, [pc, #160]	@ (80073e8 <_dtoa_r+0x5a0>)
 8007346:	f7f9 fa5d 	bl	8000804 <__aeabi_ddiv>
 800734a:	4633      	mov	r3, r6
 800734c:	462a      	mov	r2, r5
 800734e:	f7f8 ff77 	bl	8000240 <__aeabi_dsub>
 8007352:	4656      	mov	r6, sl
 8007354:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800735c:	f7f9 fbd8 	bl	8000b10 <__aeabi_d2iz>
 8007360:	4605      	mov	r5, r0
 8007362:	f7f9 f8bb 	bl	80004dc <__aeabi_i2d>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800736e:	f7f8 ff67 	bl	8000240 <__aeabi_dsub>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	3530      	adds	r5, #48	@ 0x30
 8007378:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800737c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007380:	f806 5b01 	strb.w	r5, [r6], #1
 8007384:	f7f9 fb86 	bl	8000a94 <__aeabi_dcmplt>
 8007388:	2800      	cmp	r0, #0
 800738a:	d172      	bne.n	8007472 <_dtoa_r+0x62a>
 800738c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007390:	2000      	movs	r0, #0
 8007392:	4911      	ldr	r1, [pc, #68]	@ (80073d8 <_dtoa_r+0x590>)
 8007394:	f7f8 ff54 	bl	8000240 <__aeabi_dsub>
 8007398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800739c:	f7f9 fb7a 	bl	8000a94 <__aeabi_dcmplt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f040 80b4 	bne.w	800750e <_dtoa_r+0x6c6>
 80073a6:	42a6      	cmp	r6, r4
 80073a8:	f43f af70 	beq.w	800728c <_dtoa_r+0x444>
 80073ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073b0:	2200      	movs	r2, #0
 80073b2:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <_dtoa_r+0x594>)
 80073b4:	f7f9 f8fc 	bl	80005b0 <__aeabi_dmul>
 80073b8:	2200      	movs	r2, #0
 80073ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <_dtoa_r+0x594>)
 80073c4:	f7f9 f8f4 	bl	80005b0 <__aeabi_dmul>
 80073c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073cc:	e7c4      	b.n	8007358 <_dtoa_r+0x510>
 80073ce:	bf00      	nop
 80073d0:	0800e560 	.word	0x0800e560
 80073d4:	0800e538 	.word	0x0800e538
 80073d8:	3ff00000 	.word	0x3ff00000
 80073dc:	40240000 	.word	0x40240000
 80073e0:	401c0000 	.word	0x401c0000
 80073e4:	40140000 	.word	0x40140000
 80073e8:	3fe00000 	.word	0x3fe00000
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7f9 f8de 	bl	80005b0 <__aeabi_dmul>
 80073f4:	4656      	mov	r6, sl
 80073f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007400:	f7f9 fb86 	bl	8000b10 <__aeabi_d2iz>
 8007404:	4605      	mov	r5, r0
 8007406:	f7f9 f869 	bl	80004dc <__aeabi_i2d>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007412:	f7f8 ff15 	bl	8000240 <__aeabi_dsub>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	3530      	adds	r5, #48	@ 0x30
 800741c:	f806 5b01 	strb.w	r5, [r6], #1
 8007420:	42a6      	cmp	r6, r4
 8007422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	d124      	bne.n	8007476 <_dtoa_r+0x62e>
 800742c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007430:	4bae      	ldr	r3, [pc, #696]	@ (80076ec <_dtoa_r+0x8a4>)
 8007432:	f7f8 ff07 	bl	8000244 <__adddf3>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800743e:	f7f9 fb47 	bl	8000ad0 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d163      	bne.n	800750e <_dtoa_r+0x6c6>
 8007446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800744a:	2000      	movs	r0, #0
 800744c:	49a7      	ldr	r1, [pc, #668]	@ (80076ec <_dtoa_r+0x8a4>)
 800744e:	f7f8 fef7 	bl	8000240 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745a:	f7f9 fb1b 	bl	8000a94 <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f af14 	beq.w	800728c <_dtoa_r+0x444>
 8007464:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007466:	1e73      	subs	r3, r6, #1
 8007468:	9313      	str	r3, [sp, #76]	@ 0x4c
 800746a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800746e:	2b30      	cmp	r3, #48	@ 0x30
 8007470:	d0f8      	beq.n	8007464 <_dtoa_r+0x61c>
 8007472:	4647      	mov	r7, r8
 8007474:	e03b      	b.n	80074ee <_dtoa_r+0x6a6>
 8007476:	4b9e      	ldr	r3, [pc, #632]	@ (80076f0 <_dtoa_r+0x8a8>)
 8007478:	f7f9 f89a 	bl	80005b0 <__aeabi_dmul>
 800747c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007480:	e7bc      	b.n	80073fc <_dtoa_r+0x5b4>
 8007482:	4656      	mov	r6, sl
 8007484:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748c:	4620      	mov	r0, r4
 800748e:	4629      	mov	r1, r5
 8007490:	f7f9 f9b8 	bl	8000804 <__aeabi_ddiv>
 8007494:	f7f9 fb3c 	bl	8000b10 <__aeabi_d2iz>
 8007498:	4680      	mov	r8, r0
 800749a:	f7f9 f81f 	bl	80004dc <__aeabi_i2d>
 800749e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a2:	f7f9 f885 	bl	80005b0 <__aeabi_dmul>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f8 fec7 	bl	8000240 <__aeabi_dsub>
 80074b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074b6:	9d08      	ldr	r5, [sp, #32]
 80074b8:	f806 4b01 	strb.w	r4, [r6], #1
 80074bc:	eba6 040a 	sub.w	r4, r6, sl
 80074c0:	42a5      	cmp	r5, r4
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	d133      	bne.n	8007530 <_dtoa_r+0x6e8>
 80074c8:	f7f8 febc 	bl	8000244 <__adddf3>
 80074cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074d0:	4604      	mov	r4, r0
 80074d2:	460d      	mov	r5, r1
 80074d4:	f7f9 fafc 	bl	8000ad0 <__aeabi_dcmpgt>
 80074d8:	b9c0      	cbnz	r0, 800750c <_dtoa_r+0x6c4>
 80074da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 facd 	bl	8000a80 <__aeabi_dcmpeq>
 80074e6:	b110      	cbz	r0, 80074ee <_dtoa_r+0x6a6>
 80074e8:	f018 0f01 	tst.w	r8, #1
 80074ec:	d10e      	bne.n	800750c <_dtoa_r+0x6c4>
 80074ee:	4648      	mov	r0, r9
 80074f0:	9903      	ldr	r1, [sp, #12]
 80074f2:	f000 fbcd 	bl	8007c90 <_Bfree>
 80074f6:	2300      	movs	r3, #0
 80074f8:	7033      	strb	r3, [r6, #0]
 80074fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074fc:	3701      	adds	r7, #1
 80074fe:	601f      	str	r7, [r3, #0]
 8007500:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 824b 	beq.w	800799e <_dtoa_r+0xb56>
 8007508:	601e      	str	r6, [r3, #0]
 800750a:	e248      	b.n	800799e <_dtoa_r+0xb56>
 800750c:	46b8      	mov	r8, r7
 800750e:	4633      	mov	r3, r6
 8007510:	461e      	mov	r6, r3
 8007512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007516:	2a39      	cmp	r2, #57	@ 0x39
 8007518:	d106      	bne.n	8007528 <_dtoa_r+0x6e0>
 800751a:	459a      	cmp	sl, r3
 800751c:	d1f8      	bne.n	8007510 <_dtoa_r+0x6c8>
 800751e:	2230      	movs	r2, #48	@ 0x30
 8007520:	f108 0801 	add.w	r8, r8, #1
 8007524:	f88a 2000 	strb.w	r2, [sl]
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	3201      	adds	r2, #1
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e7a0      	b.n	8007472 <_dtoa_r+0x62a>
 8007530:	2200      	movs	r2, #0
 8007532:	4b6f      	ldr	r3, [pc, #444]	@ (80076f0 <_dtoa_r+0x8a8>)
 8007534:	f7f9 f83c 	bl	80005b0 <__aeabi_dmul>
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	f7f9 fa9e 	bl	8000a80 <__aeabi_dcmpeq>
 8007544:	2800      	cmp	r0, #0
 8007546:	d09f      	beq.n	8007488 <_dtoa_r+0x640>
 8007548:	e7d1      	b.n	80074ee <_dtoa_r+0x6a6>
 800754a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800754c:	2a00      	cmp	r2, #0
 800754e:	f000 80ea 	beq.w	8007726 <_dtoa_r+0x8de>
 8007552:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007554:	2a01      	cmp	r2, #1
 8007556:	f300 80cd 	bgt.w	80076f4 <_dtoa_r+0x8ac>
 800755a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800755c:	2a00      	cmp	r2, #0
 800755e:	f000 80c1 	beq.w	80076e4 <_dtoa_r+0x89c>
 8007562:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007566:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007568:	9e04      	ldr	r6, [sp, #16]
 800756a:	9a04      	ldr	r2, [sp, #16]
 800756c:	2101      	movs	r1, #1
 800756e:	441a      	add	r2, r3
 8007570:	9204      	str	r2, [sp, #16]
 8007572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007574:	4648      	mov	r0, r9
 8007576:	441a      	add	r2, r3
 8007578:	9209      	str	r2, [sp, #36]	@ 0x24
 800757a:	f000 fc3d 	bl	8007df8 <__i2b>
 800757e:	4605      	mov	r5, r0
 8007580:	b166      	cbz	r6, 800759c <_dtoa_r+0x754>
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd09      	ble.n	800759c <_dtoa_r+0x754>
 8007588:	42b3      	cmp	r3, r6
 800758a:	bfa8      	it	ge
 800758c:	4633      	movge	r3, r6
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	1af6      	subs	r6, r6, r3
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	9204      	str	r2, [sp, #16]
 8007596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	9309      	str	r3, [sp, #36]	@ 0x24
 800759c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800759e:	b30b      	cbz	r3, 80075e4 <_dtoa_r+0x79c>
 80075a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80c6 	beq.w	8007734 <_dtoa_r+0x8ec>
 80075a8:	2c00      	cmp	r4, #0
 80075aa:	f000 80c0 	beq.w	800772e <_dtoa_r+0x8e6>
 80075ae:	4629      	mov	r1, r5
 80075b0:	4622      	mov	r2, r4
 80075b2:	4648      	mov	r0, r9
 80075b4:	f000 fcd8 	bl	8007f68 <__pow5mult>
 80075b8:	9a03      	ldr	r2, [sp, #12]
 80075ba:	4601      	mov	r1, r0
 80075bc:	4605      	mov	r5, r0
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 fc30 	bl	8007e24 <__multiply>
 80075c4:	9903      	ldr	r1, [sp, #12]
 80075c6:	4680      	mov	r8, r0
 80075c8:	4648      	mov	r0, r9
 80075ca:	f000 fb61 	bl	8007c90 <_Bfree>
 80075ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d0:	1b1b      	subs	r3, r3, r4
 80075d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d4:	f000 80b1 	beq.w	800773a <_dtoa_r+0x8f2>
 80075d8:	4641      	mov	r1, r8
 80075da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075dc:	4648      	mov	r0, r9
 80075de:	f000 fcc3 	bl	8007f68 <__pow5mult>
 80075e2:	9003      	str	r0, [sp, #12]
 80075e4:	2101      	movs	r1, #1
 80075e6:	4648      	mov	r0, r9
 80075e8:	f000 fc06 	bl	8007df8 <__i2b>
 80075ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ee:	4604      	mov	r4, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 81d8 	beq.w	80079a6 <_dtoa_r+0xb5e>
 80075f6:	461a      	mov	r2, r3
 80075f8:	4601      	mov	r1, r0
 80075fa:	4648      	mov	r0, r9
 80075fc:	f000 fcb4 	bl	8007f68 <__pow5mult>
 8007600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007602:	4604      	mov	r4, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	f300 809f 	bgt.w	8007748 <_dtoa_r+0x900>
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8097 	bne.w	8007740 <_dtoa_r+0x8f8>
 8007612:	9b07      	ldr	r3, [sp, #28]
 8007614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 8093 	bne.w	8007744 <_dtoa_r+0x8fc>
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007624:	0d1b      	lsrs	r3, r3, #20
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	b133      	cbz	r3, 8007638 <_dtoa_r+0x7f0>
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	3301      	adds	r3, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007632:	3301      	adds	r3, #1
 8007634:	9309      	str	r3, [sp, #36]	@ 0x24
 8007636:	2301      	movs	r3, #1
 8007638:	930a      	str	r3, [sp, #40]	@ 0x28
 800763a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 81b8 	beq.w	80079b2 <_dtoa_r+0xb6a>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007648:	6918      	ldr	r0, [r3, #16]
 800764a:	f000 fb89 	bl	8007d60 <__hi0bits>
 800764e:	f1c0 0020 	rsb	r0, r0, #32
 8007652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007654:	4418      	add	r0, r3
 8007656:	f010 001f 	ands.w	r0, r0, #31
 800765a:	f000 8082 	beq.w	8007762 <_dtoa_r+0x91a>
 800765e:	f1c0 0320 	rsb	r3, r0, #32
 8007662:	2b04      	cmp	r3, #4
 8007664:	dd73      	ble.n	800774e <_dtoa_r+0x906>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	f1c0 001c 	rsb	r0, r0, #28
 800766c:	4403      	add	r3, r0
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	4406      	add	r6, r0
 8007674:	4403      	add	r3, r0
 8007676:	9309      	str	r3, [sp, #36]	@ 0x24
 8007678:	9b04      	ldr	r3, [sp, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dd05      	ble.n	800768a <_dtoa_r+0x842>
 800767e:	461a      	mov	r2, r3
 8007680:	4648      	mov	r0, r9
 8007682:	9903      	ldr	r1, [sp, #12]
 8007684:	f000 fcca 	bl	800801c <__lshift>
 8007688:	9003      	str	r0, [sp, #12]
 800768a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd05      	ble.n	800769c <_dtoa_r+0x854>
 8007690:	4621      	mov	r1, r4
 8007692:	461a      	mov	r2, r3
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fcc1 	bl	800801c <__lshift>
 800769a:	4604      	mov	r4, r0
 800769c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d061      	beq.n	8007766 <_dtoa_r+0x91e>
 80076a2:	4621      	mov	r1, r4
 80076a4:	9803      	ldr	r0, [sp, #12]
 80076a6:	f000 fd25 	bl	80080f4 <__mcmp>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	da5b      	bge.n	8007766 <_dtoa_r+0x91e>
 80076ae:	2300      	movs	r3, #0
 80076b0:	220a      	movs	r2, #10
 80076b2:	4648      	mov	r0, r9
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	f000 fb0d 	bl	8007cd4 <__multadd>
 80076ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80076c0:	9003      	str	r0, [sp, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8177 	beq.w	80079b6 <_dtoa_r+0xb6e>
 80076c8:	4629      	mov	r1, r5
 80076ca:	2300      	movs	r3, #0
 80076cc:	220a      	movs	r2, #10
 80076ce:	4648      	mov	r0, r9
 80076d0:	f000 fb00 	bl	8007cd4 <__multadd>
 80076d4:	f1bb 0f00 	cmp.w	fp, #0
 80076d8:	4605      	mov	r5, r0
 80076da:	dc6f      	bgt.n	80077bc <_dtoa_r+0x974>
 80076dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076de:	2b02      	cmp	r3, #2
 80076e0:	dc49      	bgt.n	8007776 <_dtoa_r+0x92e>
 80076e2:	e06b      	b.n	80077bc <_dtoa_r+0x974>
 80076e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076ea:	e73c      	b.n	8007566 <_dtoa_r+0x71e>
 80076ec:	3fe00000 	.word	0x3fe00000
 80076f0:	40240000 	.word	0x40240000
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	1e5c      	subs	r4, r3, #1
 80076f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	db09      	blt.n	8007712 <_dtoa_r+0x8ca>
 80076fe:	1b1c      	subs	r4, r3, r4
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f6bf af30 	bge.w	8007568 <_dtoa_r+0x720>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	9a08      	ldr	r2, [sp, #32]
 800770c:	1a9e      	subs	r6, r3, r2
 800770e:	2300      	movs	r3, #0
 8007710:	e72b      	b.n	800756a <_dtoa_r+0x722>
 8007712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007716:	1ae3      	subs	r3, r4, r3
 8007718:	441a      	add	r2, r3
 800771a:	940a      	str	r4, [sp, #40]	@ 0x28
 800771c:	9e04      	ldr	r6, [sp, #16]
 800771e:	2400      	movs	r4, #0
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	920e      	str	r2, [sp, #56]	@ 0x38
 8007724:	e721      	b.n	800756a <_dtoa_r+0x722>
 8007726:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007728:	9e04      	ldr	r6, [sp, #16]
 800772a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800772c:	e728      	b.n	8007580 <_dtoa_r+0x738>
 800772e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007732:	e751      	b.n	80075d8 <_dtoa_r+0x790>
 8007734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007736:	9903      	ldr	r1, [sp, #12]
 8007738:	e750      	b.n	80075dc <_dtoa_r+0x794>
 800773a:	f8cd 800c 	str.w	r8, [sp, #12]
 800773e:	e751      	b.n	80075e4 <_dtoa_r+0x79c>
 8007740:	2300      	movs	r3, #0
 8007742:	e779      	b.n	8007638 <_dtoa_r+0x7f0>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	e777      	b.n	8007638 <_dtoa_r+0x7f0>
 8007748:	2300      	movs	r3, #0
 800774a:	930a      	str	r3, [sp, #40]	@ 0x28
 800774c:	e779      	b.n	8007642 <_dtoa_r+0x7fa>
 800774e:	d093      	beq.n	8007678 <_dtoa_r+0x830>
 8007750:	9a04      	ldr	r2, [sp, #16]
 8007752:	331c      	adds	r3, #28
 8007754:	441a      	add	r2, r3
 8007756:	9204      	str	r2, [sp, #16]
 8007758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775a:	441e      	add	r6, r3
 800775c:	441a      	add	r2, r3
 800775e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007760:	e78a      	b.n	8007678 <_dtoa_r+0x830>
 8007762:	4603      	mov	r3, r0
 8007764:	e7f4      	b.n	8007750 <_dtoa_r+0x908>
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	46b8      	mov	r8, r7
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc20      	bgt.n	80077b0 <_dtoa_r+0x968>
 800776e:	469b      	mov	fp, r3
 8007770:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007772:	2b02      	cmp	r3, #2
 8007774:	dd1e      	ble.n	80077b4 <_dtoa_r+0x96c>
 8007776:	f1bb 0f00 	cmp.w	fp, #0
 800777a:	f47f adb1 	bne.w	80072e0 <_dtoa_r+0x498>
 800777e:	4621      	mov	r1, r4
 8007780:	465b      	mov	r3, fp
 8007782:	2205      	movs	r2, #5
 8007784:	4648      	mov	r0, r9
 8007786:	f000 faa5 	bl	8007cd4 <__multadd>
 800778a:	4601      	mov	r1, r0
 800778c:	4604      	mov	r4, r0
 800778e:	9803      	ldr	r0, [sp, #12]
 8007790:	f000 fcb0 	bl	80080f4 <__mcmp>
 8007794:	2800      	cmp	r0, #0
 8007796:	f77f ada3 	ble.w	80072e0 <_dtoa_r+0x498>
 800779a:	4656      	mov	r6, sl
 800779c:	2331      	movs	r3, #49	@ 0x31
 800779e:	f108 0801 	add.w	r8, r8, #1
 80077a2:	f806 3b01 	strb.w	r3, [r6], #1
 80077a6:	e59f      	b.n	80072e8 <_dtoa_r+0x4a0>
 80077a8:	46b8      	mov	r8, r7
 80077aa:	9c08      	ldr	r4, [sp, #32]
 80077ac:	4625      	mov	r5, r4
 80077ae:	e7f4      	b.n	800779a <_dtoa_r+0x952>
 80077b0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80077b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8101 	beq.w	80079be <_dtoa_r+0xb76>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dd05      	ble.n	80077cc <_dtoa_r+0x984>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4632      	mov	r2, r6
 80077c4:	4648      	mov	r0, r9
 80077c6:	f000 fc29 	bl	800801c <__lshift>
 80077ca:	4605      	mov	r5, r0
 80077cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05c      	beq.n	800788c <_dtoa_r+0xa44>
 80077d2:	4648      	mov	r0, r9
 80077d4:	6869      	ldr	r1, [r5, #4]
 80077d6:	f000 fa1b 	bl	8007c10 <_Balloc>
 80077da:	4606      	mov	r6, r0
 80077dc:	b928      	cbnz	r0, 80077ea <_dtoa_r+0x9a2>
 80077de:	4602      	mov	r2, r0
 80077e0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077e4:	4b80      	ldr	r3, [pc, #512]	@ (80079e8 <_dtoa_r+0xba0>)
 80077e6:	f7ff bb43 	b.w	8006e70 <_dtoa_r+0x28>
 80077ea:	692a      	ldr	r2, [r5, #16]
 80077ec:	f105 010c 	add.w	r1, r5, #12
 80077f0:	3202      	adds	r2, #2
 80077f2:	0092      	lsls	r2, r2, #2
 80077f4:	300c      	adds	r0, #12
 80077f6:	f7ff fa90 	bl	8006d1a <memcpy>
 80077fa:	2201      	movs	r2, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4648      	mov	r0, r9
 8007800:	f000 fc0c 	bl	800801c <__lshift>
 8007804:	462f      	mov	r7, r5
 8007806:	4605      	mov	r5, r0
 8007808:	f10a 0301 	add.w	r3, sl, #1
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	eb0a 030b 	add.w	r3, sl, fp
 8007812:	930a      	str	r3, [sp, #40]	@ 0x28
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	9309      	str	r3, [sp, #36]	@ 0x24
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	4621      	mov	r1, r4
 8007820:	9803      	ldr	r0, [sp, #12]
 8007822:	f103 3bff 	add.w	fp, r3, #4294967295
 8007826:	f7ff fa86 	bl	8006d36 <quorem>
 800782a:	4603      	mov	r3, r0
 800782c:	4639      	mov	r1, r7
 800782e:	3330      	adds	r3, #48	@ 0x30
 8007830:	9006      	str	r0, [sp, #24]
 8007832:	9803      	ldr	r0, [sp, #12]
 8007834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007836:	f000 fc5d 	bl	80080f4 <__mcmp>
 800783a:	462a      	mov	r2, r5
 800783c:	9008      	str	r0, [sp, #32]
 800783e:	4621      	mov	r1, r4
 8007840:	4648      	mov	r0, r9
 8007842:	f000 fc73 	bl	800812c <__mdiff>
 8007846:	68c2      	ldr	r2, [r0, #12]
 8007848:	4606      	mov	r6, r0
 800784a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800784c:	bb02      	cbnz	r2, 8007890 <_dtoa_r+0xa48>
 800784e:	4601      	mov	r1, r0
 8007850:	9803      	ldr	r0, [sp, #12]
 8007852:	f000 fc4f 	bl	80080f4 <__mcmp>
 8007856:	4602      	mov	r2, r0
 8007858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800785a:	4631      	mov	r1, r6
 800785c:	4648      	mov	r0, r9
 800785e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007862:	f000 fa15 	bl	8007c90 <_Bfree>
 8007866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800786a:	9e04      	ldr	r6, [sp, #16]
 800786c:	ea42 0103 	orr.w	r1, r2, r3
 8007870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007872:	4319      	orrs	r1, r3
 8007874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007876:	d10d      	bne.n	8007894 <_dtoa_r+0xa4c>
 8007878:	2b39      	cmp	r3, #57	@ 0x39
 800787a:	d027      	beq.n	80078cc <_dtoa_r+0xa84>
 800787c:	9a08      	ldr	r2, [sp, #32]
 800787e:	2a00      	cmp	r2, #0
 8007880:	dd01      	ble.n	8007886 <_dtoa_r+0xa3e>
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	3331      	adds	r3, #49	@ 0x31
 8007886:	f88b 3000 	strb.w	r3, [fp]
 800788a:	e52e      	b.n	80072ea <_dtoa_r+0x4a2>
 800788c:	4628      	mov	r0, r5
 800788e:	e7b9      	b.n	8007804 <_dtoa_r+0x9bc>
 8007890:	2201      	movs	r2, #1
 8007892:	e7e2      	b.n	800785a <_dtoa_r+0xa12>
 8007894:	9908      	ldr	r1, [sp, #32]
 8007896:	2900      	cmp	r1, #0
 8007898:	db04      	blt.n	80078a4 <_dtoa_r+0xa5c>
 800789a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800789c:	4301      	orrs	r1, r0
 800789e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078a0:	4301      	orrs	r1, r0
 80078a2:	d120      	bne.n	80078e6 <_dtoa_r+0xa9e>
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	ddee      	ble.n	8007886 <_dtoa_r+0xa3e>
 80078a8:	2201      	movs	r2, #1
 80078aa:	9903      	ldr	r1, [sp, #12]
 80078ac:	4648      	mov	r0, r9
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	f000 fbb4 	bl	800801c <__lshift>
 80078b4:	4621      	mov	r1, r4
 80078b6:	9003      	str	r0, [sp, #12]
 80078b8:	f000 fc1c 	bl	80080f4 <__mcmp>
 80078bc:	2800      	cmp	r0, #0
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	dc02      	bgt.n	80078c8 <_dtoa_r+0xa80>
 80078c2:	d1e0      	bne.n	8007886 <_dtoa_r+0xa3e>
 80078c4:	07da      	lsls	r2, r3, #31
 80078c6:	d5de      	bpl.n	8007886 <_dtoa_r+0xa3e>
 80078c8:	2b39      	cmp	r3, #57	@ 0x39
 80078ca:	d1da      	bne.n	8007882 <_dtoa_r+0xa3a>
 80078cc:	2339      	movs	r3, #57	@ 0x39
 80078ce:	f88b 3000 	strb.w	r3, [fp]
 80078d2:	4633      	mov	r3, r6
 80078d4:	461e      	mov	r6, r3
 80078d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078da:	3b01      	subs	r3, #1
 80078dc:	2a39      	cmp	r2, #57	@ 0x39
 80078de:	d04e      	beq.n	800797e <_dtoa_r+0xb36>
 80078e0:	3201      	adds	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e501      	b.n	80072ea <_dtoa_r+0x4a2>
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	dd03      	ble.n	80078f2 <_dtoa_r+0xaaa>
 80078ea:	2b39      	cmp	r3, #57	@ 0x39
 80078ec:	d0ee      	beq.n	80078cc <_dtoa_r+0xa84>
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7c9      	b.n	8007886 <_dtoa_r+0xa3e>
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078fa:	428a      	cmp	r2, r1
 80078fc:	d028      	beq.n	8007950 <_dtoa_r+0xb08>
 80078fe:	2300      	movs	r3, #0
 8007900:	220a      	movs	r2, #10
 8007902:	9903      	ldr	r1, [sp, #12]
 8007904:	4648      	mov	r0, r9
 8007906:	f000 f9e5 	bl	8007cd4 <__multadd>
 800790a:	42af      	cmp	r7, r5
 800790c:	9003      	str	r0, [sp, #12]
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	f04f 020a 	mov.w	r2, #10
 8007916:	4639      	mov	r1, r7
 8007918:	4648      	mov	r0, r9
 800791a:	d107      	bne.n	800792c <_dtoa_r+0xae4>
 800791c:	f000 f9da 	bl	8007cd4 <__multadd>
 8007920:	4607      	mov	r7, r0
 8007922:	4605      	mov	r5, r0
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	3301      	adds	r3, #1
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	e777      	b.n	800781c <_dtoa_r+0x9d4>
 800792c:	f000 f9d2 	bl	8007cd4 <__multadd>
 8007930:	4629      	mov	r1, r5
 8007932:	4607      	mov	r7, r0
 8007934:	2300      	movs	r3, #0
 8007936:	220a      	movs	r2, #10
 8007938:	4648      	mov	r0, r9
 800793a:	f000 f9cb 	bl	8007cd4 <__multadd>
 800793e:	4605      	mov	r5, r0
 8007940:	e7f0      	b.n	8007924 <_dtoa_r+0xadc>
 8007942:	f1bb 0f00 	cmp.w	fp, #0
 8007946:	bfcc      	ite	gt
 8007948:	465e      	movgt	r6, fp
 800794a:	2601      	movle	r6, #1
 800794c:	2700      	movs	r7, #0
 800794e:	4456      	add	r6, sl
 8007950:	2201      	movs	r2, #1
 8007952:	9903      	ldr	r1, [sp, #12]
 8007954:	4648      	mov	r0, r9
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	f000 fb60 	bl	800801c <__lshift>
 800795c:	4621      	mov	r1, r4
 800795e:	9003      	str	r0, [sp, #12]
 8007960:	f000 fbc8 	bl	80080f4 <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	dcb4      	bgt.n	80078d2 <_dtoa_r+0xa8a>
 8007968:	d102      	bne.n	8007970 <_dtoa_r+0xb28>
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	07db      	lsls	r3, r3, #31
 800796e:	d4b0      	bmi.n	80078d2 <_dtoa_r+0xa8a>
 8007970:	4633      	mov	r3, r6
 8007972:	461e      	mov	r6, r3
 8007974:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007978:	2a30      	cmp	r2, #48	@ 0x30
 800797a:	d0fa      	beq.n	8007972 <_dtoa_r+0xb2a>
 800797c:	e4b5      	b.n	80072ea <_dtoa_r+0x4a2>
 800797e:	459a      	cmp	sl, r3
 8007980:	d1a8      	bne.n	80078d4 <_dtoa_r+0xa8c>
 8007982:	2331      	movs	r3, #49	@ 0x31
 8007984:	f108 0801 	add.w	r8, r8, #1
 8007988:	f88a 3000 	strb.w	r3, [sl]
 800798c:	e4ad      	b.n	80072ea <_dtoa_r+0x4a2>
 800798e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007990:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079ec <_dtoa_r+0xba4>
 8007994:	b11b      	cbz	r3, 800799e <_dtoa_r+0xb56>
 8007996:	f10a 0308 	add.w	r3, sl, #8
 800799a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4650      	mov	r0, sl
 80079a0:	b017      	add	sp, #92	@ 0x5c
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f77f ae2e 	ble.w	800760a <_dtoa_r+0x7c2>
 80079ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b2:	2001      	movs	r0, #1
 80079b4:	e64d      	b.n	8007652 <_dtoa_r+0x80a>
 80079b6:	f1bb 0f00 	cmp.w	fp, #0
 80079ba:	f77f aed9 	ble.w	8007770 <_dtoa_r+0x928>
 80079be:	4656      	mov	r6, sl
 80079c0:	4621      	mov	r1, r4
 80079c2:	9803      	ldr	r0, [sp, #12]
 80079c4:	f7ff f9b7 	bl	8006d36 <quorem>
 80079c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079cc:	f806 3b01 	strb.w	r3, [r6], #1
 80079d0:	eba6 020a 	sub.w	r2, r6, sl
 80079d4:	4593      	cmp	fp, r2
 80079d6:	ddb4      	ble.n	8007942 <_dtoa_r+0xafa>
 80079d8:	2300      	movs	r3, #0
 80079da:	220a      	movs	r2, #10
 80079dc:	4648      	mov	r0, r9
 80079de:	9903      	ldr	r1, [sp, #12]
 80079e0:	f000 f978 	bl	8007cd4 <__multadd>
 80079e4:	9003      	str	r0, [sp, #12]
 80079e6:	e7eb      	b.n	80079c0 <_dtoa_r+0xb78>
 80079e8:	0800e473 	.word	0x0800e473
 80079ec:	0800e3f7 	.word	0x0800e3f7

080079f0 <_free_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4605      	mov	r5, r0
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d040      	beq.n	8007a7a <_free_r+0x8a>
 80079f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079fc:	1f0c      	subs	r4, r1, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bfb8      	it	lt
 8007a02:	18e4      	addlt	r4, r4, r3
 8007a04:	f000 f8f8 	bl	8007bf8 <__malloc_lock>
 8007a08:	4a1c      	ldr	r2, [pc, #112]	@ (8007a7c <_free_r+0x8c>)
 8007a0a:	6813      	ldr	r3, [r2, #0]
 8007a0c:	b933      	cbnz	r3, 8007a1c <_free_r+0x2c>
 8007a0e:	6063      	str	r3, [r4, #4]
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	4628      	mov	r0, r5
 8007a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a18:	f000 b8f4 	b.w	8007c04 <__malloc_unlock>
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	d908      	bls.n	8007a32 <_free_r+0x42>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	1821      	adds	r1, r4, r0
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf01      	itttt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	1809      	addeq	r1, r1, r0
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	e7ed      	b.n	8007a0e <_free_r+0x1e>
 8007a32:	461a      	mov	r2, r3
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b10b      	cbz	r3, 8007a3c <_free_r+0x4c>
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d9fa      	bls.n	8007a32 <_free_r+0x42>
 8007a3c:	6811      	ldr	r1, [r2, #0]
 8007a3e:	1850      	adds	r0, r2, r1
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	d10b      	bne.n	8007a5c <_free_r+0x6c>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	4401      	add	r1, r0
 8007a48:	1850      	adds	r0, r2, r1
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	d1e0      	bne.n	8007a12 <_free_r+0x22>
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	4408      	add	r0, r1
 8007a56:	6010      	str	r0, [r2, #0]
 8007a58:	6053      	str	r3, [r2, #4]
 8007a5a:	e7da      	b.n	8007a12 <_free_r+0x22>
 8007a5c:	d902      	bls.n	8007a64 <_free_r+0x74>
 8007a5e:	230c      	movs	r3, #12
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	e7d6      	b.n	8007a12 <_free_r+0x22>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	1821      	adds	r1, r4, r0
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf01      	itttt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	1809      	addeq	r1, r1, r0
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	6054      	str	r4, [r2, #4]
 8007a78:	e7cb      	b.n	8007a12 <_free_r+0x22>
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200004b4 	.word	0x200004b4

08007a80 <malloc>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <malloc+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 b825 	b.w	8007ad4 <_malloc_r>
 8007a8a:	bf00      	nop
 8007a8c:	20000190 	.word	0x20000190

08007a90 <sbrk_aligned>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	4e0f      	ldr	r6, [pc, #60]	@ (8007ad0 <sbrk_aligned+0x40>)
 8007a94:	460c      	mov	r4, r1
 8007a96:	6831      	ldr	r1, [r6, #0]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	b911      	cbnz	r1, 8007aa2 <sbrk_aligned+0x12>
 8007a9c:	f000 fce8 	bl	8008470 <_sbrk_r>
 8007aa0:	6030      	str	r0, [r6, #0]
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 fce3 	bl	8008470 <_sbrk_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d103      	bne.n	8007ab6 <sbrk_aligned+0x26>
 8007aae:	f04f 34ff 	mov.w	r4, #4294967295
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
 8007ab6:	1cc4      	adds	r4, r0, #3
 8007ab8:	f024 0403 	bic.w	r4, r4, #3
 8007abc:	42a0      	cmp	r0, r4
 8007abe:	d0f8      	beq.n	8007ab2 <sbrk_aligned+0x22>
 8007ac0:	1a21      	subs	r1, r4, r0
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 fcd4 	bl	8008470 <_sbrk_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d1f2      	bne.n	8007ab2 <sbrk_aligned+0x22>
 8007acc:	e7ef      	b.n	8007aae <sbrk_aligned+0x1e>
 8007ace:	bf00      	nop
 8007ad0:	200004b0 	.word	0x200004b0

08007ad4 <_malloc_r>:
 8007ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	1ccd      	adds	r5, r1, #3
 8007ada:	f025 0503 	bic.w	r5, r5, #3
 8007ade:	3508      	adds	r5, #8
 8007ae0:	2d0c      	cmp	r5, #12
 8007ae2:	bf38      	it	cc
 8007ae4:	250c      	movcc	r5, #12
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	4606      	mov	r6, r0
 8007aea:	db01      	blt.n	8007af0 <_malloc_r+0x1c>
 8007aec:	42a9      	cmp	r1, r5
 8007aee:	d904      	bls.n	8007afa <_malloc_r+0x26>
 8007af0:	230c      	movs	r3, #12
 8007af2:	6033      	str	r3, [r6, #0]
 8007af4:	2000      	movs	r0, #0
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bd0 <_malloc_r+0xfc>
 8007afe:	f000 f87b 	bl	8007bf8 <__malloc_lock>
 8007b02:	f8d8 3000 	ldr.w	r3, [r8]
 8007b06:	461c      	mov	r4, r3
 8007b08:	bb44      	cbnz	r4, 8007b5c <_malloc_r+0x88>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff ffbf 	bl	8007a90 <sbrk_aligned>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	4604      	mov	r4, r0
 8007b16:	d158      	bne.n	8007bca <_malloc_r+0xf6>
 8007b18:	f8d8 4000 	ldr.w	r4, [r8]
 8007b1c:	4627      	mov	r7, r4
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d143      	bne.n	8007baa <_malloc_r+0xd6>
 8007b22:	2c00      	cmp	r4, #0
 8007b24:	d04b      	beq.n	8007bbe <_malloc_r+0xea>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	eb04 0903 	add.w	r9, r4, r3
 8007b30:	f000 fc9e 	bl	8008470 <_sbrk_r>
 8007b34:	4581      	cmp	r9, r0
 8007b36:	d142      	bne.n	8007bbe <_malloc_r+0xea>
 8007b38:	6821      	ldr	r1, [r4, #0]
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	1a6d      	subs	r5, r5, r1
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7ff ffa6 	bl	8007a90 <sbrk_aligned>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d03a      	beq.n	8007bbe <_malloc_r+0xea>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	442b      	add	r3, r5
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	bb62      	cbnz	r2, 8007bb0 <_malloc_r+0xdc>
 8007b56:	f8c8 7000 	str.w	r7, [r8]
 8007b5a:	e00f      	b.n	8007b7c <_malloc_r+0xa8>
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	1b52      	subs	r2, r2, r5
 8007b60:	d420      	bmi.n	8007ba4 <_malloc_r+0xd0>
 8007b62:	2a0b      	cmp	r2, #11
 8007b64:	d917      	bls.n	8007b96 <_malloc_r+0xc2>
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	bf18      	it	ne
 8007b6e:	6059      	strne	r1, [r3, #4]
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	bf08      	it	eq
 8007b74:	f8c8 1000 	streq.w	r1, [r8]
 8007b78:	5162      	str	r2, [r4, r5]
 8007b7a:	604b      	str	r3, [r1, #4]
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 f841 	bl	8007c04 <__malloc_unlock>
 8007b82:	f104 000b 	add.w	r0, r4, #11
 8007b86:	1d23      	adds	r3, r4, #4
 8007b88:	f020 0007 	bic.w	r0, r0, #7
 8007b8c:	1ac2      	subs	r2, r0, r3
 8007b8e:	bf1c      	itt	ne
 8007b90:	1a1b      	subne	r3, r3, r0
 8007b92:	50a3      	strne	r3, [r4, r2]
 8007b94:	e7af      	b.n	8007af6 <_malloc_r+0x22>
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	bf0c      	ite	eq
 8007b9c:	f8c8 2000 	streq.w	r2, [r8]
 8007ba0:	605a      	strne	r2, [r3, #4]
 8007ba2:	e7eb      	b.n	8007b7c <_malloc_r+0xa8>
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	6864      	ldr	r4, [r4, #4]
 8007ba8:	e7ae      	b.n	8007b08 <_malloc_r+0x34>
 8007baa:	463c      	mov	r4, r7
 8007bac:	687f      	ldr	r7, [r7, #4]
 8007bae:	e7b6      	b.n	8007b1e <_malloc_r+0x4a>
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d1fb      	bne.n	8007bb0 <_malloc_r+0xdc>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6053      	str	r3, [r2, #4]
 8007bbc:	e7de      	b.n	8007b7c <_malloc_r+0xa8>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f000 f81e 	bl	8007c04 <__malloc_unlock>
 8007bc8:	e794      	b.n	8007af4 <_malloc_r+0x20>
 8007bca:	6005      	str	r5, [r0, #0]
 8007bcc:	e7d6      	b.n	8007b7c <_malloc_r+0xa8>
 8007bce:	bf00      	nop
 8007bd0:	200004b4 	.word	0x200004b4

08007bd4 <__ascii_mbtowc>:
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	b901      	cbnz	r1, 8007bda <__ascii_mbtowc+0x6>
 8007bd8:	a901      	add	r1, sp, #4
 8007bda:	b142      	cbz	r2, 8007bee <__ascii_mbtowc+0x1a>
 8007bdc:	b14b      	cbz	r3, 8007bf2 <__ascii_mbtowc+0x1e>
 8007bde:	7813      	ldrb	r3, [r2, #0]
 8007be0:	600b      	str	r3, [r1, #0]
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	1e10      	subs	r0, r2, #0
 8007be6:	bf18      	it	ne
 8007be8:	2001      	movne	r0, #1
 8007bea:	b002      	add	sp, #8
 8007bec:	4770      	bx	lr
 8007bee:	4610      	mov	r0, r2
 8007bf0:	e7fb      	b.n	8007bea <__ascii_mbtowc+0x16>
 8007bf2:	f06f 0001 	mvn.w	r0, #1
 8007bf6:	e7f8      	b.n	8007bea <__ascii_mbtowc+0x16>

08007bf8 <__malloc_lock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	@ (8007c00 <__malloc_lock+0x8>)
 8007bfa:	f7ff b87e 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	200004ac 	.word	0x200004ac

08007c04 <__malloc_unlock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	@ (8007c0c <__malloc_unlock+0x8>)
 8007c06:	f7ff b879 	b.w	8006cfc <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	200004ac 	.word	0x200004ac

08007c10 <_Balloc>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	69c6      	ldr	r6, [r0, #28]
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Balloc+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ff30 	bl	8007a80 <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	61e0      	str	r0, [r4, #28]
 8007c24:	b920      	cbnz	r0, 8007c30 <_Balloc+0x20>
 8007c26:	216b      	movs	r1, #107	@ 0x6b
 8007c28:	4b17      	ldr	r3, [pc, #92]	@ (8007c88 <_Balloc+0x78>)
 8007c2a:	4818      	ldr	r0, [pc, #96]	@ (8007c8c <_Balloc+0x7c>)
 8007c2c:	f000 fc30 	bl	8008490 <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	69e6      	ldr	r6, [r4, #28]
 8007c3a:	68f3      	ldr	r3, [r6, #12]
 8007c3c:	b183      	cbz	r3, 8007c60 <_Balloc+0x50>
 8007c3e:	69e3      	ldr	r3, [r4, #28]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c46:	b9b8      	cbnz	r0, 8007c78 <_Balloc+0x68>
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c4e:	1d72      	adds	r2, r6, #5
 8007c50:	4620      	mov	r0, r4
 8007c52:	0092      	lsls	r2, r2, #2
 8007c54:	f000 fc3a 	bl	80084cc <_calloc_r>
 8007c58:	b160      	cbz	r0, 8007c74 <_Balloc+0x64>
 8007c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c5e:	e00e      	b.n	8007c7e <_Balloc+0x6e>
 8007c60:	2221      	movs	r2, #33	@ 0x21
 8007c62:	2104      	movs	r1, #4
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fc31 	bl	80084cc <_calloc_r>
 8007c6a:	69e3      	ldr	r3, [r4, #28]
 8007c6c:	60f0      	str	r0, [r6, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <_Balloc+0x2e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c84:	e7f7      	b.n	8007c76 <_Balloc+0x66>
 8007c86:	bf00      	nop
 8007c88:	0800e404 	.word	0x0800e404
 8007c8c:	0800e484 	.word	0x0800e484

08007c90 <_Bfree>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	69c6      	ldr	r6, [r0, #28]
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b976      	cbnz	r6, 8007cb8 <_Bfree+0x28>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	f7ff fef0 	bl	8007a80 <malloc>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	61e8      	str	r0, [r5, #28]
 8007ca4:	b920      	cbnz	r0, 8007cb0 <_Bfree+0x20>
 8007ca6:	218f      	movs	r1, #143	@ 0x8f
 8007ca8:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <_Bfree+0x3c>)
 8007caa:	4809      	ldr	r0, [pc, #36]	@ (8007cd0 <_Bfree+0x40>)
 8007cac:	f000 fbf0 	bl	8008490 <__assert_func>
 8007cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb4:	6006      	str	r6, [r0, #0]
 8007cb6:	60c6      	str	r6, [r0, #12]
 8007cb8:	b13c      	cbz	r4, 8007cca <_Bfree+0x3a>
 8007cba:	69eb      	ldr	r3, [r5, #28]
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cc4:	6021      	str	r1, [r4, #0]
 8007cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	0800e404 	.word	0x0800e404
 8007cd0:	0800e484 	.word	0x0800e484

08007cd4 <__multadd>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	4607      	mov	r7, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	461e      	mov	r6, r3
 8007cde:	2000      	movs	r0, #0
 8007ce0:	690d      	ldr	r5, [r1, #16]
 8007ce2:	f101 0c14 	add.w	ip, r1, #20
 8007ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cea:	3001      	adds	r0, #1
 8007cec:	b299      	uxth	r1, r3
 8007cee:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf2:	0c1e      	lsrs	r6, r3, #16
 8007cf4:	0c0b      	lsrs	r3, r1, #16
 8007cf6:	fb02 3306 	mla	r3, r2, r6, r3
 8007cfa:	b289      	uxth	r1, r1
 8007cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d00:	4285      	cmp	r5, r0
 8007d02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d06:	f84c 1b04 	str.w	r1, [ip], #4
 8007d0a:	dcec      	bgt.n	8007ce6 <__multadd+0x12>
 8007d0c:	b30e      	cbz	r6, 8007d52 <__multadd+0x7e>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc19      	bgt.n	8007d48 <__multadd+0x74>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4638      	mov	r0, r7
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7ff ff79 	bl	8007c10 <_Balloc>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__multadd+0x5a>
 8007d22:	4602      	mov	r2, r0
 8007d24:	21ba      	movs	r1, #186	@ 0xba
 8007d26:	4b0c      	ldr	r3, [pc, #48]	@ (8007d58 <__multadd+0x84>)
 8007d28:	480c      	ldr	r0, [pc, #48]	@ (8007d5c <__multadd+0x88>)
 8007d2a:	f000 fbb1 	bl	8008490 <__assert_func>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	f104 010c 	add.w	r1, r4, #12
 8007d34:	3202      	adds	r2, #2
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f7fe ffee 	bl	8006d1a <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffa5 	bl	8007c90 <_Bfree>
 8007d46:	4644      	mov	r4, r8
 8007d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	615e      	str	r6, [r3, #20]
 8007d50:	6125      	str	r5, [r4, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	0800e473 	.word	0x0800e473
 8007d5c:	0800e484 	.word	0x0800e484

08007d60 <__hi0bits>:
 8007d60:	4603      	mov	r3, r0
 8007d62:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d66:	bf3a      	itte	cc
 8007d68:	0403      	lslcc	r3, r0, #16
 8007d6a:	2010      	movcc	r0, #16
 8007d6c:	2000      	movcs	r0, #0
 8007d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d72:	bf3c      	itt	cc
 8007d74:	021b      	lslcc	r3, r3, #8
 8007d76:	3008      	addcc	r0, #8
 8007d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d7c:	bf3c      	itt	cc
 8007d7e:	011b      	lslcc	r3, r3, #4
 8007d80:	3004      	addcc	r0, #4
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d86:	bf3c      	itt	cc
 8007d88:	009b      	lslcc	r3, r3, #2
 8007d8a:	3002      	addcc	r0, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	db05      	blt.n	8007d9c <__hi0bits+0x3c>
 8007d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d94:	f100 0001 	add.w	r0, r0, #1
 8007d98:	bf08      	it	eq
 8007d9a:	2020      	moveq	r0, #32
 8007d9c:	4770      	bx	lr

08007d9e <__lo0bits>:
 8007d9e:	6803      	ldr	r3, [r0, #0]
 8007da0:	4602      	mov	r2, r0
 8007da2:	f013 0007 	ands.w	r0, r3, #7
 8007da6:	d00b      	beq.n	8007dc0 <__lo0bits+0x22>
 8007da8:	07d9      	lsls	r1, r3, #31
 8007daa:	d421      	bmi.n	8007df0 <__lo0bits+0x52>
 8007dac:	0798      	lsls	r0, r3, #30
 8007dae:	bf49      	itett	mi
 8007db0:	085b      	lsrmi	r3, r3, #1
 8007db2:	089b      	lsrpl	r3, r3, #2
 8007db4:	2001      	movmi	r0, #1
 8007db6:	6013      	strmi	r3, [r2, #0]
 8007db8:	bf5c      	itt	pl
 8007dba:	2002      	movpl	r0, #2
 8007dbc:	6013      	strpl	r3, [r2, #0]
 8007dbe:	4770      	bx	lr
 8007dc0:	b299      	uxth	r1, r3
 8007dc2:	b909      	cbnz	r1, 8007dc8 <__lo0bits+0x2a>
 8007dc4:	2010      	movs	r0, #16
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	b2d9      	uxtb	r1, r3
 8007dca:	b909      	cbnz	r1, 8007dd0 <__lo0bits+0x32>
 8007dcc:	3008      	adds	r0, #8
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	0719      	lsls	r1, r3, #28
 8007dd2:	bf04      	itt	eq
 8007dd4:	091b      	lsreq	r3, r3, #4
 8007dd6:	3004      	addeq	r0, #4
 8007dd8:	0799      	lsls	r1, r3, #30
 8007dda:	bf04      	itt	eq
 8007ddc:	089b      	lsreq	r3, r3, #2
 8007dde:	3002      	addeq	r0, #2
 8007de0:	07d9      	lsls	r1, r3, #31
 8007de2:	d403      	bmi.n	8007dec <__lo0bits+0x4e>
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	f100 0001 	add.w	r0, r0, #1
 8007dea:	d003      	beq.n	8007df4 <__lo0bits+0x56>
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	4770      	bx	lr
 8007df0:	2000      	movs	r0, #0
 8007df2:	4770      	bx	lr
 8007df4:	2020      	movs	r0, #32
 8007df6:	4770      	bx	lr

08007df8 <__i2b>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	f7ff ff07 	bl	8007c10 <_Balloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	b928      	cbnz	r0, 8007e12 <__i2b+0x1a>
 8007e06:	f240 1145 	movw	r1, #325	@ 0x145
 8007e0a:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <__i2b+0x24>)
 8007e0c:	4804      	ldr	r0, [pc, #16]	@ (8007e20 <__i2b+0x28>)
 8007e0e:	f000 fb3f 	bl	8008490 <__assert_func>
 8007e12:	2301      	movs	r3, #1
 8007e14:	6144      	str	r4, [r0, #20]
 8007e16:	6103      	str	r3, [r0, #16]
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	bf00      	nop
 8007e1c:	0800e473 	.word	0x0800e473
 8007e20:	0800e484 	.word	0x0800e484

08007e24 <__multiply>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	4617      	mov	r7, r2
 8007e2a:	690a      	ldr	r2, [r1, #16]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4689      	mov	r9, r1
 8007e30:	429a      	cmp	r2, r3
 8007e32:	bfa2      	ittt	ge
 8007e34:	463b      	movge	r3, r7
 8007e36:	460f      	movge	r7, r1
 8007e38:	4699      	movge	r9, r3
 8007e3a:	693d      	ldr	r5, [r7, #16]
 8007e3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	eb05 060a 	add.w	r6, r5, sl
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	bfb8      	it	lt
 8007e4e:	3101      	addlt	r1, #1
 8007e50:	f7ff fede 	bl	8007c10 <_Balloc>
 8007e54:	b930      	cbnz	r0, 8007e64 <__multiply+0x40>
 8007e56:	4602      	mov	r2, r0
 8007e58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e5c:	4b40      	ldr	r3, [pc, #256]	@ (8007f60 <__multiply+0x13c>)
 8007e5e:	4841      	ldr	r0, [pc, #260]	@ (8007f64 <__multiply+0x140>)
 8007e60:	f000 fb16 	bl	8008490 <__assert_func>
 8007e64:	f100 0414 	add.w	r4, r0, #20
 8007e68:	4623      	mov	r3, r4
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007e70:	4573      	cmp	r3, lr
 8007e72:	d320      	bcc.n	8007eb6 <__multiply+0x92>
 8007e74:	f107 0814 	add.w	r8, r7, #20
 8007e78:	f109 0114 	add.w	r1, r9, #20
 8007e7c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007e80:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007e84:	9302      	str	r3, [sp, #8]
 8007e86:	1beb      	subs	r3, r5, r7
 8007e88:	3b15      	subs	r3, #21
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	3304      	adds	r3, #4
 8007e90:	3715      	adds	r7, #21
 8007e92:	42bd      	cmp	r5, r7
 8007e94:	bf38      	it	cc
 8007e96:	2304      	movcc	r3, #4
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	9103      	str	r1, [sp, #12]
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	d80c      	bhi.n	8007ebc <__multiply+0x98>
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	dd03      	ble.n	8007eae <__multiply+0x8a>
 8007ea6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d055      	beq.n	8007f5a <__multiply+0x136>
 8007eae:	6106      	str	r6, [r0, #16]
 8007eb0:	b005      	add	sp, #20
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	f843 2b04 	str.w	r2, [r3], #4
 8007eba:	e7d9      	b.n	8007e70 <__multiply+0x4c>
 8007ebc:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ec0:	f1ba 0f00 	cmp.w	sl, #0
 8007ec4:	d01f      	beq.n	8007f06 <__multiply+0xe2>
 8007ec6:	46c4      	mov	ip, r8
 8007ec8:	46a1      	mov	r9, r4
 8007eca:	2700      	movs	r7, #0
 8007ecc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ed0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ed4:	fa1f fb82 	uxth.w	fp, r2
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ede:	443b      	add	r3, r7
 8007ee0:	f8d9 7000 	ldr.w	r7, [r9]
 8007ee4:	0c12      	lsrs	r2, r2, #16
 8007ee6:	0c3f      	lsrs	r7, r7, #16
 8007ee8:	fb0a 7202 	mla	r2, sl, r2, r7
 8007eec:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef6:	4565      	cmp	r5, ip
 8007ef8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007efc:	f849 3b04 	str.w	r3, [r9], #4
 8007f00:	d8e4      	bhi.n	8007ecc <__multiply+0xa8>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	50e7      	str	r7, [r4, r3]
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	3104      	adds	r1, #4
 8007f0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f0e:	f1b9 0f00 	cmp.w	r9, #0
 8007f12:	d020      	beq.n	8007f56 <__multiply+0x132>
 8007f14:	4647      	mov	r7, r8
 8007f16:	46a4      	mov	ip, r4
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f22:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	fb09 220b 	mla	r2, r9, fp, r2
 8007f2c:	4452      	add	r2, sl
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f32:	f84c 3b04 	str.w	r3, [ip], #4
 8007f36:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f3e:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f42:	42bd      	cmp	r5, r7
 8007f44:	fb09 330a 	mla	r3, r9, sl, r3
 8007f48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007f4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f50:	d8e5      	bhi.n	8007f1e <__multiply+0xfa>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	50a3      	str	r3, [r4, r2]
 8007f56:	3404      	adds	r4, #4
 8007f58:	e79f      	b.n	8007e9a <__multiply+0x76>
 8007f5a:	3e01      	subs	r6, #1
 8007f5c:	e7a1      	b.n	8007ea2 <__multiply+0x7e>
 8007f5e:	bf00      	nop
 8007f60:	0800e473 	.word	0x0800e473
 8007f64:	0800e484 	.word	0x0800e484

08007f68 <__pow5mult>:
 8007f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f6c:	4615      	mov	r5, r2
 8007f6e:	f012 0203 	ands.w	r2, r2, #3
 8007f72:	4607      	mov	r7, r0
 8007f74:	460e      	mov	r6, r1
 8007f76:	d007      	beq.n	8007f88 <__pow5mult+0x20>
 8007f78:	4c25      	ldr	r4, [pc, #148]	@ (8008010 <__pow5mult+0xa8>)
 8007f7a:	3a01      	subs	r2, #1
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f82:	f7ff fea7 	bl	8007cd4 <__multadd>
 8007f86:	4606      	mov	r6, r0
 8007f88:	10ad      	asrs	r5, r5, #2
 8007f8a:	d03d      	beq.n	8008008 <__pow5mult+0xa0>
 8007f8c:	69fc      	ldr	r4, [r7, #28]
 8007f8e:	b97c      	cbnz	r4, 8007fb0 <__pow5mult+0x48>
 8007f90:	2010      	movs	r0, #16
 8007f92:	f7ff fd75 	bl	8007a80 <malloc>
 8007f96:	4602      	mov	r2, r0
 8007f98:	61f8      	str	r0, [r7, #28]
 8007f9a:	b928      	cbnz	r0, 8007fa8 <__pow5mult+0x40>
 8007f9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8008014 <__pow5mult+0xac>)
 8007fa2:	481d      	ldr	r0, [pc, #116]	@ (8008018 <__pow5mult+0xb0>)
 8007fa4:	f000 fa74 	bl	8008490 <__assert_func>
 8007fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fac:	6004      	str	r4, [r0, #0]
 8007fae:	60c4      	str	r4, [r0, #12]
 8007fb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb8:	b94c      	cbnz	r4, 8007fce <__pow5mult+0x66>
 8007fba:	f240 2171 	movw	r1, #625	@ 0x271
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7ff ff1a 	bl	8007df8 <__i2b>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fcc:	6003      	str	r3, [r0, #0]
 8007fce:	f04f 0900 	mov.w	r9, #0
 8007fd2:	07eb      	lsls	r3, r5, #31
 8007fd4:	d50a      	bpl.n	8007fec <__pow5mult+0x84>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ff22 	bl	8007e24 <__multiply>
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f7ff fe53 	bl	8007c90 <_Bfree>
 8007fea:	4646      	mov	r6, r8
 8007fec:	106d      	asrs	r5, r5, #1
 8007fee:	d00b      	beq.n	8008008 <__pow5mult+0xa0>
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	b938      	cbnz	r0, 8008004 <__pow5mult+0x9c>
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ff13 	bl	8007e24 <__multiply>
 8007ffe:	6020      	str	r0, [r4, #0]
 8008000:	f8c0 9000 	str.w	r9, [r0]
 8008004:	4604      	mov	r4, r0
 8008006:	e7e4      	b.n	8007fd2 <__pow5mult+0x6a>
 8008008:	4630      	mov	r0, r6
 800800a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800e:	bf00      	nop
 8008010:	0800e52c 	.word	0x0800e52c
 8008014:	0800e404 	.word	0x0800e404
 8008018:	0800e484 	.word	0x0800e484

0800801c <__lshift>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	460c      	mov	r4, r1
 8008022:	4607      	mov	r7, r0
 8008024:	4691      	mov	r9, r2
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6849      	ldr	r1, [r1, #4]
 800802a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008034:	f108 0601 	add.w	r6, r8, #1
 8008038:	42b3      	cmp	r3, r6
 800803a:	db0b      	blt.n	8008054 <__lshift+0x38>
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff fde7 	bl	8007c10 <_Balloc>
 8008042:	4605      	mov	r5, r0
 8008044:	b948      	cbnz	r0, 800805a <__lshift+0x3e>
 8008046:	4602      	mov	r2, r0
 8008048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800804c:	4b27      	ldr	r3, [pc, #156]	@ (80080ec <__lshift+0xd0>)
 800804e:	4828      	ldr	r0, [pc, #160]	@ (80080f0 <__lshift+0xd4>)
 8008050:	f000 fa1e 	bl	8008490 <__assert_func>
 8008054:	3101      	adds	r1, #1
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	e7ee      	b.n	8008038 <__lshift+0x1c>
 800805a:	2300      	movs	r3, #0
 800805c:	f100 0114 	add.w	r1, r0, #20
 8008060:	f100 0210 	add.w	r2, r0, #16
 8008064:	4618      	mov	r0, r3
 8008066:	4553      	cmp	r3, sl
 8008068:	db33      	blt.n	80080d2 <__lshift+0xb6>
 800806a:	6920      	ldr	r0, [r4, #16]
 800806c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008070:	f104 0314 	add.w	r3, r4, #20
 8008074:	f019 091f 	ands.w	r9, r9, #31
 8008078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800807c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008080:	d02b      	beq.n	80080da <__lshift+0xbe>
 8008082:	468a      	mov	sl, r1
 8008084:	2200      	movs	r2, #0
 8008086:	f1c9 0e20 	rsb	lr, r9, #32
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	fa00 f009 	lsl.w	r0, r0, r9
 8008090:	4310      	orrs	r0, r2
 8008092:	f84a 0b04 	str.w	r0, [sl], #4
 8008096:	f853 2b04 	ldr.w	r2, [r3], #4
 800809a:	459c      	cmp	ip, r3
 800809c:	fa22 f20e 	lsr.w	r2, r2, lr
 80080a0:	d8f3      	bhi.n	800808a <__lshift+0x6e>
 80080a2:	ebac 0304 	sub.w	r3, ip, r4
 80080a6:	3b15      	subs	r3, #21
 80080a8:	f023 0303 	bic.w	r3, r3, #3
 80080ac:	3304      	adds	r3, #4
 80080ae:	f104 0015 	add.w	r0, r4, #21
 80080b2:	4560      	cmp	r0, ip
 80080b4:	bf88      	it	hi
 80080b6:	2304      	movhi	r3, #4
 80080b8:	50ca      	str	r2, [r1, r3]
 80080ba:	b10a      	cbz	r2, 80080c0 <__lshift+0xa4>
 80080bc:	f108 0602 	add.w	r6, r8, #2
 80080c0:	3e01      	subs	r6, #1
 80080c2:	4638      	mov	r0, r7
 80080c4:	4621      	mov	r1, r4
 80080c6:	612e      	str	r6, [r5, #16]
 80080c8:	f7ff fde2 	bl	8007c90 <_Bfree>
 80080cc:	4628      	mov	r0, r5
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080d6:	3301      	adds	r3, #1
 80080d8:	e7c5      	b.n	8008066 <__lshift+0x4a>
 80080da:	3904      	subs	r1, #4
 80080dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e0:	459c      	cmp	ip, r3
 80080e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80080e6:	d8f9      	bhi.n	80080dc <__lshift+0xc0>
 80080e8:	e7ea      	b.n	80080c0 <__lshift+0xa4>
 80080ea:	bf00      	nop
 80080ec:	0800e473 	.word	0x0800e473
 80080f0:	0800e484 	.word	0x0800e484

080080f4 <__mcmp>:
 80080f4:	4603      	mov	r3, r0
 80080f6:	690a      	ldr	r2, [r1, #16]
 80080f8:	6900      	ldr	r0, [r0, #16]
 80080fa:	b530      	push	{r4, r5, lr}
 80080fc:	1a80      	subs	r0, r0, r2
 80080fe:	d10e      	bne.n	800811e <__mcmp+0x2a>
 8008100:	3314      	adds	r3, #20
 8008102:	3114      	adds	r1, #20
 8008104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800810c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008114:	4295      	cmp	r5, r2
 8008116:	d003      	beq.n	8008120 <__mcmp+0x2c>
 8008118:	d205      	bcs.n	8008126 <__mcmp+0x32>
 800811a:	f04f 30ff 	mov.w	r0, #4294967295
 800811e:	bd30      	pop	{r4, r5, pc}
 8008120:	42a3      	cmp	r3, r4
 8008122:	d3f3      	bcc.n	800810c <__mcmp+0x18>
 8008124:	e7fb      	b.n	800811e <__mcmp+0x2a>
 8008126:	2001      	movs	r0, #1
 8008128:	e7f9      	b.n	800811e <__mcmp+0x2a>
	...

0800812c <__mdiff>:
 800812c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	4689      	mov	r9, r1
 8008132:	4606      	mov	r6, r0
 8008134:	4611      	mov	r1, r2
 8008136:	4648      	mov	r0, r9
 8008138:	4614      	mov	r4, r2
 800813a:	f7ff ffdb 	bl	80080f4 <__mcmp>
 800813e:	1e05      	subs	r5, r0, #0
 8008140:	d112      	bne.n	8008168 <__mdiff+0x3c>
 8008142:	4629      	mov	r1, r5
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff fd63 	bl	8007c10 <_Balloc>
 800814a:	4602      	mov	r2, r0
 800814c:	b928      	cbnz	r0, 800815a <__mdiff+0x2e>
 800814e:	f240 2137 	movw	r1, #567	@ 0x237
 8008152:	4b3e      	ldr	r3, [pc, #248]	@ (800824c <__mdiff+0x120>)
 8008154:	483e      	ldr	r0, [pc, #248]	@ (8008250 <__mdiff+0x124>)
 8008156:	f000 f99b 	bl	8008490 <__assert_func>
 800815a:	2301      	movs	r3, #1
 800815c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008160:	4610      	mov	r0, r2
 8008162:	b003      	add	sp, #12
 8008164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008168:	bfbc      	itt	lt
 800816a:	464b      	movlt	r3, r9
 800816c:	46a1      	movlt	r9, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008174:	bfba      	itte	lt
 8008176:	461c      	movlt	r4, r3
 8008178:	2501      	movlt	r5, #1
 800817a:	2500      	movge	r5, #0
 800817c:	f7ff fd48 	bl	8007c10 <_Balloc>
 8008180:	4602      	mov	r2, r0
 8008182:	b918      	cbnz	r0, 800818c <__mdiff+0x60>
 8008184:	f240 2145 	movw	r1, #581	@ 0x245
 8008188:	4b30      	ldr	r3, [pc, #192]	@ (800824c <__mdiff+0x120>)
 800818a:	e7e3      	b.n	8008154 <__mdiff+0x28>
 800818c:	f100 0b14 	add.w	fp, r0, #20
 8008190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008194:	f109 0310 	add.w	r3, r9, #16
 8008198:	60c5      	str	r5, [r0, #12]
 800819a:	f04f 0c00 	mov.w	ip, #0
 800819e:	f109 0514 	add.w	r5, r9, #20
 80081a2:	46d9      	mov	r9, fp
 80081a4:	6926      	ldr	r6, [r4, #16]
 80081a6:	f104 0e14 	add.w	lr, r4, #20
 80081aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081be:	b281      	uxth	r1, r0
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	fa1f f38a 	uxth.w	r3, sl
 80081c6:	1a5b      	subs	r3, r3, r1
 80081c8:	0c00      	lsrs	r0, r0, #16
 80081ca:	4463      	add	r3, ip
 80081cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081da:	4576      	cmp	r6, lr
 80081dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081e0:	f849 3b04 	str.w	r3, [r9], #4
 80081e4:	d8e6      	bhi.n	80081b4 <__mdiff+0x88>
 80081e6:	1b33      	subs	r3, r6, r4
 80081e8:	3b15      	subs	r3, #21
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	3415      	adds	r4, #21
 80081f0:	3304      	adds	r3, #4
 80081f2:	42a6      	cmp	r6, r4
 80081f4:	bf38      	it	cc
 80081f6:	2304      	movcc	r3, #4
 80081f8:	441d      	add	r5, r3
 80081fa:	445b      	add	r3, fp
 80081fc:	461e      	mov	r6, r3
 80081fe:	462c      	mov	r4, r5
 8008200:	4544      	cmp	r4, r8
 8008202:	d30e      	bcc.n	8008222 <__mdiff+0xf6>
 8008204:	f108 0103 	add.w	r1, r8, #3
 8008208:	1b49      	subs	r1, r1, r5
 800820a:	f021 0103 	bic.w	r1, r1, #3
 800820e:	3d03      	subs	r5, #3
 8008210:	45a8      	cmp	r8, r5
 8008212:	bf38      	it	cc
 8008214:	2100      	movcc	r1, #0
 8008216:	440b      	add	r3, r1
 8008218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800821c:	b199      	cbz	r1, 8008246 <__mdiff+0x11a>
 800821e:	6117      	str	r7, [r2, #16]
 8008220:	e79e      	b.n	8008160 <__mdiff+0x34>
 8008222:	46e6      	mov	lr, ip
 8008224:	f854 1b04 	ldr.w	r1, [r4], #4
 8008228:	fa1f fc81 	uxth.w	ip, r1
 800822c:	44f4      	add	ip, lr
 800822e:	0c08      	lsrs	r0, r1, #16
 8008230:	4471      	add	r1, lr
 8008232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008236:	b289      	uxth	r1, r1
 8008238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800823c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008240:	f846 1b04 	str.w	r1, [r6], #4
 8008244:	e7dc      	b.n	8008200 <__mdiff+0xd4>
 8008246:	3f01      	subs	r7, #1
 8008248:	e7e6      	b.n	8008218 <__mdiff+0xec>
 800824a:	bf00      	nop
 800824c:	0800e473 	.word	0x0800e473
 8008250:	0800e484 	.word	0x0800e484

08008254 <__d2b>:
 8008254:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008258:	2101      	movs	r1, #1
 800825a:	4690      	mov	r8, r2
 800825c:	4699      	mov	r9, r3
 800825e:	9e08      	ldr	r6, [sp, #32]
 8008260:	f7ff fcd6 	bl	8007c10 <_Balloc>
 8008264:	4604      	mov	r4, r0
 8008266:	b930      	cbnz	r0, 8008276 <__d2b+0x22>
 8008268:	4602      	mov	r2, r0
 800826a:	f240 310f 	movw	r1, #783	@ 0x30f
 800826e:	4b23      	ldr	r3, [pc, #140]	@ (80082fc <__d2b+0xa8>)
 8008270:	4823      	ldr	r0, [pc, #140]	@ (8008300 <__d2b+0xac>)
 8008272:	f000 f90d 	bl	8008490 <__assert_func>
 8008276:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800827a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827e:	b10d      	cbz	r5, 8008284 <__d2b+0x30>
 8008280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	f1b8 0300 	subs.w	r3, r8, #0
 800828a:	d024      	beq.n	80082d6 <__d2b+0x82>
 800828c:	4668      	mov	r0, sp
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	f7ff fd85 	bl	8007d9e <__lo0bits>
 8008294:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008298:	b1d8      	cbz	r0, 80082d2 <__d2b+0x7e>
 800829a:	f1c0 0320 	rsb	r3, r0, #32
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	430b      	orrs	r3, r1
 80082a4:	40c2      	lsrs	r2, r0
 80082a6:	6163      	str	r3, [r4, #20]
 80082a8:	9201      	str	r2, [sp, #4]
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf0c      	ite	eq
 80082b0:	2201      	moveq	r2, #1
 80082b2:	2202      	movne	r2, #2
 80082b4:	61a3      	str	r3, [r4, #24]
 80082b6:	6122      	str	r2, [r4, #16]
 80082b8:	b1ad      	cbz	r5, 80082e6 <__d2b+0x92>
 80082ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082be:	4405      	add	r5, r0
 80082c0:	6035      	str	r5, [r6, #0]
 80082c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c8:	6018      	str	r0, [r3, #0]
 80082ca:	4620      	mov	r0, r4
 80082cc:	b002      	add	sp, #8
 80082ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80082d2:	6161      	str	r1, [r4, #20]
 80082d4:	e7e9      	b.n	80082aa <__d2b+0x56>
 80082d6:	a801      	add	r0, sp, #4
 80082d8:	f7ff fd61 	bl	8007d9e <__lo0bits>
 80082dc:	9b01      	ldr	r3, [sp, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	6163      	str	r3, [r4, #20]
 80082e2:	3020      	adds	r0, #32
 80082e4:	e7e7      	b.n	80082b6 <__d2b+0x62>
 80082e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082ee:	6030      	str	r0, [r6, #0]
 80082f0:	6918      	ldr	r0, [r3, #16]
 80082f2:	f7ff fd35 	bl	8007d60 <__hi0bits>
 80082f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082fa:	e7e4      	b.n	80082c6 <__d2b+0x72>
 80082fc:	0800e473 	.word	0x0800e473
 8008300:	0800e484 	.word	0x0800e484

08008304 <__ascii_wctomb>:
 8008304:	4603      	mov	r3, r0
 8008306:	4608      	mov	r0, r1
 8008308:	b141      	cbz	r1, 800831c <__ascii_wctomb+0x18>
 800830a:	2aff      	cmp	r2, #255	@ 0xff
 800830c:	d904      	bls.n	8008318 <__ascii_wctomb+0x14>
 800830e:	228a      	movs	r2, #138	@ 0x8a
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	4770      	bx	lr
 8008318:	2001      	movs	r0, #1
 800831a:	700a      	strb	r2, [r1, #0]
 800831c:	4770      	bx	lr
	...

08008320 <__sflush_r>:
 8008320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	0716      	lsls	r6, r2, #28
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	d454      	bmi.n	80083d8 <__sflush_r+0xb8>
 800832e:	684b      	ldr	r3, [r1, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc02      	bgt.n	800833a <__sflush_r+0x1a>
 8008334:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd48      	ble.n	80083cc <__sflush_r+0xac>
 800833a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800833c:	2e00      	cmp	r6, #0
 800833e:	d045      	beq.n	80083cc <__sflush_r+0xac>
 8008340:	2300      	movs	r3, #0
 8008342:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008346:	682f      	ldr	r7, [r5, #0]
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	d030      	beq.n	80083b0 <__sflush_r+0x90>
 800834e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	0759      	lsls	r1, r3, #29
 8008354:	d505      	bpl.n	8008362 <__sflush_r+0x42>
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	1ad2      	subs	r2, r2, r3
 800835a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800835c:	b10b      	cbz	r3, 8008362 <__sflush_r+0x42>
 800835e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	2300      	movs	r3, #0
 8008364:	4628      	mov	r0, r5
 8008366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008368:	6a21      	ldr	r1, [r4, #32]
 800836a:	47b0      	blx	r6
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	d106      	bne.n	8008380 <__sflush_r+0x60>
 8008372:	6829      	ldr	r1, [r5, #0]
 8008374:	291d      	cmp	r1, #29
 8008376:	d82b      	bhi.n	80083d0 <__sflush_r+0xb0>
 8008378:	4a28      	ldr	r2, [pc, #160]	@ (800841c <__sflush_r+0xfc>)
 800837a:	40ca      	lsrs	r2, r1
 800837c:	07d6      	lsls	r6, r2, #31
 800837e:	d527      	bpl.n	80083d0 <__sflush_r+0xb0>
 8008380:	2200      	movs	r2, #0
 8008382:	6062      	str	r2, [r4, #4]
 8008384:	6922      	ldr	r2, [r4, #16]
 8008386:	04d9      	lsls	r1, r3, #19
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	d504      	bpl.n	8008396 <__sflush_r+0x76>
 800838c:	1c42      	adds	r2, r0, #1
 800838e:	d101      	bne.n	8008394 <__sflush_r+0x74>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b903      	cbnz	r3, 8008396 <__sflush_r+0x76>
 8008394:	6560      	str	r0, [r4, #84]	@ 0x54
 8008396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008398:	602f      	str	r7, [r5, #0]
 800839a:	b1b9      	cbz	r1, 80083cc <__sflush_r+0xac>
 800839c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d002      	beq.n	80083aa <__sflush_r+0x8a>
 80083a4:	4628      	mov	r0, r5
 80083a6:	f7ff fb23 	bl	80079f0 <_free_r>
 80083aa:	2300      	movs	r3, #0
 80083ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ae:	e00d      	b.n	80083cc <__sflush_r+0xac>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b0      	blx	r6
 80083b6:	4602      	mov	r2, r0
 80083b8:	1c50      	adds	r0, r2, #1
 80083ba:	d1c9      	bne.n	8008350 <__sflush_r+0x30>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c6      	beq.n	8008350 <__sflush_r+0x30>
 80083c2:	2b1d      	cmp	r3, #29
 80083c4:	d001      	beq.n	80083ca <__sflush_r+0xaa>
 80083c6:	2b16      	cmp	r3, #22
 80083c8:	d11d      	bne.n	8008406 <__sflush_r+0xe6>
 80083ca:	602f      	str	r7, [r5, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e021      	b.n	8008414 <__sflush_r+0xf4>
 80083d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d4:	b21b      	sxth	r3, r3
 80083d6:	e01a      	b.n	800840e <__sflush_r+0xee>
 80083d8:	690f      	ldr	r7, [r1, #16]
 80083da:	2f00      	cmp	r7, #0
 80083dc:	d0f6      	beq.n	80083cc <__sflush_r+0xac>
 80083de:	0793      	lsls	r3, r2, #30
 80083e0:	bf18      	it	ne
 80083e2:	2300      	movne	r3, #0
 80083e4:	680e      	ldr	r6, [r1, #0]
 80083e6:	bf08      	it	eq
 80083e8:	694b      	ldreq	r3, [r1, #20]
 80083ea:	1bf6      	subs	r6, r6, r7
 80083ec:	600f      	str	r7, [r1, #0]
 80083ee:	608b      	str	r3, [r1, #8]
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	ddeb      	ble.n	80083cc <__sflush_r+0xac>
 80083f4:	4633      	mov	r3, r6
 80083f6:	463a      	mov	r2, r7
 80083f8:	4628      	mov	r0, r5
 80083fa:	6a21      	ldr	r1, [r4, #32]
 80083fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008400:	47e0      	blx	ip
 8008402:	2800      	cmp	r0, #0
 8008404:	dc07      	bgt.n	8008416 <__sflush_r+0xf6>
 8008406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840e:	f04f 30ff 	mov.w	r0, #4294967295
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008416:	4407      	add	r7, r0
 8008418:	1a36      	subs	r6, r6, r0
 800841a:	e7e9      	b.n	80083f0 <__sflush_r+0xd0>
 800841c:	20400001 	.word	0x20400001

08008420 <_fflush_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	690b      	ldr	r3, [r1, #16]
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b913      	cbnz	r3, 8008430 <_fflush_r+0x10>
 800842a:	2500      	movs	r5, #0
 800842c:	4628      	mov	r0, r5
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	b118      	cbz	r0, 800843a <_fflush_r+0x1a>
 8008432:	6a03      	ldr	r3, [r0, #32]
 8008434:	b90b      	cbnz	r3, 800843a <_fflush_r+0x1a>
 8008436:	f7fe fb69 	bl	8006b0c <__sinit>
 800843a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f3      	beq.n	800842a <_fflush_r+0xa>
 8008442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008444:	07d0      	lsls	r0, r2, #31
 8008446:	d404      	bmi.n	8008452 <_fflush_r+0x32>
 8008448:	0599      	lsls	r1, r3, #22
 800844a:	d402      	bmi.n	8008452 <_fflush_r+0x32>
 800844c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800844e:	f7fe fc54 	bl	8006cfa <__retarget_lock_acquire_recursive>
 8008452:	4628      	mov	r0, r5
 8008454:	4621      	mov	r1, r4
 8008456:	f7ff ff63 	bl	8008320 <__sflush_r>
 800845a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800845c:	4605      	mov	r5, r0
 800845e:	07da      	lsls	r2, r3, #31
 8008460:	d4e4      	bmi.n	800842c <_fflush_r+0xc>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	059b      	lsls	r3, r3, #22
 8008466:	d4e1      	bmi.n	800842c <_fflush_r+0xc>
 8008468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800846a:	f7fe fc47 	bl	8006cfc <__retarget_lock_release_recursive>
 800846e:	e7dd      	b.n	800842c <_fflush_r+0xc>

08008470 <_sbrk_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	2300      	movs	r3, #0
 8008474:	4d05      	ldr	r5, [pc, #20]	@ (800848c <_sbrk_r+0x1c>)
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7f9 fd74 	bl	8001f68 <_sbrk>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_sbrk_r+0x1a>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_sbrk_r+0x1a>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	200004a8 	.word	0x200004a8

08008490 <__assert_func>:
 8008490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008492:	4614      	mov	r4, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <__assert_func+0x2c>)
 8008498:	4605      	mov	r5, r0
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68d8      	ldr	r0, [r3, #12]
 800849e:	b14c      	cbz	r4, 80084b4 <__assert_func+0x24>
 80084a0:	4b07      	ldr	r3, [pc, #28]	@ (80084c0 <__assert_func+0x30>)
 80084a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084a6:	9100      	str	r1, [sp, #0]
 80084a8:	462b      	mov	r3, r5
 80084aa:	4906      	ldr	r1, [pc, #24]	@ (80084c4 <__assert_func+0x34>)
 80084ac:	f000 f822 	bl	80084f4 <fiprintf>
 80084b0:	f000 f832 	bl	8008518 <abort>
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <__assert_func+0x38>)
 80084b6:	461c      	mov	r4, r3
 80084b8:	e7f3      	b.n	80084a2 <__assert_func+0x12>
 80084ba:	bf00      	nop
 80084bc:	20000190 	.word	0x20000190
 80084c0:	0800e4dd 	.word	0x0800e4dd
 80084c4:	0800e4ea 	.word	0x0800e4ea
 80084c8:	0800e518 	.word	0x0800e518

080084cc <_calloc_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	fba1 5402 	umull	r5, r4, r1, r2
 80084d2:	b934      	cbnz	r4, 80084e2 <_calloc_r+0x16>
 80084d4:	4629      	mov	r1, r5
 80084d6:	f7ff fafd 	bl	8007ad4 <_malloc_r>
 80084da:	4606      	mov	r6, r0
 80084dc:	b928      	cbnz	r0, 80084ea <_calloc_r+0x1e>
 80084de:	4630      	mov	r0, r6
 80084e0:	bd70      	pop	{r4, r5, r6, pc}
 80084e2:	220c      	movs	r2, #12
 80084e4:	2600      	movs	r6, #0
 80084e6:	6002      	str	r2, [r0, #0]
 80084e8:	e7f9      	b.n	80084de <_calloc_r+0x12>
 80084ea:	462a      	mov	r2, r5
 80084ec:	4621      	mov	r1, r4
 80084ee:	f7fe fb86 	bl	8006bfe <memset>
 80084f2:	e7f4      	b.n	80084de <_calloc_r+0x12>

080084f4 <fiprintf>:
 80084f4:	b40e      	push	{r1, r2, r3}
 80084f6:	b503      	push	{r0, r1, lr}
 80084f8:	4601      	mov	r1, r0
 80084fa:	ab03      	add	r3, sp, #12
 80084fc:	4805      	ldr	r0, [pc, #20]	@ (8008514 <fiprintf+0x20>)
 80084fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008502:	6800      	ldr	r0, [r0, #0]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	f000 f835 	bl	8008574 <_vfiprintf_r>
 800850a:	b002      	add	sp, #8
 800850c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008510:	b003      	add	sp, #12
 8008512:	4770      	bx	lr
 8008514:	20000190 	.word	0x20000190

08008518 <abort>:
 8008518:	2006      	movs	r0, #6
 800851a:	b508      	push	{r3, lr}
 800851c:	f000 f9fe 	bl	800891c <raise>
 8008520:	2001      	movs	r0, #1
 8008522:	f7f9 fcc8 	bl	8001eb6 <_exit>

08008526 <__sfputc_r>:
 8008526:	6893      	ldr	r3, [r2, #8]
 8008528:	b410      	push	{r4}
 800852a:	3b01      	subs	r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	6093      	str	r3, [r2, #8]
 8008530:	da07      	bge.n	8008542 <__sfputc_r+0x1c>
 8008532:	6994      	ldr	r4, [r2, #24]
 8008534:	42a3      	cmp	r3, r4
 8008536:	db01      	blt.n	800853c <__sfputc_r+0x16>
 8008538:	290a      	cmp	r1, #10
 800853a:	d102      	bne.n	8008542 <__sfputc_r+0x1c>
 800853c:	bc10      	pop	{r4}
 800853e:	f000 b931 	b.w	80087a4 <__swbuf_r>
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	1c58      	adds	r0, r3, #1
 8008546:	6010      	str	r0, [r2, #0]
 8008548:	7019      	strb	r1, [r3, #0]
 800854a:	4608      	mov	r0, r1
 800854c:	bc10      	pop	{r4}
 800854e:	4770      	bx	lr

08008550 <__sfputs_r>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	4614      	mov	r4, r2
 8008558:	18d5      	adds	r5, r2, r3
 800855a:	42ac      	cmp	r4, r5
 800855c:	d101      	bne.n	8008562 <__sfputs_r+0x12>
 800855e:	2000      	movs	r0, #0
 8008560:	e007      	b.n	8008572 <__sfputs_r+0x22>
 8008562:	463a      	mov	r2, r7
 8008564:	4630      	mov	r0, r6
 8008566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856a:	f7ff ffdc 	bl	8008526 <__sfputc_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d1f3      	bne.n	800855a <__sfputs_r+0xa>
 8008572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008574 <_vfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	460d      	mov	r5, r1
 800857a:	4614      	mov	r4, r2
 800857c:	4698      	mov	r8, r3
 800857e:	4606      	mov	r6, r0
 8008580:	b09d      	sub	sp, #116	@ 0x74
 8008582:	b118      	cbz	r0, 800858c <_vfiprintf_r+0x18>
 8008584:	6a03      	ldr	r3, [r0, #32]
 8008586:	b90b      	cbnz	r3, 800858c <_vfiprintf_r+0x18>
 8008588:	f7fe fac0 	bl	8006b0c <__sinit>
 800858c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	d405      	bmi.n	800859e <_vfiprintf_r+0x2a>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	059a      	lsls	r2, r3, #22
 8008596:	d402      	bmi.n	800859e <_vfiprintf_r+0x2a>
 8008598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800859a:	f7fe fbae 	bl	8006cfa <__retarget_lock_acquire_recursive>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	071b      	lsls	r3, r3, #28
 80085a2:	d501      	bpl.n	80085a8 <_vfiprintf_r+0x34>
 80085a4:	692b      	ldr	r3, [r5, #16]
 80085a6:	b99b      	cbnz	r3, 80085d0 <_vfiprintf_r+0x5c>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4630      	mov	r0, r6
 80085ac:	f000 f938 	bl	8008820 <__swsetup_r>
 80085b0:	b170      	cbz	r0, 80085d0 <_vfiprintf_r+0x5c>
 80085b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085b4:	07dc      	lsls	r4, r3, #31
 80085b6:	d504      	bpl.n	80085c2 <_vfiprintf_r+0x4e>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	b01d      	add	sp, #116	@ 0x74
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	0598      	lsls	r0, r3, #22
 80085c6:	d4f7      	bmi.n	80085b8 <_vfiprintf_r+0x44>
 80085c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ca:	f7fe fb97 	bl	8006cfc <__retarget_lock_release_recursive>
 80085ce:	e7f3      	b.n	80085b8 <_vfiprintf_r+0x44>
 80085d0:	2300      	movs	r3, #0
 80085d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d4:	2320      	movs	r3, #32
 80085d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085da:	2330      	movs	r3, #48	@ 0x30
 80085dc:	f04f 0901 	mov.w	r9, #1
 80085e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008790 <_vfiprintf_r+0x21c>
 80085e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ec:	4623      	mov	r3, r4
 80085ee:	469a      	mov	sl, r3
 80085f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f4:	b10a      	cbz	r2, 80085fa <_vfiprintf_r+0x86>
 80085f6:	2a25      	cmp	r2, #37	@ 0x25
 80085f8:	d1f9      	bne.n	80085ee <_vfiprintf_r+0x7a>
 80085fa:	ebba 0b04 	subs.w	fp, sl, r4
 80085fe:	d00b      	beq.n	8008618 <_vfiprintf_r+0xa4>
 8008600:	465b      	mov	r3, fp
 8008602:	4622      	mov	r2, r4
 8008604:	4629      	mov	r1, r5
 8008606:	4630      	mov	r0, r6
 8008608:	f7ff ffa2 	bl	8008550 <__sfputs_r>
 800860c:	3001      	adds	r0, #1
 800860e:	f000 80a7 	beq.w	8008760 <_vfiprintf_r+0x1ec>
 8008612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008614:	445a      	add	r2, fp
 8008616:	9209      	str	r2, [sp, #36]	@ 0x24
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 809f 	beq.w	8008760 <_vfiprintf_r+0x1ec>
 8008622:	2300      	movs	r3, #0
 8008624:	f04f 32ff 	mov.w	r2, #4294967295
 8008628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862c:	f10a 0a01 	add.w	sl, sl, #1
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008638:	931a      	str	r3, [sp, #104]	@ 0x68
 800863a:	4654      	mov	r4, sl
 800863c:	2205      	movs	r2, #5
 800863e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008642:	4853      	ldr	r0, [pc, #332]	@ (8008790 <_vfiprintf_r+0x21c>)
 8008644:	f7fe fb5b 	bl	8006cfe <memchr>
 8008648:	9a04      	ldr	r2, [sp, #16]
 800864a:	b9d8      	cbnz	r0, 8008684 <_vfiprintf_r+0x110>
 800864c:	06d1      	lsls	r1, r2, #27
 800864e:	bf44      	itt	mi
 8008650:	2320      	movmi	r3, #32
 8008652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008656:	0713      	lsls	r3, r2, #28
 8008658:	bf44      	itt	mi
 800865a:	232b      	movmi	r3, #43	@ 0x2b
 800865c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008660:	f89a 3000 	ldrb.w	r3, [sl]
 8008664:	2b2a      	cmp	r3, #42	@ 0x2a
 8008666:	d015      	beq.n	8008694 <_vfiprintf_r+0x120>
 8008668:	4654      	mov	r4, sl
 800866a:	2000      	movs	r0, #0
 800866c:	f04f 0c0a 	mov.w	ip, #10
 8008670:	9a07      	ldr	r2, [sp, #28]
 8008672:	4621      	mov	r1, r4
 8008674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008678:	3b30      	subs	r3, #48	@ 0x30
 800867a:	2b09      	cmp	r3, #9
 800867c:	d94b      	bls.n	8008716 <_vfiprintf_r+0x1a2>
 800867e:	b1b0      	cbz	r0, 80086ae <_vfiprintf_r+0x13a>
 8008680:	9207      	str	r2, [sp, #28]
 8008682:	e014      	b.n	80086ae <_vfiprintf_r+0x13a>
 8008684:	eba0 0308 	sub.w	r3, r0, r8
 8008688:	fa09 f303 	lsl.w	r3, r9, r3
 800868c:	4313      	orrs	r3, r2
 800868e:	46a2      	mov	sl, r4
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	e7d2      	b.n	800863a <_vfiprintf_r+0xc6>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1d19      	adds	r1, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9103      	str	r1, [sp, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfbb      	ittet	lt
 80086a0:	425b      	neglt	r3, r3
 80086a2:	f042 0202 	orrlt.w	r2, r2, #2
 80086a6:	9307      	strge	r3, [sp, #28]
 80086a8:	9307      	strlt	r3, [sp, #28]
 80086aa:	bfb8      	it	lt
 80086ac:	9204      	strlt	r2, [sp, #16]
 80086ae:	7823      	ldrb	r3, [r4, #0]
 80086b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b2:	d10a      	bne.n	80086ca <_vfiprintf_r+0x156>
 80086b4:	7863      	ldrb	r3, [r4, #1]
 80086b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b8:	d132      	bne.n	8008720 <_vfiprintf_r+0x1ac>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	3402      	adds	r4, #2
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9203      	str	r2, [sp, #12]
 80086c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c8:	9305      	str	r3, [sp, #20]
 80086ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008794 <_vfiprintf_r+0x220>
 80086ce:	2203      	movs	r2, #3
 80086d0:	4650      	mov	r0, sl
 80086d2:	7821      	ldrb	r1, [r4, #0]
 80086d4:	f7fe fb13 	bl	8006cfe <memchr>
 80086d8:	b138      	cbz	r0, 80086ea <_vfiprintf_r+0x176>
 80086da:	2240      	movs	r2, #64	@ 0x40
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	eba0 000a 	sub.w	r0, r0, sl
 80086e2:	4082      	lsls	r2, r0
 80086e4:	4313      	orrs	r3, r2
 80086e6:	3401      	adds	r4, #1
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ee:	2206      	movs	r2, #6
 80086f0:	4829      	ldr	r0, [pc, #164]	@ (8008798 <_vfiprintf_r+0x224>)
 80086f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086f6:	f7fe fb02 	bl	8006cfe <memchr>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d03f      	beq.n	800877e <_vfiprintf_r+0x20a>
 80086fe:	4b27      	ldr	r3, [pc, #156]	@ (800879c <_vfiprintf_r+0x228>)
 8008700:	bb1b      	cbnz	r3, 800874a <_vfiprintf_r+0x1d6>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	3307      	adds	r3, #7
 8008706:	f023 0307 	bic.w	r3, r3, #7
 800870a:	3308      	adds	r3, #8
 800870c:	9303      	str	r3, [sp, #12]
 800870e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008710:	443b      	add	r3, r7
 8008712:	9309      	str	r3, [sp, #36]	@ 0x24
 8008714:	e76a      	b.n	80085ec <_vfiprintf_r+0x78>
 8008716:	460c      	mov	r4, r1
 8008718:	2001      	movs	r0, #1
 800871a:	fb0c 3202 	mla	r2, ip, r2, r3
 800871e:	e7a8      	b.n	8008672 <_vfiprintf_r+0xfe>
 8008720:	2300      	movs	r3, #0
 8008722:	f04f 0c0a 	mov.w	ip, #10
 8008726:	4619      	mov	r1, r3
 8008728:	3401      	adds	r4, #1
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	4620      	mov	r0, r4
 800872e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008732:	3a30      	subs	r2, #48	@ 0x30
 8008734:	2a09      	cmp	r2, #9
 8008736:	d903      	bls.n	8008740 <_vfiprintf_r+0x1cc>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0c6      	beq.n	80086ca <_vfiprintf_r+0x156>
 800873c:	9105      	str	r1, [sp, #20]
 800873e:	e7c4      	b.n	80086ca <_vfiprintf_r+0x156>
 8008740:	4604      	mov	r4, r0
 8008742:	2301      	movs	r3, #1
 8008744:	fb0c 2101 	mla	r1, ip, r1, r2
 8008748:	e7f0      	b.n	800872c <_vfiprintf_r+0x1b8>
 800874a:	ab03      	add	r3, sp, #12
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	462a      	mov	r2, r5
 8008750:	4630      	mov	r0, r6
 8008752:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <_vfiprintf_r+0x22c>)
 8008754:	a904      	add	r1, sp, #16
 8008756:	f7fd fd91 	bl	800627c <_printf_float>
 800875a:	4607      	mov	r7, r0
 800875c:	1c78      	adds	r0, r7, #1
 800875e:	d1d6      	bne.n	800870e <_vfiprintf_r+0x19a>
 8008760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008762:	07d9      	lsls	r1, r3, #31
 8008764:	d405      	bmi.n	8008772 <_vfiprintf_r+0x1fe>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	059a      	lsls	r2, r3, #22
 800876a:	d402      	bmi.n	8008772 <_vfiprintf_r+0x1fe>
 800876c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876e:	f7fe fac5 	bl	8006cfc <__retarget_lock_release_recursive>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	065b      	lsls	r3, r3, #25
 8008776:	f53f af1f 	bmi.w	80085b8 <_vfiprintf_r+0x44>
 800877a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800877c:	e71e      	b.n	80085bc <_vfiprintf_r+0x48>
 800877e:	ab03      	add	r3, sp, #12
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	462a      	mov	r2, r5
 8008784:	4630      	mov	r0, r6
 8008786:	4b06      	ldr	r3, [pc, #24]	@ (80087a0 <_vfiprintf_r+0x22c>)
 8008788:	a904      	add	r1, sp, #16
 800878a:	f7fe f815 	bl	80067b8 <_printf_i>
 800878e:	e7e4      	b.n	800875a <_vfiprintf_r+0x1e6>
 8008790:	0800e519 	.word	0x0800e519
 8008794:	0800e51f 	.word	0x0800e51f
 8008798:	0800e523 	.word	0x0800e523
 800879c:	0800627d 	.word	0x0800627d
 80087a0:	08008551 	.word	0x08008551

080087a4 <__swbuf_r>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	460e      	mov	r6, r1
 80087a8:	4614      	mov	r4, r2
 80087aa:	4605      	mov	r5, r0
 80087ac:	b118      	cbz	r0, 80087b6 <__swbuf_r+0x12>
 80087ae:	6a03      	ldr	r3, [r0, #32]
 80087b0:	b90b      	cbnz	r3, 80087b6 <__swbuf_r+0x12>
 80087b2:	f7fe f9ab 	bl	8006b0c <__sinit>
 80087b6:	69a3      	ldr	r3, [r4, #24]
 80087b8:	60a3      	str	r3, [r4, #8]
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	071a      	lsls	r2, r3, #28
 80087be:	d501      	bpl.n	80087c4 <__swbuf_r+0x20>
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	b943      	cbnz	r3, 80087d6 <__swbuf_r+0x32>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f82a 	bl	8008820 <__swsetup_r>
 80087cc:	b118      	cbz	r0, 80087d6 <__swbuf_r+0x32>
 80087ce:	f04f 37ff 	mov.w	r7, #4294967295
 80087d2:	4638      	mov	r0, r7
 80087d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	6922      	ldr	r2, [r4, #16]
 80087da:	b2f6      	uxtb	r6, r6
 80087dc:	1a98      	subs	r0, r3, r2
 80087de:	6963      	ldr	r3, [r4, #20]
 80087e0:	4637      	mov	r7, r6
 80087e2:	4283      	cmp	r3, r0
 80087e4:	dc05      	bgt.n	80087f2 <__swbuf_r+0x4e>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7ff fe19 	bl	8008420 <_fflush_r>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d1ed      	bne.n	80087ce <__swbuf_r+0x2a>
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	60a3      	str	r3, [r4, #8]
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	701e      	strb	r6, [r3, #0]
 8008800:	6962      	ldr	r2, [r4, #20]
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	429a      	cmp	r2, r3
 8008806:	d004      	beq.n	8008812 <__swbuf_r+0x6e>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	07db      	lsls	r3, r3, #31
 800880c:	d5e1      	bpl.n	80087d2 <__swbuf_r+0x2e>
 800880e:	2e0a      	cmp	r6, #10
 8008810:	d1df      	bne.n	80087d2 <__swbuf_r+0x2e>
 8008812:	4621      	mov	r1, r4
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fe03 	bl	8008420 <_fflush_r>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0d9      	beq.n	80087d2 <__swbuf_r+0x2e>
 800881e:	e7d6      	b.n	80087ce <__swbuf_r+0x2a>

08008820 <__swsetup_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4b29      	ldr	r3, [pc, #164]	@ (80088c8 <__swsetup_r+0xa8>)
 8008824:	4605      	mov	r5, r0
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	460c      	mov	r4, r1
 800882a:	b118      	cbz	r0, 8008834 <__swsetup_r+0x14>
 800882c:	6a03      	ldr	r3, [r0, #32]
 800882e:	b90b      	cbnz	r3, 8008834 <__swsetup_r+0x14>
 8008830:	f7fe f96c 	bl	8006b0c <__sinit>
 8008834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008838:	0719      	lsls	r1, r3, #28
 800883a:	d422      	bmi.n	8008882 <__swsetup_r+0x62>
 800883c:	06da      	lsls	r2, r3, #27
 800883e:	d407      	bmi.n	8008850 <__swsetup_r+0x30>
 8008840:	2209      	movs	r2, #9
 8008842:	602a      	str	r2, [r5, #0]
 8008844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	e033      	b.n	80088b8 <__swsetup_r+0x98>
 8008850:	0758      	lsls	r0, r3, #29
 8008852:	d512      	bpl.n	800887a <__swsetup_r+0x5a>
 8008854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008856:	b141      	cbz	r1, 800886a <__swsetup_r+0x4a>
 8008858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d002      	beq.n	8008866 <__swsetup_r+0x46>
 8008860:	4628      	mov	r0, r5
 8008862:	f7ff f8c5 	bl	80079f0 <_free_r>
 8008866:	2300      	movs	r3, #0
 8008868:	6363      	str	r3, [r4, #52]	@ 0x34
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	2300      	movs	r3, #0
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	b94b      	cbnz	r3, 800889a <__swsetup_r+0x7a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800888c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008890:	d003      	beq.n	800889a <__swsetup_r+0x7a>
 8008892:	4621      	mov	r1, r4
 8008894:	4628      	mov	r0, r5
 8008896:	f000 f882 	bl	800899e <__smakebuf_r>
 800889a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889e:	f013 0201 	ands.w	r2, r3, #1
 80088a2:	d00a      	beq.n	80088ba <__swsetup_r+0x9a>
 80088a4:	2200      	movs	r2, #0
 80088a6:	60a2      	str	r2, [r4, #8]
 80088a8:	6962      	ldr	r2, [r4, #20]
 80088aa:	4252      	negs	r2, r2
 80088ac:	61a2      	str	r2, [r4, #24]
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	b942      	cbnz	r2, 80088c4 <__swsetup_r+0xa4>
 80088b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088b6:	d1c5      	bne.n	8008844 <__swsetup_r+0x24>
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
 80088ba:	0799      	lsls	r1, r3, #30
 80088bc:	bf58      	it	pl
 80088be:	6962      	ldrpl	r2, [r4, #20]
 80088c0:	60a2      	str	r2, [r4, #8]
 80088c2:	e7f4      	b.n	80088ae <__swsetup_r+0x8e>
 80088c4:	2000      	movs	r0, #0
 80088c6:	e7f7      	b.n	80088b8 <__swsetup_r+0x98>
 80088c8:	20000190 	.word	0x20000190

080088cc <_raise_r>:
 80088cc:	291f      	cmp	r1, #31
 80088ce:	b538      	push	{r3, r4, r5, lr}
 80088d0:	4605      	mov	r5, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	d904      	bls.n	80088e0 <_raise_r+0x14>
 80088d6:	2316      	movs	r3, #22
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088e2:	b112      	cbz	r2, 80088ea <_raise_r+0x1e>
 80088e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088e8:	b94b      	cbnz	r3, 80088fe <_raise_r+0x32>
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 f830 	bl	8008950 <_getpid_r>
 80088f0:	4622      	mov	r2, r4
 80088f2:	4601      	mov	r1, r0
 80088f4:	4628      	mov	r0, r5
 80088f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088fa:	f000 b817 	b.w	800892c <_kill_r>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d00a      	beq.n	8008918 <_raise_r+0x4c>
 8008902:	1c59      	adds	r1, r3, #1
 8008904:	d103      	bne.n	800890e <_raise_r+0x42>
 8008906:	2316      	movs	r3, #22
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	2001      	movs	r0, #1
 800890c:	e7e7      	b.n	80088de <_raise_r+0x12>
 800890e:	2100      	movs	r1, #0
 8008910:	4620      	mov	r0, r4
 8008912:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008916:	4798      	blx	r3
 8008918:	2000      	movs	r0, #0
 800891a:	e7e0      	b.n	80088de <_raise_r+0x12>

0800891c <raise>:
 800891c:	4b02      	ldr	r3, [pc, #8]	@ (8008928 <raise+0xc>)
 800891e:	4601      	mov	r1, r0
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f7ff bfd3 	b.w	80088cc <_raise_r>
 8008926:	bf00      	nop
 8008928:	20000190 	.word	0x20000190

0800892c <_kill_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	2300      	movs	r3, #0
 8008930:	4d06      	ldr	r5, [pc, #24]	@ (800894c <_kill_r+0x20>)
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	4611      	mov	r1, r2
 8008938:	602b      	str	r3, [r5, #0]
 800893a:	f7f9 faac 	bl	8001e96 <_kill>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d102      	bne.n	8008948 <_kill_r+0x1c>
 8008942:	682b      	ldr	r3, [r5, #0]
 8008944:	b103      	cbz	r3, 8008948 <_kill_r+0x1c>
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	bd38      	pop	{r3, r4, r5, pc}
 800894a:	bf00      	nop
 800894c:	200004a8 	.word	0x200004a8

08008950 <_getpid_r>:
 8008950:	f7f9 ba9a 	b.w	8001e88 <_getpid>

08008954 <__swhatbuf_r>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	4615      	mov	r5, r2
 800895e:	2900      	cmp	r1, #0
 8008960:	461e      	mov	r6, r3
 8008962:	b096      	sub	sp, #88	@ 0x58
 8008964:	da0c      	bge.n	8008980 <__swhatbuf_r+0x2c>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	2100      	movs	r1, #0
 800896a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800896e:	bf14      	ite	ne
 8008970:	2340      	movne	r3, #64	@ 0x40
 8008972:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008976:	2000      	movs	r0, #0
 8008978:	6031      	str	r1, [r6, #0]
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	b016      	add	sp, #88	@ 0x58
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	466a      	mov	r2, sp
 8008982:	f000 f849 	bl	8008a18 <_fstat_r>
 8008986:	2800      	cmp	r0, #0
 8008988:	dbed      	blt.n	8008966 <__swhatbuf_r+0x12>
 800898a:	9901      	ldr	r1, [sp, #4]
 800898c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008990:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008994:	4259      	negs	r1, r3
 8008996:	4159      	adcs	r1, r3
 8008998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800899c:	e7eb      	b.n	8008976 <__swhatbuf_r+0x22>

0800899e <__smakebuf_r>:
 800899e:	898b      	ldrh	r3, [r1, #12]
 80089a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089a2:	079d      	lsls	r5, r3, #30
 80089a4:	4606      	mov	r6, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	d507      	bpl.n	80089ba <__smakebuf_r+0x1c>
 80089aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	2301      	movs	r3, #1
 80089b4:	6163      	str	r3, [r4, #20]
 80089b6:	b003      	add	sp, #12
 80089b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ba:	466a      	mov	r2, sp
 80089bc:	ab01      	add	r3, sp, #4
 80089be:	f7ff ffc9 	bl	8008954 <__swhatbuf_r>
 80089c2:	9f00      	ldr	r7, [sp, #0]
 80089c4:	4605      	mov	r5, r0
 80089c6:	4639      	mov	r1, r7
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff f883 	bl	8007ad4 <_malloc_r>
 80089ce:	b948      	cbnz	r0, 80089e4 <__smakebuf_r+0x46>
 80089d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d4ee      	bmi.n	80089b6 <__smakebuf_r+0x18>
 80089d8:	f023 0303 	bic.w	r3, r3, #3
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	e7e2      	b.n	80089aa <__smakebuf_r+0xc>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	b15b      	cbz	r3, 8008a0e <__smakebuf_r+0x70>
 80089f6:	4630      	mov	r0, r6
 80089f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fc:	f000 f81e 	bl	8008a3c <_isatty_r>
 8008a00:	b128      	cbz	r0, 8008a0e <__smakebuf_r+0x70>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f023 0303 	bic.w	r3, r3, #3
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	431d      	orrs	r5, r3
 8008a12:	81a5      	strh	r5, [r4, #12]
 8008a14:	e7cf      	b.n	80089b6 <__smakebuf_r+0x18>
	...

08008a18 <_fstat_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4d06      	ldr	r5, [pc, #24]	@ (8008a38 <_fstat_r+0x20>)
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	f7f9 fa79 	bl	8001f1c <_fstat>
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	d102      	bne.n	8008a34 <_fstat_r+0x1c>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	b103      	cbz	r3, 8008a34 <_fstat_r+0x1c>
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	bf00      	nop
 8008a38:	200004a8 	.word	0x200004a8

08008a3c <_isatty_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4d05      	ldr	r5, [pc, #20]	@ (8008a58 <_isatty_r+0x1c>)
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	f7f9 fa77 	bl	8001f3a <_isatty>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_isatty_r+0x1a>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_isatty_r+0x1a>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	200004a8 	.word	0x200004a8

08008a5c <cos>:
 8008a5c:	b530      	push	{r4, r5, lr}
 8008a5e:	4d20      	ldr	r5, [pc, #128]	@ (8008ae0 <cos+0x84>)
 8008a60:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8008a64:	42ac      	cmp	r4, r5
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	d806      	bhi.n	8008a7c <cos+0x20>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2300      	movs	r3, #0
 8008a72:	b007      	add	sp, #28
 8008a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a78:	f000 b8c2 	b.w	8008c00 <__kernel_cos>
 8008a7c:	4d19      	ldr	r5, [pc, #100]	@ (8008ae4 <cos+0x88>)
 8008a7e:	42ac      	cmp	r4, r5
 8008a80:	d903      	bls.n	8008a8a <cos+0x2e>
 8008a82:	f7f7 fbdd 	bl	8000240 <__aeabi_dsub>
 8008a86:	b007      	add	sp, #28
 8008a88:	bd30      	pop	{r4, r5, pc}
 8008a8a:	aa02      	add	r2, sp, #8
 8008a8c:	f000 fa30 	bl	8008ef0 <__ieee754_rem_pio2>
 8008a90:	f000 0003 	and.w	r0, r0, #3
 8008a94:	2801      	cmp	r0, #1
 8008a96:	d009      	beq.n	8008aac <cos+0x50>
 8008a98:	2802      	cmp	r0, #2
 8008a9a:	d011      	beq.n	8008ac0 <cos+0x64>
 8008a9c:	b9b8      	cbnz	r0, 8008ace <cos+0x72>
 8008a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	f000 f8ab 	bl	8008c00 <__kernel_cos>
 8008aaa:	e7ec      	b.n	8008a86 <cos+0x2a>
 8008aac:	9000      	str	r0, [sp, #0]
 8008aae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab6:	f000 f963 	bl	8008d80 <__kernel_sin>
 8008aba:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8008abe:	e7e2      	b.n	8008a86 <cos+0x2a>
 8008ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac8:	f000 f89a 	bl	8008c00 <__kernel_cos>
 8008acc:	e7f5      	b.n	8008aba <cos+0x5e>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ada:	f000 f951 	bl	8008d80 <__kernel_sin>
 8008ade:	e7d2      	b.n	8008a86 <cos+0x2a>
 8008ae0:	3fe921fb 	.word	0x3fe921fb
 8008ae4:	7fefffff 	.word	0x7fefffff

08008ae8 <sin>:
 8008ae8:	b530      	push	{r4, r5, lr}
 8008aea:	4d20      	ldr	r5, [pc, #128]	@ (8008b6c <sin+0x84>)
 8008aec:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8008af0:	42ac      	cmp	r4, r5
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	b087      	sub	sp, #28
 8008af8:	d806      	bhi.n	8008b08 <sin+0x20>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2200      	movs	r2, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	f000 f93d 	bl	8008d80 <__kernel_sin>
 8008b06:	e004      	b.n	8008b12 <sin+0x2a>
 8008b08:	4d19      	ldr	r5, [pc, #100]	@ (8008b70 <sin+0x88>)
 8008b0a:	42ac      	cmp	r4, r5
 8008b0c:	d903      	bls.n	8008b16 <sin+0x2e>
 8008b0e:	f7f7 fb97 	bl	8000240 <__aeabi_dsub>
 8008b12:	b007      	add	sp, #28
 8008b14:	bd30      	pop	{r4, r5, pc}
 8008b16:	aa02      	add	r2, sp, #8
 8008b18:	f000 f9ea 	bl	8008ef0 <__ieee754_rem_pio2>
 8008b1c:	f000 0003 	and.w	r0, r0, #3
 8008b20:	2801      	cmp	r0, #1
 8008b22:	d009      	beq.n	8008b38 <sin+0x50>
 8008b24:	2802      	cmp	r0, #2
 8008b26:	d00e      	beq.n	8008b46 <sin+0x5e>
 8008b28:	b9c0      	cbnz	r0, 8008b5c <sin+0x74>
 8008b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2e:	2301      	movs	r3, #1
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b36:	e7e4      	b.n	8008b02 <sin+0x1a>
 8008b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b40:	f000 f85e 	bl	8008c00 <__kernel_cos>
 8008b44:	e7e5      	b.n	8008b12 <sin+0x2a>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b52:	f000 f915 	bl	8008d80 <__kernel_sin>
 8008b56:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8008b5a:	e7da      	b.n	8008b12 <sin+0x2a>
 8008b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b64:	f000 f84c 	bl	8008c00 <__kernel_cos>
 8008b68:	e7f5      	b.n	8008b56 <sin+0x6e>
 8008b6a:	bf00      	nop
 8008b6c:	3fe921fb 	.word	0x3fe921fb
 8008b70:	7fefffff 	.word	0x7fefffff

08008b74 <round>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008b7a:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008b7e:	2a13      	cmp	r2, #19
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	460b      	mov	r3, r1
 8008b86:	dc1a      	bgt.n	8008bbe <round+0x4a>
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	da0b      	bge.n	8008ba4 <round+0x30>
 8008b8c:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008b90:	3201      	adds	r2, #1
 8008b92:	bf04      	itt	eq
 8008b94:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b98:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	461d      	mov	r5, r3
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	e016      	b.n	8008bd2 <round+0x5e>
 8008ba4:	4815      	ldr	r0, [pc, #84]	@ (8008bfc <round+0x88>)
 8008ba6:	4110      	asrs	r0, r2
 8008ba8:	4001      	ands	r1, r0
 8008baa:	4321      	orrs	r1, r4
 8008bac:	d011      	beq.n	8008bd2 <round+0x5e>
 8008bae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008bb2:	fa41 f202 	asr.w	r2, r1, r2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	ea23 0300 	bic.w	r3, r3, r0
 8008bbc:	e7ee      	b.n	8008b9c <round+0x28>
 8008bbe:	2a33      	cmp	r2, #51	@ 0x33
 8008bc0:	dd0a      	ble.n	8008bd8 <round+0x64>
 8008bc2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008bc6:	d104      	bne.n	8008bd2 <round+0x5e>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	f7f7 fb3b 	bl	8000244 <__adddf3>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008be0:	40f8      	lsrs	r0, r7
 8008be2:	4220      	tst	r0, r4
 8008be4:	d0f5      	beq.n	8008bd2 <round+0x5e>
 8008be6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008bea:	2201      	movs	r2, #1
 8008bec:	408a      	lsls	r2, r1
 8008bee:	1912      	adds	r2, r2, r4
 8008bf0:	bf28      	it	cs
 8008bf2:	3301      	addcs	r3, #1
 8008bf4:	ea22 0200 	bic.w	r2, r2, r0
 8008bf8:	e7d1      	b.n	8008b9e <round+0x2a>
 8008bfa:	bf00      	nop
 8008bfc:	000fffff 	.word	0x000fffff

08008c00 <__kernel_cos>:
 8008c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008c08:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4689      	mov	r9, r1
 8008c10:	e9cd 2300 	strd	r2, r3, [sp]
 8008c14:	d204      	bcs.n	8008c20 <__kernel_cos+0x20>
 8008c16:	f7f7 ff7b 	bl	8000b10 <__aeabi_d2iz>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f000 8086 	beq.w	8008d2c <__kernel_cos+0x12c>
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	f7f7 fcc2 	bl	80005b0 <__aeabi_dmul>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8008d68 <__kernel_cos+0x168>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	f7f7 fcbc 	bl	80005b0 <__aeabi_dmul>
 8008c38:	a33f      	add	r3, pc, #252	@ (adr r3, 8008d38 <__kernel_cos+0x138>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	4682      	mov	sl, r0
 8008c40:	468b      	mov	fp, r1
 8008c42:	4620      	mov	r0, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7f7 fcb3 	bl	80005b0 <__aeabi_dmul>
 8008c4a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008d40 <__kernel_cos+0x140>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 faf8 	bl	8000244 <__adddf3>
 8008c54:	4622      	mov	r2, r4
 8008c56:	462b      	mov	r3, r5
 8008c58:	f7f7 fcaa 	bl	80005b0 <__aeabi_dmul>
 8008c5c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008d48 <__kernel_cos+0x148>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 faed 	bl	8000240 <__aeabi_dsub>
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	f7f7 fca1 	bl	80005b0 <__aeabi_dmul>
 8008c6e:	a338      	add	r3, pc, #224	@ (adr r3, 8008d50 <__kernel_cos+0x150>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 fae6 	bl	8000244 <__adddf3>
 8008c78:	4622      	mov	r2, r4
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f7f7 fc98 	bl	80005b0 <__aeabi_dmul>
 8008c80:	a335      	add	r3, pc, #212	@ (adr r3, 8008d58 <__kernel_cos+0x158>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fadb 	bl	8000240 <__aeabi_dsub>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	f7f7 fc8f 	bl	80005b0 <__aeabi_dmul>
 8008c92:	a333      	add	r3, pc, #204	@ (adr r3, 8008d60 <__kernel_cos+0x160>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fad4 	bl	8000244 <__adddf3>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	f7f7 fc86 	bl	80005b0 <__aeabi_dmul>
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	f7f7 fc82 	bl	80005b0 <__aeabi_dmul>
 8008cac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f7f7 fc7a 	bl	80005b0 <__aeabi_dmul>
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7f7 fabc 	bl	8000240 <__aeabi_dsub>
 8008cc8:	4b28      	ldr	r3, [pc, #160]	@ (8008d6c <__kernel_cos+0x16c>)
 8008cca:	4680      	mov	r8, r0
 8008ccc:	429e      	cmp	r6, r3
 8008cce:	4689      	mov	r9, r1
 8008cd0:	d80e      	bhi.n	8008cf0 <__kernel_cos+0xf0>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	4659      	mov	r1, fp
 8008cda:	f7f7 fab1 	bl	8000240 <__aeabi_dsub>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4922      	ldr	r1, [pc, #136]	@ (8008d70 <__kernel_cos+0x170>)
 8008ce6:	f7f7 faab 	bl	8000240 <__aeabi_dsub>
 8008cea:	b003      	add	sp, #12
 8008cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf0:	2400      	movs	r4, #0
 8008cf2:	4b20      	ldr	r3, [pc, #128]	@ (8008d74 <__kernel_cos+0x174>)
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	429e      	cmp	r6, r3
 8008cf8:	bf8c      	ite	hi
 8008cfa:	4d1f      	ldrhi	r5, [pc, #124]	@ (8008d78 <__kernel_cos+0x178>)
 8008cfc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8008d00:	462b      	mov	r3, r5
 8008d02:	2000      	movs	r0, #0
 8008d04:	491a      	ldr	r1, [pc, #104]	@ (8008d70 <__kernel_cos+0x170>)
 8008d06:	f7f7 fa9b 	bl	8000240 <__aeabi_dsub>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	460f      	mov	r7, r1
 8008d10:	462b      	mov	r3, r5
 8008d12:	4650      	mov	r0, sl
 8008d14:	4659      	mov	r1, fp
 8008d16:	f7f7 fa93 	bl	8000240 <__aeabi_dsub>
 8008d1a:	4642      	mov	r2, r8
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	f7f7 fa8f 	bl	8000240 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	e7dc      	b.n	8008ce6 <__kernel_cos+0xe6>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	4910      	ldr	r1, [pc, #64]	@ (8008d70 <__kernel_cos+0x170>)
 8008d30:	e7db      	b.n	8008cea <__kernel_cos+0xea>
 8008d32:	bf00      	nop
 8008d34:	f3af 8000 	nop.w
 8008d38:	be8838d4 	.word	0xbe8838d4
 8008d3c:	bda8fae9 	.word	0xbda8fae9
 8008d40:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d44:	3e21ee9e 	.word	0x3e21ee9e
 8008d48:	809c52ad 	.word	0x809c52ad
 8008d4c:	3e927e4f 	.word	0x3e927e4f
 8008d50:	19cb1590 	.word	0x19cb1590
 8008d54:	3efa01a0 	.word	0x3efa01a0
 8008d58:	16c15177 	.word	0x16c15177
 8008d5c:	3f56c16c 	.word	0x3f56c16c
 8008d60:	5555554c 	.word	0x5555554c
 8008d64:	3fa55555 	.word	0x3fa55555
 8008d68:	3fe00000 	.word	0x3fe00000
 8008d6c:	3fd33332 	.word	0x3fd33332
 8008d70:	3ff00000 	.word	0x3ff00000
 8008d74:	3fe90000 	.word	0x3fe90000
 8008d78:	3fd20000 	.word	0x3fd20000
 8008d7c:	00000000 	.word	0x00000000

08008d80 <__kernel_sin>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	461f      	mov	r7, r3
 8008d86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d8a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008d8e:	4604      	mov	r4, r0
 8008d90:	460d      	mov	r5, r1
 8008d92:	4616      	mov	r6, r2
 8008d94:	b085      	sub	sp, #20
 8008d96:	d203      	bcs.n	8008da0 <__kernel_sin+0x20>
 8008d98:	f7f7 feba 	bl	8000b10 <__aeabi_d2iz>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d051      	beq.n	8008e44 <__kernel_sin+0xc4>
 8008da0:	4622      	mov	r2, r4
 8008da2:	462b      	mov	r3, r5
 8008da4:	4620      	mov	r0, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 fc02 	bl	80005b0 <__aeabi_dmul>
 8008dac:	4682      	mov	sl, r0
 8008dae:	468b      	mov	fp, r1
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4620      	mov	r0, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fbfa 	bl	80005b0 <__aeabi_dmul>
 8008dbc:	a33e      	add	r3, pc, #248	@ (adr r3, 8008eb8 <__kernel_sin+0x138>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	4689      	mov	r9, r1
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	4659      	mov	r1, fp
 8008dca:	f7f7 fbf1 	bl	80005b0 <__aeabi_dmul>
 8008dce:	a33c      	add	r3, pc, #240	@ (adr r3, 8008ec0 <__kernel_sin+0x140>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	f7f7 fa34 	bl	8000240 <__aeabi_dsub>
 8008dd8:	4652      	mov	r2, sl
 8008dda:	465b      	mov	r3, fp
 8008ddc:	f7f7 fbe8 	bl	80005b0 <__aeabi_dmul>
 8008de0:	a339      	add	r3, pc, #228	@ (adr r3, 8008ec8 <__kernel_sin+0x148>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fa2d 	bl	8000244 <__adddf3>
 8008dea:	4652      	mov	r2, sl
 8008dec:	465b      	mov	r3, fp
 8008dee:	f7f7 fbdf 	bl	80005b0 <__aeabi_dmul>
 8008df2:	a337      	add	r3, pc, #220	@ (adr r3, 8008ed0 <__kernel_sin+0x150>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fa22 	bl	8000240 <__aeabi_dsub>
 8008dfc:	4652      	mov	r2, sl
 8008dfe:	465b      	mov	r3, fp
 8008e00:	f7f7 fbd6 	bl	80005b0 <__aeabi_dmul>
 8008e04:	a334      	add	r3, pc, #208	@ (adr r3, 8008ed8 <__kernel_sin+0x158>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fa1b 	bl	8000244 <__adddf3>
 8008e0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e10:	e9cd 0100 	strd	r0, r1, [sp]
 8008e14:	b9db      	cbnz	r3, 8008e4e <__kernel_sin+0xce>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	f7f7 fbc7 	bl	80005b0 <__aeabi_dmul>
 8008e22:	a32f      	add	r3, pc, #188	@ (adr r3, 8008ee0 <__kernel_sin+0x160>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 fa0a 	bl	8000240 <__aeabi_dsub>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	f7f7 fbbe 	bl	80005b0 <__aeabi_dmul>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 fa02 	bl	8000244 <__adddf3>
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	b005      	add	sp, #20
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	4b24      	ldr	r3, [pc, #144]	@ (8008ee8 <__kernel_sin+0x168>)
 8008e56:	f7f7 fbab 	bl	80005b0 <__aeabi_dmul>
 8008e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f7f7 fba3 	bl	80005b0 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e72:	f7f7 f9e5 	bl	8000240 <__aeabi_dsub>
 8008e76:	4652      	mov	r2, sl
 8008e78:	465b      	mov	r3, fp
 8008e7a:	f7f7 fb99 	bl	80005b0 <__aeabi_dmul>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	f7f7 f9dd 	bl	8000240 <__aeabi_dsub>
 8008e86:	a316      	add	r3, pc, #88	@ (adr r3, 8008ee0 <__kernel_sin+0x160>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fb8c 	bl	80005b0 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 f9d0 	bl	8000244 <__adddf3>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7f7 f9c8 	bl	8000240 <__aeabi_dsub>
 8008eb0:	e7c6      	b.n	8008e40 <__kernel_sin+0xc0>
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	5acfd57c 	.word	0x5acfd57c
 8008ebc:	3de5d93a 	.word	0x3de5d93a
 8008ec0:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ec4:	3e5ae5e6 	.word	0x3e5ae5e6
 8008ec8:	57b1fe7d 	.word	0x57b1fe7d
 8008ecc:	3ec71de3 	.word	0x3ec71de3
 8008ed0:	19c161d5 	.word	0x19c161d5
 8008ed4:	3f2a01a0 	.word	0x3f2a01a0
 8008ed8:	1110f8a6 	.word	0x1110f8a6
 8008edc:	3f811111 	.word	0x3f811111
 8008ee0:	55555549 	.word	0x55555549
 8008ee4:	3fc55555 	.word	0x3fc55555
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	00000000 	.word	0x00000000

08008ef0 <__ieee754_rem_pio2>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4bc4      	ldr	r3, [pc, #784]	@ (8009208 <__ieee754_rem_pio2+0x318>)
 8008ef6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8008efa:	b08d      	sub	sp, #52	@ 0x34
 8008efc:	4598      	cmp	r8, r3
 8008efe:	4606      	mov	r6, r0
 8008f00:	460f      	mov	r7, r1
 8008f02:	4614      	mov	r4, r2
 8008f04:	9104      	str	r1, [sp, #16]
 8008f06:	d807      	bhi.n	8008f18 <__ieee754_rem_pio2+0x28>
 8008f08:	e9c2 6700 	strd	r6, r7, [r2]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008f14:	2500      	movs	r5, #0
 8008f16:	e026      	b.n	8008f66 <__ieee754_rem_pio2+0x76>
 8008f18:	4bbc      	ldr	r3, [pc, #752]	@ (800920c <__ieee754_rem_pio2+0x31c>)
 8008f1a:	4598      	cmp	r8, r3
 8008f1c:	d876      	bhi.n	800900c <__ieee754_rem_pio2+0x11c>
 8008f1e:	9b04      	ldr	r3, [sp, #16]
 8008f20:	4dbb      	ldr	r5, [pc, #748]	@ (8009210 <__ieee754_rem_pio2+0x320>)
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	a3aa      	add	r3, pc, #680	@ (adr r3, 80091d0 <__ieee754_rem_pio2+0x2e0>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	dd38      	ble.n	8008f9e <__ieee754_rem_pio2+0xae>
 8008f2c:	f7f7 f988 	bl	8000240 <__aeabi_dsub>
 8008f30:	45a8      	cmp	r8, r5
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	d01a      	beq.n	8008f6e <__ieee754_rem_pio2+0x7e>
 8008f38:	a3a7      	add	r3, pc, #668	@ (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e8>)
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f7f7 f97f 	bl	8000240 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 f977 	bl	8000240 <__aeabi_dsub>
 8008f52:	a3a1      	add	r3, pc, #644	@ (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e8>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 f972 	bl	8000240 <__aeabi_dsub>
 8008f5c:	2501      	movs	r5, #1
 8008f5e:	e9c4 8900 	strd	r8, r9, [r4]
 8008f62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f66:	4628      	mov	r0, r5
 8008f68:	b00d      	add	sp, #52	@ 0x34
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6e:	a39c      	add	r3, pc, #624	@ (adr r3, 80091e0 <__ieee754_rem_pio2+0x2f0>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 f964 	bl	8000240 <__aeabi_dsub>
 8008f78:	a39b      	add	r3, pc, #620	@ (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f8>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460f      	mov	r7, r1
 8008f82:	f7f7 f95d 	bl	8000240 <__aeabi_dsub>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 f955 	bl	8000240 <__aeabi_dsub>
 8008f96:	a394      	add	r3, pc, #592	@ (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f8>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	e7dc      	b.n	8008f58 <__ieee754_rem_pio2+0x68>
 8008f9e:	f7f7 f951 	bl	8000244 <__adddf3>
 8008fa2:	45a8      	cmp	r8, r5
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	460f      	mov	r7, r1
 8008fa8:	d018      	beq.n	8008fdc <__ieee754_rem_pio2+0xec>
 8008faa:	a38b      	add	r3, pc, #556	@ (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f948 	bl	8000244 <__adddf3>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4689      	mov	r9, r1
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 f93e 	bl	8000240 <__aeabi_dsub>
 8008fc4:	a384      	add	r3, pc, #528	@ (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e8>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f93b 	bl	8000244 <__adddf3>
 8008fce:	f04f 35ff 	mov.w	r5, #4294967295
 8008fd2:	e9c4 8900 	strd	r8, r9, [r4]
 8008fd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fda:	e7c4      	b.n	8008f66 <__ieee754_rem_pio2+0x76>
 8008fdc:	a380      	add	r3, pc, #512	@ (adr r3, 80091e0 <__ieee754_rem_pio2+0x2f0>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 f92f 	bl	8000244 <__adddf3>
 8008fe6:	a380      	add	r3, pc, #512	@ (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f8>)
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	4606      	mov	r6, r0
 8008fee:	460f      	mov	r7, r1
 8008ff0:	f7f7 f928 	bl	8000244 <__adddf3>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4639      	mov	r1, r7
 8009000:	f7f7 f91e 	bl	8000240 <__aeabi_dsub>
 8009004:	a378      	add	r3, pc, #480	@ (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f8>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	e7de      	b.n	8008fca <__ieee754_rem_pio2+0xda>
 800900c:	4b81      	ldr	r3, [pc, #516]	@ (8009214 <__ieee754_rem_pio2+0x324>)
 800900e:	4598      	cmp	r8, r3
 8009010:	f200 80cf 	bhi.w	80091b2 <__ieee754_rem_pio2+0x2c2>
 8009014:	f000 f962 	bl	80092dc <fabs>
 8009018:	a375      	add	r3, pc, #468	@ (adr r3, 80091f0 <__ieee754_rem_pio2+0x300>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	f7f7 fac5 	bl	80005b0 <__aeabi_dmul>
 8009026:	2200      	movs	r2, #0
 8009028:	4b7b      	ldr	r3, [pc, #492]	@ (8009218 <__ieee754_rem_pio2+0x328>)
 800902a:	f7f7 f90b 	bl	8000244 <__adddf3>
 800902e:	f7f7 fd6f 	bl	8000b10 <__aeabi_d2iz>
 8009032:	4605      	mov	r5, r0
 8009034:	f7f7 fa52 	bl	80004dc <__aeabi_i2d>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009040:	a363      	add	r3, pc, #396	@ (adr r3, 80091d0 <__ieee754_rem_pio2+0x2e0>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 fab3 	bl	80005b0 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 f8f5 	bl	8000240 <__aeabi_dsub>
 8009056:	a360      	add	r3, pc, #384	@ (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e8>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	4682      	mov	sl, r0
 800905e:	468b      	mov	fp, r1
 8009060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009064:	f7f7 faa4 	bl	80005b0 <__aeabi_dmul>
 8009068:	2d1f      	cmp	r5, #31
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	dc0c      	bgt.n	800908a <__ieee754_rem_pio2+0x19a>
 8009070:	4b6a      	ldr	r3, [pc, #424]	@ (800921c <__ieee754_rem_pio2+0x32c>)
 8009072:	1e6a      	subs	r2, r5, #1
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	4543      	cmp	r3, r8
 800907a:	d006      	beq.n	800908a <__ieee754_rem_pio2+0x19a>
 800907c:	4632      	mov	r2, r6
 800907e:	463b      	mov	r3, r7
 8009080:	4650      	mov	r0, sl
 8009082:	4659      	mov	r1, fp
 8009084:	f7f7 f8dc 	bl	8000240 <__aeabi_dsub>
 8009088:	e00e      	b.n	80090a8 <__ieee754_rem_pio2+0x1b8>
 800908a:	463b      	mov	r3, r7
 800908c:	4632      	mov	r2, r6
 800908e:	4650      	mov	r0, sl
 8009090:	4659      	mov	r1, fp
 8009092:	f7f7 f8d5 	bl	8000240 <__aeabi_dsub>
 8009096:	ea4f 5328 	mov.w	r3, r8, asr #20
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80090a4:	2b10      	cmp	r3, #16
 80090a6:	dc02      	bgt.n	80090ae <__ieee754_rem_pio2+0x1be>
 80090a8:	e9c4 0100 	strd	r0, r1, [r4]
 80090ac:	e039      	b.n	8009122 <__ieee754_rem_pio2+0x232>
 80090ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80091e0 <__ieee754_rem_pio2+0x2f0>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b8:	f7f7 fa7a 	bl	80005b0 <__aeabi_dmul>
 80090bc:	4606      	mov	r6, r0
 80090be:	460f      	mov	r7, r1
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4650      	mov	r0, sl
 80090c6:	4659      	mov	r1, fp
 80090c8:	f7f7 f8ba 	bl	8000240 <__aeabi_dsub>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	4650      	mov	r0, sl
 80090d6:	4659      	mov	r1, fp
 80090d8:	f7f7 f8b2 	bl	8000240 <__aeabi_dsub>
 80090dc:	4632      	mov	r2, r6
 80090de:	463b      	mov	r3, r7
 80090e0:	f7f7 f8ae 	bl	8000240 <__aeabi_dsub>
 80090e4:	a340      	add	r3, pc, #256	@ (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f8>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f2:	f7f7 fa5d 	bl	80005b0 <__aeabi_dmul>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	f7f7 f8a1 	bl	8000240 <__aeabi_dsub>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	4640      	mov	r0, r8
 8009108:	4649      	mov	r1, r9
 800910a:	f7f7 f899 	bl	8000240 <__aeabi_dsub>
 800910e:	9a05      	ldr	r2, [sp, #20]
 8009110:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b31      	cmp	r3, #49	@ 0x31
 8009118:	dc20      	bgt.n	800915c <__ieee754_rem_pio2+0x26c>
 800911a:	46c2      	mov	sl, r8
 800911c:	46cb      	mov	fp, r9
 800911e:	e9c4 0100 	strd	r0, r1, [r4]
 8009122:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009126:	4650      	mov	r0, sl
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	4659      	mov	r1, fp
 800912e:	f7f7 f887 	bl	8000240 <__aeabi_dsub>
 8009132:	463b      	mov	r3, r7
 8009134:	4632      	mov	r2, r6
 8009136:	f7f7 f883 	bl	8000240 <__aeabi_dsub>
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f6bf af10 	bge.w	8008f66 <__ieee754_rem_pio2+0x76>
 8009146:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009150:	f8c4 8000 	str.w	r8, [r4]
 8009154:	60a0      	str	r0, [r4, #8]
 8009156:	60e3      	str	r3, [r4, #12]
 8009158:	426d      	negs	r5, r5
 800915a:	e704      	b.n	8008f66 <__ieee754_rem_pio2+0x76>
 800915c:	a326      	add	r3, pc, #152	@ (adr r3, 80091f8 <__ieee754_rem_pio2+0x308>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009166:	f7f7 fa23 	bl	80005b0 <__aeabi_dmul>
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 f863 	bl	8000240 <__aeabi_dsub>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4682      	mov	sl, r0
 8009180:	468b      	mov	fp, r1
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 f85b 	bl	8000240 <__aeabi_dsub>
 800918a:	4632      	mov	r2, r6
 800918c:	463b      	mov	r3, r7
 800918e:	f7f7 f857 	bl	8000240 <__aeabi_dsub>
 8009192:	a31b      	add	r3, pc, #108	@ (adr r3, 8009200 <__ieee754_rem_pio2+0x310>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	4606      	mov	r6, r0
 800919a:	460f      	mov	r7, r1
 800919c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a0:	f7f7 fa06 	bl	80005b0 <__aeabi_dmul>
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	f7f7 f84a 	bl	8000240 <__aeabi_dsub>
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	e764      	b.n	800907c <__ieee754_rem_pio2+0x18c>
 80091b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <__ieee754_rem_pio2+0x330>)
 80091b4:	4598      	cmp	r8, r3
 80091b6:	d935      	bls.n	8009224 <__ieee754_rem_pio2+0x334>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	f7f7 f840 	bl	8000240 <__aeabi_dsub>
 80091c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091c4:	e9c4 0100 	strd	r0, r1, [r4]
 80091c8:	e6a4      	b.n	8008f14 <__ieee754_rem_pio2+0x24>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
 80091d0:	54400000 	.word	0x54400000
 80091d4:	3ff921fb 	.word	0x3ff921fb
 80091d8:	1a626331 	.word	0x1a626331
 80091dc:	3dd0b461 	.word	0x3dd0b461
 80091e0:	1a600000 	.word	0x1a600000
 80091e4:	3dd0b461 	.word	0x3dd0b461
 80091e8:	2e037073 	.word	0x2e037073
 80091ec:	3ba3198a 	.word	0x3ba3198a
 80091f0:	6dc9c883 	.word	0x6dc9c883
 80091f4:	3fe45f30 	.word	0x3fe45f30
 80091f8:	2e000000 	.word	0x2e000000
 80091fc:	3ba3198a 	.word	0x3ba3198a
 8009200:	252049c1 	.word	0x252049c1
 8009204:	397b839a 	.word	0x397b839a
 8009208:	3fe921fb 	.word	0x3fe921fb
 800920c:	4002d97b 	.word	0x4002d97b
 8009210:	3ff921fb 	.word	0x3ff921fb
 8009214:	413921fb 	.word	0x413921fb
 8009218:	3fe00000 	.word	0x3fe00000
 800921c:	0800e628 	.word	0x0800e628
 8009220:	7fefffff 	.word	0x7fefffff
 8009224:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009228:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800922c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009230:	460f      	mov	r7, r1
 8009232:	f7f7 fc6d 	bl	8000b10 <__aeabi_d2iz>
 8009236:	f7f7 f951 	bl	80004dc <__aeabi_i2d>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009246:	f7f6 fffb 	bl	8000240 <__aeabi_dsub>
 800924a:	2200      	movs	r2, #0
 800924c:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <__ieee754_rem_pio2+0x3e4>)
 800924e:	f7f7 f9af 	bl	80005b0 <__aeabi_dmul>
 8009252:	460f      	mov	r7, r1
 8009254:	4606      	mov	r6, r0
 8009256:	f7f7 fc5b 	bl	8000b10 <__aeabi_d2iz>
 800925a:	f7f7 f93f 	bl	80004dc <__aeabi_i2d>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800926a:	f7f6 ffe9 	bl	8000240 <__aeabi_dsub>
 800926e:	2200      	movs	r2, #0
 8009270:	4b18      	ldr	r3, [pc, #96]	@ (80092d4 <__ieee754_rem_pio2+0x3e4>)
 8009272:	f7f7 f99d 	bl	80005b0 <__aeabi_dmul>
 8009276:	f04f 0803 	mov.w	r8, #3
 800927a:	2600      	movs	r6, #0
 800927c:	2700      	movs	r7, #0
 800927e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009282:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009286:	4632      	mov	r2, r6
 8009288:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800928c:	463b      	mov	r3, r7
 800928e:	46c2      	mov	sl, r8
 8009290:	f108 38ff 	add.w	r8, r8, #4294967295
 8009294:	f7f7 fbf4 	bl	8000a80 <__aeabi_dcmpeq>
 8009298:	2800      	cmp	r0, #0
 800929a:	d1f4      	bne.n	8009286 <__ieee754_rem_pio2+0x396>
 800929c:	4b0e      	ldr	r3, [pc, #56]	@ (80092d8 <__ieee754_rem_pio2+0x3e8>)
 800929e:	462a      	mov	r2, r5
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	2302      	movs	r3, #2
 80092a4:	4621      	mov	r1, r4
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	a806      	add	r0, sp, #24
 80092aa:	4653      	mov	r3, sl
 80092ac:	f000 f81a 	bl	80092e4 <__kernel_rem_pio2>
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	4605      	mov	r5, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f6bf ae56 	bge.w	8008f66 <__ieee754_rem_pio2+0x76>
 80092ba:	e9d4 2100 	ldrd	r2, r1, [r4]
 80092be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092c2:	e9c4 2300 	strd	r2, r3, [r4]
 80092c6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80092ca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80092d2:	e741      	b.n	8009158 <__ieee754_rem_pio2+0x268>
 80092d4:	41700000 	.word	0x41700000
 80092d8:	0800e6a8 	.word	0x0800e6a8

080092dc <fabs>:
 80092dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80092e0:	4619      	mov	r1, r3
 80092e2:	4770      	bx	lr

080092e4 <__kernel_rem_pio2>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80092ec:	9308      	str	r3, [sp, #32]
 80092ee:	9104      	str	r1, [sp, #16]
 80092f0:	4bba      	ldr	r3, [pc, #744]	@ (80095dc <__kernel_rem_pio2+0x2f8>)
 80092f2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80092f4:	f112 0f14 	cmn.w	r2, #20
 80092f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092fc:	bfa8      	it	ge
 80092fe:	1ed4      	subge	r4, r2, #3
 8009300:	9302      	str	r3, [sp, #8]
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	bfb8      	it	lt
 8009306:	2400      	movlt	r4, #0
 8009308:	f103 33ff 	add.w	r3, r3, #4294967295
 800930c:	9306      	str	r3, [sp, #24]
 800930e:	bfa4      	itt	ge
 8009310:	2318      	movge	r3, #24
 8009312:	fb94 f4f3 	sdivge	r4, r4, r3
 8009316:	f06f 0317 	mvn.w	r3, #23
 800931a:	fb04 3303 	mla	r3, r4, r3, r3
 800931e:	eb03 0a02 	add.w	sl, r3, r2
 8009322:	9a06      	ldr	r2, [sp, #24]
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	1aa7      	subs	r7, r4, r2
 8009328:	eb03 0802 	add.w	r8, r3, r2
 800932c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800932e:	2500      	movs	r5, #0
 8009330:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009334:	2200      	movs	r2, #0
 8009336:	2300      	movs	r3, #0
 8009338:	9009      	str	r0, [sp, #36]	@ 0x24
 800933a:	ae20      	add	r6, sp, #128	@ 0x80
 800933c:	4545      	cmp	r5, r8
 800933e:	dd13      	ble.n	8009368 <__kernel_rem_pio2+0x84>
 8009340:	2700      	movs	r7, #0
 8009342:	9a08      	ldr	r2, [sp, #32]
 8009344:	ab20      	add	r3, sp, #128	@ 0x80
 8009346:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800934a:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	429f      	cmp	r7, r3
 8009352:	dc33      	bgt.n	80093bc <__kernel_rem_pio2+0xd8>
 8009354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009356:	2200      	movs	r2, #0
 8009358:	f1a3 0908 	sub.w	r9, r3, #8
 800935c:	2300      	movs	r3, #0
 800935e:	46a8      	mov	r8, r5
 8009360:	2600      	movs	r6, #0
 8009362:	e9cd 2300 	strd	r2, r3, [sp]
 8009366:	e01f      	b.n	80093a8 <__kernel_rem_pio2+0xc4>
 8009368:	42ef      	cmn	r7, r5
 800936a:	d40b      	bmi.n	8009384 <__kernel_rem_pio2+0xa0>
 800936c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009370:	e9cd 2300 	strd	r2, r3, [sp]
 8009374:	f7f7 f8b2 	bl	80004dc <__aeabi_i2d>
 8009378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800937c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009380:	3501      	adds	r5, #1
 8009382:	e7db      	b.n	800933c <__kernel_rem_pio2+0x58>
 8009384:	4610      	mov	r0, r2
 8009386:	4619      	mov	r1, r3
 8009388:	e7f8      	b.n	800937c <__kernel_rem_pio2+0x98>
 800938a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800938e:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009392:	f7f7 f90d 	bl	80005b0 <__aeabi_dmul>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800939e:	f7f6 ff51 	bl	8000244 <__adddf3>
 80093a2:	e9cd 0100 	strd	r0, r1, [sp]
 80093a6:	3601      	adds	r6, #1
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	429e      	cmp	r6, r3
 80093ac:	dded      	ble.n	800938a <__kernel_rem_pio2+0xa6>
 80093ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b2:	3701      	adds	r7, #1
 80093b4:	e8eb 2302 	strd	r2, r3, [fp], #8
 80093b8:	3508      	adds	r5, #8
 80093ba:	e7c8      	b.n	800934e <__kernel_rem_pio2+0x6a>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	aa0c      	add	r2, sp, #48	@ 0x30
 80093c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093c6:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80093c8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80093cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80093d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d2:	ab98      	add	r3, sp, #608	@ 0x260
 80093d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093d8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80093dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80093de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093e2:	ae0c      	add	r6, sp, #48	@ 0x30
 80093e4:	4699      	mov	r9, r3
 80093e6:	46b0      	mov	r8, r6
 80093e8:	465f      	mov	r7, fp
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	2f00      	cmp	r7, #0
 80093ee:	dc71      	bgt.n	80094d4 <__kernel_rem_pio2+0x1f0>
 80093f0:	4652      	mov	r2, sl
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f000 fa97 	bl	8009928 <scalbn>
 80093fa:	2200      	movs	r2, #0
 80093fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	f7f7 f8d4 	bl	80005b0 <__aeabi_dmul>
 8009408:	f000 fb02 	bl	8009a10 <floor>
 800940c:	2200      	movs	r2, #0
 800940e:	4b74      	ldr	r3, [pc, #464]	@ (80095e0 <__kernel_rem_pio2+0x2fc>)
 8009410:	f7f7 f8ce 	bl	80005b0 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff10 	bl	8000240 <__aeabi_dsub>
 8009420:	460d      	mov	r5, r1
 8009422:	4604      	mov	r4, r0
 8009424:	f7f7 fb74 	bl	8000b10 <__aeabi_d2iz>
 8009428:	9005      	str	r0, [sp, #20]
 800942a:	f7f7 f857 	bl	80004dc <__aeabi_i2d>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f6 ff03 	bl	8000240 <__aeabi_dsub>
 800943a:	f1ba 0f00 	cmp.w	sl, #0
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	dd6d      	ble.n	8009520 <__kernel_rem_pio2+0x23c>
 8009444:	f10b 31ff 	add.w	r1, fp, #4294967295
 8009448:	ab0c      	add	r3, sp, #48	@ 0x30
 800944a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800944e:	9c05      	ldr	r4, [sp, #20]
 8009450:	f1ca 0018 	rsb	r0, sl, #24
 8009454:	fa43 f200 	asr.w	r2, r3, r0
 8009458:	4414      	add	r4, r2
 800945a:	4082      	lsls	r2, r0
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009460:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009464:	f1ca 0217 	rsb	r2, sl, #23
 8009468:	9405      	str	r4, [sp, #20]
 800946a:	4113      	asrs	r3, r2
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dd64      	ble.n	800953e <__kernel_rem_pio2+0x25a>
 8009474:	2200      	movs	r2, #0
 8009476:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800947a:	4614      	mov	r4, r2
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	3301      	adds	r3, #1
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	4593      	cmp	fp, r2
 8009484:	f300 809d 	bgt.w	80095c2 <__kernel_rem_pio2+0x2de>
 8009488:	f1ba 0f00 	cmp.w	sl, #0
 800948c:	dd07      	ble.n	800949e <__kernel_rem_pio2+0x1ba>
 800948e:	f1ba 0f01 	cmp.w	sl, #1
 8009492:	f000 80b3 	beq.w	80095fc <__kernel_rem_pio2+0x318>
 8009496:	f1ba 0f02 	cmp.w	sl, #2
 800949a:	f000 80ba 	beq.w	8009612 <__kernel_rem_pio2+0x32e>
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d14c      	bne.n	800953e <__kernel_rem_pio2+0x25a>
 80094a4:	4642      	mov	r2, r8
 80094a6:	464b      	mov	r3, r9
 80094a8:	2000      	movs	r0, #0
 80094aa:	494e      	ldr	r1, [pc, #312]	@ (80095e4 <__kernel_rem_pio2+0x300>)
 80094ac:	f7f6 fec8 	bl	8000240 <__aeabi_dsub>
 80094b0:	4680      	mov	r8, r0
 80094b2:	4689      	mov	r9, r1
 80094b4:	2c00      	cmp	r4, #0
 80094b6:	d042      	beq.n	800953e <__kernel_rem_pio2+0x25a>
 80094b8:	4652      	mov	r2, sl
 80094ba:	2000      	movs	r0, #0
 80094bc:	4949      	ldr	r1, [pc, #292]	@ (80095e4 <__kernel_rem_pio2+0x300>)
 80094be:	f000 fa33 	bl	8009928 <scalbn>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f6 feb9 	bl	8000240 <__aeabi_dsub>
 80094ce:	4680      	mov	r8, r0
 80094d0:	4689      	mov	r9, r1
 80094d2:	e034      	b.n	800953e <__kernel_rem_pio2+0x25a>
 80094d4:	2200      	movs	r2, #0
 80094d6:	4b44      	ldr	r3, [pc, #272]	@ (80095e8 <__kernel_rem_pio2+0x304>)
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f7 f868 	bl	80005b0 <__aeabi_dmul>
 80094e0:	f7f7 fb16 	bl	8000b10 <__aeabi_d2iz>
 80094e4:	f7f6 fffa 	bl	80004dc <__aeabi_i2d>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	e9cd 2300 	strd	r2, r3, [sp]
 80094f0:	2200      	movs	r2, #0
 80094f2:	4b3e      	ldr	r3, [pc, #248]	@ (80095ec <__kernel_rem_pio2+0x308>)
 80094f4:	f7f7 f85c 	bl	80005b0 <__aeabi_dmul>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4620      	mov	r0, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f6 fe9e 	bl	8000240 <__aeabi_dsub>
 8009504:	f7f7 fb04 	bl	8000b10 <__aeabi_d2iz>
 8009508:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800950c:	f848 0b04 	str.w	r0, [r8], #4
 8009510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009514:	f7f6 fe96 	bl	8000244 <__adddf3>
 8009518:	3f01      	subs	r7, #1
 800951a:	4604      	mov	r4, r0
 800951c:	460d      	mov	r5, r1
 800951e:	e765      	b.n	80093ec <__kernel_rem_pio2+0x108>
 8009520:	d106      	bne.n	8009530 <__kernel_rem_pio2+0x24c>
 8009522:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009526:	aa0c      	add	r2, sp, #48	@ 0x30
 8009528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952c:	15db      	asrs	r3, r3, #23
 800952e:	e79d      	b.n	800946c <__kernel_rem_pio2+0x188>
 8009530:	2200      	movs	r2, #0
 8009532:	4b2f      	ldr	r3, [pc, #188]	@ (80095f0 <__kernel_rem_pio2+0x30c>)
 8009534:	f7f7 fac2 	bl	8000abc <__aeabi_dcmpge>
 8009538:	2800      	cmp	r0, #0
 800953a:	d13f      	bne.n	80095bc <__kernel_rem_pio2+0x2d8>
 800953c:	9000      	str	r0, [sp, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	f7f7 fa9b 	bl	8000a80 <__aeabi_dcmpeq>
 800954a:	2800      	cmp	r0, #0
 800954c:	f000 80b0 	beq.w	80096b0 <__kernel_rem_pio2+0x3cc>
 8009550:	2200      	movs	r2, #0
 8009552:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009556:	9902      	ldr	r1, [sp, #8]
 8009558:	428b      	cmp	r3, r1
 800955a:	da62      	bge.n	8009622 <__kernel_rem_pio2+0x33e>
 800955c:	2a00      	cmp	r2, #0
 800955e:	d077      	beq.n	8009650 <__kernel_rem_pio2+0x36c>
 8009560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009564:	ab0c      	add	r3, sp, #48	@ 0x30
 8009566:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800956a:	f1aa 0a18 	sub.w	sl, sl, #24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0f6      	beq.n	8009560 <__kernel_rem_pio2+0x27c>
 8009572:	4652      	mov	r2, sl
 8009574:	2000      	movs	r0, #0
 8009576:	491b      	ldr	r1, [pc, #108]	@ (80095e4 <__kernel_rem_pio2+0x300>)
 8009578:	f000 f9d6 	bl	8009928 <scalbn>
 800957c:	465d      	mov	r5, fp
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	f04f 0900 	mov.w	r9, #0
 8009586:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009588:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095e8 <__kernel_rem_pio2+0x304>
 800958c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8009590:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8009594:	2d00      	cmp	r5, #0
 8009596:	f280 80c1 	bge.w	800971c <__kernel_rem_pio2+0x438>
 800959a:	465d      	mov	r5, fp
 800959c:	2d00      	cmp	r5, #0
 800959e:	f2c0 80f1 	blt.w	8009784 <__kernel_rem_pio2+0x4a0>
 80095a2:	4b14      	ldr	r3, [pc, #80]	@ (80095f4 <__kernel_rem_pio2+0x310>)
 80095a4:	f04f 0900 	mov.w	r9, #0
 80095a8:	9306      	str	r3, [sp, #24]
 80095aa:	ab70      	add	r3, sp, #448	@ 0x1c0
 80095ac:	f04f 0a00 	mov.w	sl, #0
 80095b0:	2700      	movs	r7, #0
 80095b2:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80095b6:	ebab 0605 	sub.w	r6, fp, r5
 80095ba:	e0d7      	b.n	800976c <__kernel_rem_pio2+0x488>
 80095bc:	2302      	movs	r3, #2
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	e758      	b.n	8009474 <__kernel_rem_pio2+0x190>
 80095c2:	f856 3b04 	ldr.w	r3, [r6], #4
 80095c6:	b9bc      	cbnz	r4, 80095f8 <__kernel_rem_pio2+0x314>
 80095c8:	b123      	cbz	r3, 80095d4 <__kernel_rem_pio2+0x2f0>
 80095ca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80095ce:	f846 3c04 	str.w	r3, [r6, #-4]
 80095d2:	2301      	movs	r3, #1
 80095d4:	461c      	mov	r4, r3
 80095d6:	3201      	adds	r2, #1
 80095d8:	e753      	b.n	8009482 <__kernel_rem_pio2+0x19e>
 80095da:	bf00      	nop
 80095dc:	0800e7f0 	.word	0x0800e7f0
 80095e0:	40200000 	.word	0x40200000
 80095e4:	3ff00000 	.word	0x3ff00000
 80095e8:	3e700000 	.word	0x3e700000
 80095ec:	41700000 	.word	0x41700000
 80095f0:	3fe00000 	.word	0x3fe00000
 80095f4:	0800e7b0 	.word	0x0800e7b0
 80095f8:	1acb      	subs	r3, r1, r3
 80095fa:	e7e8      	b.n	80095ce <__kernel_rem_pio2+0x2ea>
 80095fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009600:	ab0c      	add	r3, sp, #48	@ 0x30
 8009602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009606:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800960a:	a90c      	add	r1, sp, #48	@ 0x30
 800960c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009610:	e745      	b.n	800949e <__kernel_rem_pio2+0x1ba>
 8009612:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009616:	ab0c      	add	r3, sp, #48	@ 0x30
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009620:	e7f3      	b.n	800960a <__kernel_rem_pio2+0x326>
 8009622:	a90c      	add	r1, sp, #48	@ 0x30
 8009624:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009628:	3b01      	subs	r3, #1
 800962a:	430a      	orrs	r2, r1
 800962c:	e793      	b.n	8009556 <__kernel_rem_pio2+0x272>
 800962e:	3401      	adds	r4, #1
 8009630:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009634:	2a00      	cmp	r2, #0
 8009636:	d0fa      	beq.n	800962e <__kernel_rem_pio2+0x34a>
 8009638:	9b08      	ldr	r3, [sp, #32]
 800963a:	aa20      	add	r2, sp, #128	@ 0x80
 800963c:	445b      	add	r3, fp
 800963e:	f10b 0801 	add.w	r8, fp, #1
 8009642:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009646:	445c      	add	r4, fp
 8009648:	4544      	cmp	r4, r8
 800964a:	da04      	bge.n	8009656 <__kernel_rem_pio2+0x372>
 800964c:	46a3      	mov	fp, r4
 800964e:	e6c0      	b.n	80093d2 <__kernel_rem_pio2+0xee>
 8009650:	2401      	movs	r4, #1
 8009652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009654:	e7ec      	b.n	8009630 <__kernel_rem_pio2+0x34c>
 8009656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009658:	46ab      	mov	fp, r5
 800965a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800965e:	f7f6 ff3d 	bl	80004dc <__aeabi_i2d>
 8009662:	f04f 0900 	mov.w	r9, #0
 8009666:	2600      	movs	r6, #0
 8009668:	2700      	movs	r7, #0
 800966a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966c:	e9c5 0100 	strd	r0, r1, [r5]
 8009670:	3b08      	subs	r3, #8
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	9b06      	ldr	r3, [sp, #24]
 8009676:	4599      	cmp	r9, r3
 8009678:	dd07      	ble.n	800968a <__kernel_rem_pio2+0x3a6>
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	f108 0801 	add.w	r8, r8, #1
 8009680:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8009684:	3508      	adds	r5, #8
 8009686:	9307      	str	r3, [sp, #28]
 8009688:	e7de      	b.n	8009648 <__kernel_rem_pio2+0x364>
 800968a:	9900      	ldr	r1, [sp, #0]
 800968c:	f109 0901 	add.w	r9, r9, #1
 8009690:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009694:	9100      	str	r1, [sp, #0]
 8009696:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800969a:	f7f6 ff89 	bl	80005b0 <__aeabi_dmul>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f6 fdcd 	bl	8000244 <__adddf3>
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	e7e1      	b.n	8009674 <__kernel_rem_pio2+0x390>
 80096b0:	f1ca 0200 	rsb	r2, sl, #0
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	f000 f936 	bl	8009928 <scalbn>
 80096bc:	2200      	movs	r2, #0
 80096be:	4b97      	ldr	r3, [pc, #604]	@ (800991c <__kernel_rem_pio2+0x638>)
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	f7f7 f9fa 	bl	8000abc <__aeabi_dcmpge>
 80096c8:	b300      	cbz	r0, 800970c <__kernel_rem_pio2+0x428>
 80096ca:	2200      	movs	r2, #0
 80096cc:	4b94      	ldr	r3, [pc, #592]	@ (8009920 <__kernel_rem_pio2+0x63c>)
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7f6 ff6d 	bl	80005b0 <__aeabi_dmul>
 80096d6:	f7f7 fa1b 	bl	8000b10 <__aeabi_d2iz>
 80096da:	4606      	mov	r6, r0
 80096dc:	f7f6 fefe 	bl	80004dc <__aeabi_i2d>
 80096e0:	2200      	movs	r2, #0
 80096e2:	4b8e      	ldr	r3, [pc, #568]	@ (800991c <__kernel_rem_pio2+0x638>)
 80096e4:	f7f6 ff64 	bl	80005b0 <__aeabi_dmul>
 80096e8:	460b      	mov	r3, r1
 80096ea:	4602      	mov	r2, r0
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7f6 fda6 	bl	8000240 <__aeabi_dsub>
 80096f4:	f7f7 fa0c 	bl	8000b10 <__aeabi_d2iz>
 80096f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80096fa:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80096fe:	f10b 0b01 	add.w	fp, fp, #1
 8009702:	f10a 0a18 	add.w	sl, sl, #24
 8009706:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800970a:	e732      	b.n	8009572 <__kernel_rem_pio2+0x28e>
 800970c:	4620      	mov	r0, r4
 800970e:	4629      	mov	r1, r5
 8009710:	f7f7 f9fe 	bl	8000b10 <__aeabi_d2iz>
 8009714:	ab0c      	add	r3, sp, #48	@ 0x30
 8009716:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800971a:	e72a      	b.n	8009572 <__kernel_rem_pio2+0x28e>
 800971c:	ab0c      	add	r3, sp, #48	@ 0x30
 800971e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009722:	f7f6 fedb 	bl	80004dc <__aeabi_i2d>
 8009726:	4632      	mov	r2, r6
 8009728:	463b      	mov	r3, r7
 800972a:	f7f6 ff41 	bl	80005b0 <__aeabi_dmul>
 800972e:	464a      	mov	r2, r9
 8009730:	e868 0102 	strd	r0, r1, [r8], #-8
 8009734:	4653      	mov	r3, sl
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	f7f6 ff39 	bl	80005b0 <__aeabi_dmul>
 800973e:	3d01      	subs	r5, #1
 8009740:	4606      	mov	r6, r0
 8009742:	460f      	mov	r7, r1
 8009744:	e726      	b.n	8009594 <__kernel_rem_pio2+0x2b0>
 8009746:	f8dd c018 	ldr.w	ip, [sp, #24]
 800974a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800974e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8009752:	f8cd c018 	str.w	ip, [sp, #24]
 8009756:	f7f6 ff2b 	bl	80005b0 <__aeabi_dmul>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4648      	mov	r0, r9
 8009760:	4651      	mov	r1, sl
 8009762:	f7f6 fd6f 	bl	8000244 <__adddf3>
 8009766:	4681      	mov	r9, r0
 8009768:	468a      	mov	sl, r1
 800976a:	3701      	adds	r7, #1
 800976c:	9b02      	ldr	r3, [sp, #8]
 800976e:	429f      	cmp	r7, r3
 8009770:	dc01      	bgt.n	8009776 <__kernel_rem_pio2+0x492>
 8009772:	42b7      	cmp	r7, r6
 8009774:	dde7      	ble.n	8009746 <__kernel_rem_pio2+0x462>
 8009776:	ab48      	add	r3, sp, #288	@ 0x120
 8009778:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800977c:	e9c6 9a00 	strd	r9, sl, [r6]
 8009780:	3d01      	subs	r5, #1
 8009782:	e70b      	b.n	800959c <__kernel_rem_pio2+0x2b8>
 8009784:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8009786:	2b02      	cmp	r3, #2
 8009788:	dc09      	bgt.n	800979e <__kernel_rem_pio2+0x4ba>
 800978a:	2b00      	cmp	r3, #0
 800978c:	dc2c      	bgt.n	80097e8 <__kernel_rem_pio2+0x504>
 800978e:	d04e      	beq.n	800982e <__kernel_rem_pio2+0x54a>
 8009790:	9b05      	ldr	r3, [sp, #20]
 8009792:	f003 0007 	and.w	r0, r3, #7
 8009796:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d1f5      	bne.n	8009790 <__kernel_rem_pio2+0x4ac>
 80097a4:	ab48      	add	r3, sp, #288	@ 0x120
 80097a6:	441c      	add	r4, r3
 80097a8:	4625      	mov	r5, r4
 80097aa:	46da      	mov	sl, fp
 80097ac:	f1ba 0f00 	cmp.w	sl, #0
 80097b0:	dc63      	bgt.n	800987a <__kernel_rem_pio2+0x596>
 80097b2:	4625      	mov	r5, r4
 80097b4:	46da      	mov	sl, fp
 80097b6:	f1ba 0f01 	cmp.w	sl, #1
 80097ba:	dc7b      	bgt.n	80098b4 <__kernel_rem_pio2+0x5d0>
 80097bc:	2000      	movs	r0, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	f1bb 0f01 	cmp.w	fp, #1
 80097c4:	f300 8093 	bgt.w	80098ee <__kernel_rem_pio2+0x60a>
 80097c8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80097cc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80097d0:	9b00      	ldr	r3, [sp, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f040 8092 	bne.w	80098fc <__kernel_rem_pio2+0x618>
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	e9c3 5600 	strd	r5, r6, [r3]
 80097de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80097e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80097e6:	e7d3      	b.n	8009790 <__kernel_rem_pio2+0x4ac>
 80097e8:	465d      	mov	r5, fp
 80097ea:	2000      	movs	r0, #0
 80097ec:	2100      	movs	r1, #0
 80097ee:	ab48      	add	r3, sp, #288	@ 0x120
 80097f0:	441c      	add	r4, r3
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	da32      	bge.n	800985c <__kernel_rem_pio2+0x578>
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d035      	beq.n	8009868 <__kernel_rem_pio2+0x584>
 80097fc:	4602      	mov	r2, r0
 80097fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009802:	9c04      	ldr	r4, [sp, #16]
 8009804:	2501      	movs	r5, #1
 8009806:	e9c4 2300 	strd	r2, r3, [r4]
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009812:	f7f6 fd15 	bl	8000240 <__aeabi_dsub>
 8009816:	ac48      	add	r4, sp, #288	@ 0x120
 8009818:	45ab      	cmp	fp, r5
 800981a:	da28      	bge.n	800986e <__kernel_rem_pio2+0x58a>
 800981c:	9b00      	ldr	r3, [sp, #0]
 800981e:	b113      	cbz	r3, 8009826 <__kernel_rem_pio2+0x542>
 8009820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009824:	4619      	mov	r1, r3
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800982c:	e7b0      	b.n	8009790 <__kernel_rem_pio2+0x4ac>
 800982e:	2000      	movs	r0, #0
 8009830:	2100      	movs	r1, #0
 8009832:	ab48      	add	r3, sp, #288	@ 0x120
 8009834:	441c      	add	r4, r3
 8009836:	f1bb 0f00 	cmp.w	fp, #0
 800983a:	da08      	bge.n	800984e <__kernel_rem_pio2+0x56a>
 800983c:	9b00      	ldr	r3, [sp, #0]
 800983e:	b113      	cbz	r3, 8009846 <__kernel_rem_pio2+0x562>
 8009840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009844:	4619      	mov	r1, r3
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	e9c3 0100 	strd	r0, r1, [r3]
 800984c:	e7a0      	b.n	8009790 <__kernel_rem_pio2+0x4ac>
 800984e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8009852:	f7f6 fcf7 	bl	8000244 <__adddf3>
 8009856:	f10b 3bff 	add.w	fp, fp, #4294967295
 800985a:	e7ec      	b.n	8009836 <__kernel_rem_pio2+0x552>
 800985c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8009860:	f7f6 fcf0 	bl	8000244 <__adddf3>
 8009864:	3d01      	subs	r5, #1
 8009866:	e7c4      	b.n	80097f2 <__kernel_rem_pio2+0x50e>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	e7c9      	b.n	8009802 <__kernel_rem_pio2+0x51e>
 800986e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8009872:	f7f6 fce7 	bl	8000244 <__adddf3>
 8009876:	3501      	adds	r5, #1
 8009878:	e7ce      	b.n	8009818 <__kernel_rem_pio2+0x534>
 800987a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800987e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800988a:	f7f6 fcdb 	bl	8000244 <__adddf3>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4606      	mov	r6, r0
 8009894:	460f      	mov	r7, r1
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f6 fcd1 	bl	8000240 <__aeabi_dsub>
 800989e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a2:	f7f6 fccf 	bl	8000244 <__adddf3>
 80098a6:	e865 0102 	strd	r0, r1, [r5], #-8
 80098aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098ae:	e9c5 6700 	strd	r6, r7, [r5]
 80098b2:	e77b      	b.n	80097ac <__kernel_rem_pio2+0x4c8>
 80098b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098b8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80098bc:	4640      	mov	r0, r8
 80098be:	4649      	mov	r1, r9
 80098c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098c4:	f7f6 fcbe 	bl	8000244 <__adddf3>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4606      	mov	r6, r0
 80098ce:	460f      	mov	r7, r1
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f6 fcb4 	bl	8000240 <__aeabi_dsub>
 80098d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098dc:	f7f6 fcb2 	bl	8000244 <__adddf3>
 80098e0:	e865 0102 	strd	r0, r1, [r5], #-8
 80098e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098e8:	e9c5 6700 	strd	r6, r7, [r5]
 80098ec:	e763      	b.n	80097b6 <__kernel_rem_pio2+0x4d2>
 80098ee:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80098f2:	f7f6 fca7 	bl	8000244 <__adddf3>
 80098f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098fa:	e761      	b.n	80097c0 <__kernel_rem_pio2+0x4dc>
 80098fc:	9b04      	ldr	r3, [sp, #16]
 80098fe:	9a04      	ldr	r2, [sp, #16]
 8009900:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009904:	601d      	str	r5, [r3, #0]
 8009906:	605c      	str	r4, [r3, #4]
 8009908:	609f      	str	r7, [r3, #8]
 800990a:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800990e:	60d3      	str	r3, [r2, #12]
 8009910:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009914:	6110      	str	r0, [r2, #16]
 8009916:	6153      	str	r3, [r2, #20]
 8009918:	e73a      	b.n	8009790 <__kernel_rem_pio2+0x4ac>
 800991a:	bf00      	nop
 800991c:	41700000 	.word	0x41700000
 8009920:	3e700000 	.word	0x3e700000
 8009924:	00000000 	.word	0x00000000

08009928 <scalbn>:
 8009928:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800992c:	4616      	mov	r6, r2
 800992e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009932:	4683      	mov	fp, r0
 8009934:	468c      	mov	ip, r1
 8009936:	460b      	mov	r3, r1
 8009938:	b982      	cbnz	r2, 800995c <scalbn+0x34>
 800993a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800993e:	4303      	orrs	r3, r0
 8009940:	d035      	beq.n	80099ae <scalbn+0x86>
 8009942:	4b2d      	ldr	r3, [pc, #180]	@ (80099f8 <scalbn+0xd0>)
 8009944:	2200      	movs	r2, #0
 8009946:	f7f6 fe33 	bl	80005b0 <__aeabi_dmul>
 800994a:	4b2c      	ldr	r3, [pc, #176]	@ (80099fc <scalbn+0xd4>)
 800994c:	4683      	mov	fp, r0
 800994e:	429e      	cmp	r6, r3
 8009950:	468c      	mov	ip, r1
 8009952:	da0d      	bge.n	8009970 <scalbn+0x48>
 8009954:	a324      	add	r3, pc, #144	@ (adr r3, 80099e8 <scalbn+0xc0>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	e019      	b.n	8009990 <scalbn+0x68>
 800995c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009960:	42ba      	cmp	r2, r7
 8009962:	d109      	bne.n	8009978 <scalbn+0x50>
 8009964:	4602      	mov	r2, r0
 8009966:	f7f6 fc6d 	bl	8000244 <__adddf3>
 800996a:	4683      	mov	fp, r0
 800996c:	468c      	mov	ip, r1
 800996e:	e01e      	b.n	80099ae <scalbn+0x86>
 8009970:	460b      	mov	r3, r1
 8009972:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009976:	3a36      	subs	r2, #54	@ 0x36
 8009978:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800997c:	428e      	cmp	r6, r1
 800997e:	dd0a      	ble.n	8009996 <scalbn+0x6e>
 8009980:	a31b      	add	r3, pc, #108	@ (adr r3, 80099f0 <scalbn+0xc8>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	4665      	mov	r5, ip
 8009988:	f363 051e 	bfi	r5, r3, #0, #31
 800998c:	4629      	mov	r1, r5
 800998e:	481c      	ldr	r0, [pc, #112]	@ (8009a00 <scalbn+0xd8>)
 8009990:	f7f6 fe0e 	bl	80005b0 <__aeabi_dmul>
 8009994:	e7e9      	b.n	800996a <scalbn+0x42>
 8009996:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800999a:	4432      	add	r2, r6
 800999c:	428a      	cmp	r2, r1
 800999e:	dcef      	bgt.n	8009980 <scalbn+0x58>
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dd08      	ble.n	80099b6 <scalbn+0x8e>
 80099a4:	f36f 531e 	bfc	r3, #20, #11
 80099a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099ac:	46ac      	mov	ip, r5
 80099ae:	4658      	mov	r0, fp
 80099b0:	4661      	mov	r1, ip
 80099b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80099b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80099ba:	da09      	bge.n	80099d0 <scalbn+0xa8>
 80099bc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80099c0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80099c4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80099c8:	480e      	ldr	r0, [pc, #56]	@ (8009a04 <scalbn+0xdc>)
 80099ca:	f041 011f 	orr.w	r1, r1, #31
 80099ce:	e7c1      	b.n	8009954 <scalbn+0x2c>
 80099d0:	3236      	adds	r2, #54	@ 0x36
 80099d2:	f36f 531e 	bfc	r3, #20, #11
 80099d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099da:	4658      	mov	r0, fp
 80099dc:	4629      	mov	r1, r5
 80099de:	2200      	movs	r2, #0
 80099e0:	4b09      	ldr	r3, [pc, #36]	@ (8009a08 <scalbn+0xe0>)
 80099e2:	e7d5      	b.n	8009990 <scalbn+0x68>
 80099e4:	f3af 8000 	nop.w
 80099e8:	c2f8f359 	.word	0xc2f8f359
 80099ec:	01a56e1f 	.word	0x01a56e1f
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	7e37e43c 	.word	0x7e37e43c
 80099f8:	43500000 	.word	0x43500000
 80099fc:	ffff3cb0 	.word	0xffff3cb0
 8009a00:	8800759c 	.word	0x8800759c
 8009a04:	c2f8f359 	.word	0xc2f8f359
 8009a08:	3c900000 	.word	0x3c900000
 8009a0c:	00000000 	.word	0x00000000

08009a10 <floor>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009a18:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8009a1c:	2e13      	cmp	r6, #19
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	460c      	mov	r4, r1
 8009a24:	4605      	mov	r5, r0
 8009a26:	4680      	mov	r8, r0
 8009a28:	dc35      	bgt.n	8009a96 <floor+0x86>
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	da17      	bge.n	8009a5e <floor+0x4e>
 8009a2e:	a334      	add	r3, pc, #208	@ (adr r3, 8009b00 <floor+0xf0>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc06 	bl	8000244 <__adddf3>
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f7f7 f848 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a40:	b150      	cbz	r0, 8009a58 <floor+0x48>
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	da57      	bge.n	8009af6 <floor+0xe6>
 8009a46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009a4a:	432c      	orrs	r4, r5
 8009a4c:	2500      	movs	r5, #0
 8009a4e:	42ac      	cmp	r4, r5
 8009a50:	4c2d      	ldr	r4, [pc, #180]	@ (8009b08 <floor+0xf8>)
 8009a52:	bf08      	it	eq
 8009a54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009a58:	4623      	mov	r3, r4
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	e024      	b.n	8009aa8 <floor+0x98>
 8009a5e:	4f2b      	ldr	r7, [pc, #172]	@ (8009b0c <floor+0xfc>)
 8009a60:	4137      	asrs	r7, r6
 8009a62:	ea01 0c07 	and.w	ip, r1, r7
 8009a66:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009a6a:	d01d      	beq.n	8009aa8 <floor+0x98>
 8009a6c:	a324      	add	r3, pc, #144	@ (adr r3, 8009b00 <floor+0xf0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fbe7 	bl	8000244 <__adddf3>
 8009a76:	2200      	movs	r2, #0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f7f7 f829 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d0ea      	beq.n	8009a58 <floor+0x48>
 8009a82:	2c00      	cmp	r4, #0
 8009a84:	bfbe      	ittt	lt
 8009a86:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009a8a:	4133      	asrlt	r3, r6
 8009a8c:	18e4      	addlt	r4, r4, r3
 8009a8e:	2500      	movs	r5, #0
 8009a90:	ea24 0407 	bic.w	r4, r4, r7
 8009a94:	e7e0      	b.n	8009a58 <floor+0x48>
 8009a96:	2e33      	cmp	r6, #51	@ 0x33
 8009a98:	dd0a      	ble.n	8009ab0 <floor+0xa0>
 8009a9a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009a9e:	d103      	bne.n	8009aa8 <floor+0x98>
 8009aa0:	f7f6 fbd0 	bl	8000244 <__adddf3>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	f04f 3cff 	mov.w	ip, #4294967295
 8009ab4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009ab8:	fa2c f707 	lsr.w	r7, ip, r7
 8009abc:	4207      	tst	r7, r0
 8009abe:	d0f3      	beq.n	8009aa8 <floor+0x98>
 8009ac0:	a30f      	add	r3, pc, #60	@ (adr r3, 8009b00 <floor+0xf0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fbbd 	bl	8000244 <__adddf3>
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	f7f6 ffff 	bl	8000ad0 <__aeabi_dcmpgt>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d0c0      	beq.n	8009a58 <floor+0x48>
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	da0a      	bge.n	8009af0 <floor+0xe0>
 8009ada:	2e14      	cmp	r6, #20
 8009adc:	d101      	bne.n	8009ae2 <floor+0xd2>
 8009ade:	3401      	adds	r4, #1
 8009ae0:	e006      	b.n	8009af0 <floor+0xe0>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009ae8:	40b3      	lsls	r3, r6
 8009aea:	441d      	add	r5, r3
 8009aec:	4545      	cmp	r5, r8
 8009aee:	d3f6      	bcc.n	8009ade <floor+0xce>
 8009af0:	ea25 0507 	bic.w	r5, r5, r7
 8009af4:	e7b0      	b.n	8009a58 <floor+0x48>
 8009af6:	2500      	movs	r5, #0
 8009af8:	462c      	mov	r4, r5
 8009afa:	e7ad      	b.n	8009a58 <floor+0x48>
 8009afc:	f3af 8000 	nop.w
 8009b00:	8800759c 	.word	0x8800759c
 8009b04:	7e37e43c 	.word	0x7e37e43c
 8009b08:	bff00000 	.word	0xbff00000
 8009b0c:	000fffff 	.word	0x000fffff

08009b10 <_init>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr

08009b1c <_fini>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr
